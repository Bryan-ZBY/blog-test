{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"270b6a01a10249e61c9cec5367e3b5fdece6fece","modified":1630748833415},{"_id":"source/favicon.ico","hash":"8fca46bdaa4f0111d9822443d7d00f63ab7281b0","modified":1615812062605},{"_id":"source/_posts/JavaScript-基本概念.md","hash":"ec11e27c2597d94e43f8e76d25733ce78e9d910d","modified":1630748833416},{"_id":"source/_posts/Linux：关闭占用端口的进程-md.md","hash":"340b542a9228f1965941365c8718c931a48b28a0","modified":1630748833418},{"_id":"source/_posts/git-命令.md","hash":"f44af612000f3dd636d3937cdc3a74c7b65f656d","modified":1630748833418},{"_id":"source/_posts/git命令指定默认分支.md","hash":"1ca8c97aa5b61217595a89a8b93624f42ff26b9e","modified":1630748833418},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1630748833419},{"_id":"source/_posts/hexo自动保存域名-md.md","hash":"5b9f37a198d93f160742dc56d365dc8ea3998f48","modified":1630748833419},{"_id":"source/_posts/init-hexo-md.md","hash":"697e555d7a96137be8061357854178c02dbe474e","modified":1630748833419},{"_id":"source/_posts/linux不能使用ftp命令.md","hash":"0d618b99beb3334f6489499e4c68eb8fe7f0c23c","modified":1630748833421},{"_id":"source/_posts/test.md","hash":"ffbdecfe8283a47a9c99a9c90e90a5479d79a5bb","modified":1630748833421},{"_id":"source/_posts/testte-md.md","hash":"06de73aafa4af0ae93f0d55eea1e18813aeeaa75","modified":1615455429737},{"_id":"source/_posts/图解-HTTP.md","hash":"e583d5fcb836410ee57b569fa448b4983b5033a6","modified":1630748833422},{"_id":"source/_posts/我的第一本算法书.md","hash":"2bacd3b1b738c658ceb36f62a41984fc704db63e","modified":1630748833422},{"_id":"source/_posts/解决FTP因windows防火墙拦截的方法-md.md","hash":"27d13de9e7aa3ec13ecf67b9350a92b61e3f1def","modified":1630748833423},{"_id":"source/categories/index.md","hash":"756978d2844ee784cd090533943b2feed92cfac9","modified":1630748833423},{"_id":"source/tags/index.md","hash":"edb46d892859fa1bbc290062304cad17c9a617df","modified":1630748833424},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1630749519621},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1615425802089},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1630749519621},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1630749519623},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1630749519624},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1630749519624},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1615425802092},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1630749519625},{"_id":"themes/next/_config.yml","hash":"cd8ec8caaf33cb7ddf7a39733b9f2a0efda7a756","modified":1630749519626},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1615425802093},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1615425802095},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1630749519659},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1615425802093},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1615425802093},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1615425802093},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1615425802093},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1615425802093},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1615425802093},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1615425802093},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1615425802093},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1615425802094},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1615425802095},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1630749519627},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1630749519627},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1630749519628},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1615425802096},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1615425802096},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1615425802096},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1615425802096},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1630749519628},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1630749519629},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1630749519629},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1630749519629},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1615425802097},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1630749519630},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1630749519630},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1630749519630},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1615425802097},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1615425802098},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1630749519631},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1615425802098},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1615425802098},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1615425802098},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1630749519633},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1630749519657},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1630749519658},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1630749519658},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1630749519658},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1630749519658},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1630749519659},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1615425802111},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1615425802094},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1615425802094},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1615425802094},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1615425802095},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1615425802095},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1615425802095},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1615425802095},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1615425802095},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1615425802095},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1615425802095},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1615425802095},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1615425802095},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1615425802095},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1630749519634},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1630749519634},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1630749519635},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1630749519636},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1630749519636},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1615425802101},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1630749519639},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1615425802103},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1615425802103},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1615425802103},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1615425802103},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1615425802103},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1630749519644},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1615425802104},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1615425802106},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1615425802106},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1630749519653},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1615425802109},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1615425802110},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1615425802110},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1615425802110},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1615425802110},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1615425802110},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1615425802110},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1615425802111},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1615425802111},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1615425802111},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1630749519661},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1615425802111},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1630749519661},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1630749519662},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1630749519662},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1615425802112},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1630749519663},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1615425802113},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1630749519663},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1615425802113},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1615425802113},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1615425802122},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1630749519702},{"_id":"themes/next/source/css/myStyl.styl","hash":"909ae12f4102d99273e3c8baee6fc351b0a51c80","modified":1615965928434},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1630749519703},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1615425802127},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1630749519703},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1630749519703},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1630749519704},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1630749519704},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1630749519705},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1630749519705},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1630749519705},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1630749519706},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1615425802128},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1615425802128},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1630749519707},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1615425802129},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1615425802129},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1615425802129},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1615425802129},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1615425802129},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1615425802129},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1615425802129},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1615425802099},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1615425802099},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1615425802100},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1615425802100},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1615425802100},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1615425802101},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1615425802101},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1615425802101},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1615425802101},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1615425802102},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1615425802102},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1615425802102},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1615425802102},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1615425802102},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1615425802102},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1615425802102},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1630749519639},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1615425802103},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1615425802103},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1630749519643},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630749519643},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630749519644},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1630749519644},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1630749519645},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1630749519647},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1615425802104},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1630749519647},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1615425802104},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1615425802104},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1630749519649},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1630749519649},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1615425802105},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1615425802105},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1630749519651},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1630749519652},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1615425802106},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1615425802106},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1615425802106},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1615425802106},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1630749519656},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1615425802107},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1615425802107},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1615425802107},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1615425802107},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1615425802107},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1615425802107},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1615425802108},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1615425802108},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1615425802109},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1615425802109},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1615425802109},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1615425802109},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1615425802109},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1615425802109},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1615425802109},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1615425802110},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1615425802110},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1615425802110},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1615425802110},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1630749519700},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1630749519700},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630749519700},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1630749519701},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1630749519701},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1615425802129},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1615425802129},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1630749519761},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1630749519762},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1630749519665},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1630749519665},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1630749519666},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1615425802116},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1615425802118},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1630749519687},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1630749519687},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1615425802120},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1615425802120},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1630749519688},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1615425802120},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1630749519688},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1630749519689},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1615425802122},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1630749519692},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1630749519692},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1615425802123},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1630749519693},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e048c9053a591d65ae770e1490ab702f8cccdd23","modified":1615962665739},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1630749519694},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1615425802124},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1630749519696},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1630749519696},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1615425802124},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1615425802124},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1630749519697},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1615425802125},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1630749519698},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1630749519699},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1630749519699},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1615425802125},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1630749519700},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1615425802130},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1615425802130},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1615425802114},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1630749519670},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1630749519671},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1630749519671},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1615425802114},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1630749519672},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1630749519672},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1630749519673},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1630749519673},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1615425802115},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1630749519673},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1615425802115},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1630749519674},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1630749519674},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1630749519675},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1630749519675},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1630749519676},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1630749519676},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1615425802116},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1615425802116},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1615425802117},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1615425802117},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1630749519686},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1615425802117},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1615425802117},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1615425802117},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1615425802117},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1615425802117},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1615425802117},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1615425802117},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1615425802117},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1615425802119},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1615425802119},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1615425802119},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1615425802119},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1615425802119},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1615425802119},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1615425802119},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1615425802119},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1615425802119},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1615425802119},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1615425802120},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1615425802120},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1615425802120},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1615425802120},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1615425802121},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1615425802122},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1615425802122},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1615425802122},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1615425802122},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1615425802122},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1615425802122},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1615425802130},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1615425802131},{"_id":"public/categories/index.html","hash":"07764cbdbc9e5b1ba1773bb4067c7b3194353f63","modified":1630749699700},{"_id":"public/tags/index.html","hash":"dd9c507fe1e1ef54335ae7eefae111671e05322c","modified":1630749699700},{"_id":"public/2021/03/15/linux不能使用ftp命令/index.html","hash":"fe832bad39809d49953870e2ed4e82f5e05e1452","modified":1630749699700},{"_id":"public/2021/03/14/我的第一本算法书/index.html","hash":"7e4298551308a7a1b4aabf2073df43a3acc42306","modified":1630749699700},{"_id":"public/2021/03/11/testte-md/index.html","hash":"adfa46441b86f82f2c8e16dd1101e9b842fea501","modified":1615972977671},{"_id":"public/2021/03/11/Linux：关闭占用端口的进程-md/index.html","hash":"24dbbe21fc26d835a30a3d4020602a376f9855df","modified":1630749699700},{"_id":"public/2021/03/11/hexo自动保存域名-md/index.html","hash":"bad573ac98953c71ec1bd2d3f19ab875f10ecb6d","modified":1630749699700},{"_id":"public/2021/03/11/解决FTP因windows防火墙拦截的方法-md/index.html","hash":"d389af1cf374e32d5f8f042a2c0bb2ad13db12cb","modified":1630749699700},{"_id":"public/2021/03/10/init-hexo-md/index.html","hash":"a66107840bdc2665db17c10083eb3c9d5062b1e2","modified":1630749699700},{"_id":"public/archives/page/2/index.html","hash":"9bec09a1555ee1fe680de382f659e0e0f4a27749","modified":1630749699700},{"_id":"public/archives/2021/page/2/index.html","hash":"d02245ccfa1eafd04d590db9435c01f1b2f18118","modified":1630749699700},{"_id":"public/archives/2021/03/page/2/index.html","hash":"4e715d3b718a0340cb9d851459ed4744383ccda8","modified":1630749699700},{"_id":"public/tags/JavaScript/index.html","hash":"b76ddff78a469cd72992256d3bff02b2e2c48b00","modified":1630749699700},{"_id":"public/tags/Git/index.html","hash":"fc9aa452cf2914027917a475873377510d7b192f","modified":1630749699700},{"_id":"public/tags/FTP/index.html","hash":"860c92308722b470f6a6aadc68e7659a76b1623d","modified":1630749699700},{"_id":"public/tags/算法/index.html","hash":"bcde23195953a07e825e7407fb3331fe80e36bab","modified":1630749699700},{"_id":"public/tags/HTTP/index.html","hash":"3d3c7b8cd919c1db518db43ef57874e53ee826e5","modified":1630749699700},{"_id":"public/2021/03/17/JavaScript-基本概念/index.html","hash":"c35b4683542e5b0161b09ff369274def811fcf39","modified":1630749699700},{"_id":"public/2021/03/15/git-命令/index.html","hash":"cd7ce82d5850a902a0c0f2dcf2c54070df310883","modified":1630749699700},{"_id":"public/2021/03/14/图解-HTTP/index.html","hash":"349a36fd4f9af9c012aa4212d889645a3141f322","modified":1630749699700},{"_id":"public/2021/03/12/test/index.html","hash":"9494da0aa30a8b8afcddefc33e3c4960e93ee4bf","modified":1630749699700},{"_id":"public/2021/03/11/git命令指定默认分支/index.html","hash":"5a234eec392239ee0de91854a513b4a793749b3b","modified":1630749699700},{"_id":"public/2021/03/10/hello-world/index.html","hash":"70856b08de11d5f29fe3eefc16db1cc6b0f390ec","modified":1617804320941},{"_id":"public/archives/index.html","hash":"b2d53f1b7e49ced7866bc259ee54f21a93b9afe9","modified":1630749699700},{"_id":"public/archives/2021/index.html","hash":"ee5b47a7012c50a8d42f6e2b634de89b1841723a","modified":1630749699700},{"_id":"public/archives/2021/03/index.html","hash":"35f73222ccfa9ab893a8e49f9ffb4b6be14b8885","modified":1630749699700},{"_id":"public/index.html","hash":"623fd628ac13dbe09e321c4c1370889fdbca5f9b","modified":1630749699700},{"_id":"public/page/2/index.html","hash":"567382a1b25b42aca46016ae18bef21a8461e9c3","modified":1630749699700},{"_id":"public/CNAME","hash":"270b6a01a10249e61c9cec5367e3b5fdece6fece","modified":1630749073532},{"_id":"public/favicon.ico","hash":"8fca46bdaa4f0111d9822443d7d00f63ab7281b0","modified":1630749073532},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1630749532266},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1630749532266},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1630749532266},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1630749532266},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1630749532266},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1630749532266},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1630749532266},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1630749532266},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1630749532266},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1630749532266},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1630749532266},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1630749532266},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1630749532266},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1615972977671},{"_id":"public/live2dw/assets/koharu.model.json","hash":"ceccdefd776b7c9475a29cff0842796e4f58b7e9","modified":1615972977671},{"_id":"public/live2dw/assets/koharu.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1615972977671},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1615972977671},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1615972977671},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1615972977671},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1615972977671},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1615972977671},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1615972977671},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1615972977671},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1615972977671},{"_id":"public/live2dw/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1615972977671},{"_id":"public/live2dw/assets/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1615972977671},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1615972977671},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1615972977671},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1615972977671},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1615972977671},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1615972977671},{"_id":"public/css/myStyl.css","hash":"45b8dd4fa090b61747eabb3c53f73f7d958b2562","modified":1615972977671},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1615972977671},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1615972977671},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1615972977671},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1615972977671},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1615972977671},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1615972977671},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1615972977671},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1615972977671},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1630749532266},{"_id":"public/css/main.css","hash":"bad067c3efdba425096e3e2e042ec390bac26ecb","modified":1630749532266},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1615972977671},{"_id":"public/live2dw/assets/moc/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1615972977671},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1630749532266},{"_id":"public/live2dw/assets/moc/koharu.2048/texture_00.png","hash":"0879b61b745084781722636bba9f278f31ce5fc1","modified":1615972977671},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1615972977671},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1615972977671},{"_id":"source/_posts/vim-命令.md","hash":"080909ed7f2b6f6054b2e00ba22e0b324cfd1aa4","modified":1630748833422},{"_id":"public/2021/03/18/vim-命令/index.html","hash":"b15cb5e4bf64eea739ba17f9a3fe02a761b78354","modified":1630749699700},{"_id":"public/tags/命令操作/index.html","hash":"2bab0675c34e96d0f1845fd28828c306e2f24f6d","modified":1630749699700},{"_id":"source/_posts/JavaScript-变量和内存.md","hash":"ff215c69a1156d6dbe8763f2c92e8113c3f47f82","modified":1630748833416},{"_id":"public/2021/03/18/JavaScript-变量和内存/index.html","hash":"a4c2730576edb326736c29c430985d0156c283ba","modified":1630749699700},{"_id":"source/_posts/JavaScript-常用的引用类型.md","hash":"0ef8cb42d41885c9f87a566b070cde67734fc3ba","modified":1630748833417},{"_id":"public/2021/03/19/JavaScript-常用的引用类型/index.html","hash":"3378bfd9e851a108b0c51244117b66b5254cbe87","modified":1630749699700},{"_id":"source/_posts/leetcode-两数之和.md","hash":"0836791fe3674425fcee90c45ec588cfb692a66a","modified":1630748833420},{"_id":"source/_posts/leetcode-两数逐位相加.md","hash":"d4d2cb39bc5379222c8bae5b70a78dcb2eb10762","modified":1630748833420},{"_id":"source/_posts/leetcode-最大无重复子串长度.md","hash":"869b2ac04681c70fab2345f9a53718df54b0f1f0","modified":1630748833421},{"_id":"public/2021/03/29/leetcode-最大无重复子串长度/index.html","hash":"b350681bcf328e57cb7c6d5da539440e42637cb7","modified":1630749699700},{"_id":"public/2021/03/29/leetcode-两数逐位相加/index.html","hash":"4981cb8a53cdb9d47f865048c75774f05ed7f57a","modified":1630749699700},{"_id":"public/2021/03/29/leetcode-两数之和/index.html","hash":"aac27acdc5cf45db3b01d7a2c69cf867361bab92","modified":1630749699700},{"_id":"public/tags/leetcode/index.html","hash":"644c799e0bde120d88cf4d35b78626ef9f77298c","modified":1630749699700},{"_id":"source/_posts/leetcode-最大回文子串.md","hash":"9ee64a3c937880e4838c24143f21212f9d5bbf37","modified":1630748833420},{"_id":"public/2021/03/30/leetcode-最大回文子串/index.html","hash":"9570ff0ac483dfa5965005d987102c6e7c6bbe23","modified":1630749699700},{"_id":"source/_posts/leetcode-Z字形变换.md","hash":"e97398d9e2f311c543e833519268b40d59103a3c","modified":1630748833419},{"_id":"source/_posts/leetcode-盛最多水的容器.md","hash":"59d6701edfa324969c9563f6493b226723f6e2a7","modified":1630748833421},{"_id":"public/2021/04/02/leetcode-盛最多水的容器/index.html","hash":"c4b5214aba3cfd004be1a14a7d1c7b6ffe1ba9ca","modified":1630749699700},{"_id":"public/2021/04/02/leetcode-Z字形变换/index.html","hash":"05ede7d9d7a241eba7560d7abb1cad47345c6a8c","modified":1630749699700},{"_id":"public/archives/page/3/index.html","hash":"d785c145c632eb2fd68ae804a238f445eca2bd6a","modified":1630749699700},{"_id":"public/archives/2021/page/3/index.html","hash":"efdd4c566a04c41d0f76ff34aa57c237e234867c","modified":1630749699700},{"_id":"public/archives/2021/04/index.html","hash":"904060bcf3e3bfaeef9ff1861f826a3ce99f247b","modified":1630749699700},{"_id":"public/page/3/index.html","hash":"69958f4abd65dc864b1217c2da91810643c36ce8","modified":1630749699700},{"_id":"source/_posts/JavaScript-对象和继承.md","hash":"ba1abc2c5e862134743f6fdb46d0b5224c80b29c","modified":1630748833417},{"_id":"public/2021/04/07/JavaScript-对象和继承/index.html","hash":"cf8d391cfe94182e21dc98290c61250768402e39","modified":1630749699700},{"_id":"public/2021/09/04/hello-world/index.html","hash":"80df5dcde39b536454e70b635d12270a69e6241e","modified":1630749699700},{"_id":"public/archives/2021/09/index.html","hash":"67e5a76a53c7e2faf6a1e6f20144b112e4b000a9","modified":1630749699700},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630749519702},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630749519690},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630749519690},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630749519691},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630749519701},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1630749519620},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1630749519624},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1630749519623},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1630749519624},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1630749519625},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1630749519625},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1630749519626},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1630749519626},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1630749519621},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1630749519622},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1630749519622},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1630749519622},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1630749519628},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1630749519629},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1630749519631},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1630749519631},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1630749519632},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1630749519659},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1630749519660},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1630749519660},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1630749519763},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1630749519763},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1630749519763},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1630749519633},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1630749519633},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1630749519634},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1630749519635},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1630749519636},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1630749519637},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1630749519638},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1630749519638},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1630749519642},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1630749519639},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1630749519642},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1630749519652},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1630749519653},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1630749519653},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1630749519653},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1630749519654},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1630749519654},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1630749519661},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1630749519662},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1630749519663},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1630749519706},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1630749519707},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1630749519707},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1630749519708},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1630749519708},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1630749519637},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1630749519637},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1630749519640},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1630749519640},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1630749519640},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1630749519641},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1630749519641},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1630749519641},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1630749519643},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1630749519645},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1630749519645},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1630749519646},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1630749519647},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1630749519646},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1630749519647},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1630749519648},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1630749519648},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1630749519650},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1630749519650},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1630749519651},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1630749519651},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1630749519649},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1630749519648},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1630749519652},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1630749519656},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1630749519656},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1630749519657},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1630749519689},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1630749519690},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1630749519690},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1630749519691},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1630749519709},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1630749519709},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1630749519709},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1630749519709},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1630749519710},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1630749519710},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1630749519711},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1630749519711},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1630749519712},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1630749519712},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1630749519712},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1630749519718},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1630749519721},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1630749519722},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1630749519722},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1630749519721},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1630749519728},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1630749519729},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1630749519729},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1630749519729},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1630749519731},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1630749519731},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1630749519732},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1630749519732},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1630749519732},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1630749519744},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1630749519745},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1630749519745},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1630749519746},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1630749519746},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1630749519746},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1630749519747},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1630749519748},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1630749519748},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1630749519748},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1630749519749},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1630749519749},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1630749519749},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1630749519750},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1630749519750},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1630749519750},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1630749519751},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1630749519751},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1630749519751},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1630749519751},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1630749519752},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1630749519753},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1630749519752},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1630749519752},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1630749519753},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1630749519754},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1630749519754},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1630749519758},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1630749519759},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1630749519762},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1630749519655},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1630749519655},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1630749519665},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1630749519666},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1630749519671},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1630749519680},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1630749519687},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1630749519688},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1630749519698},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1630749519696},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1630749519699},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1630749519697},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1630749519692},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1630749519693},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1630749519693},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1630749519693},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1630749519711},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1630749519716},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1630749519717},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1630749519717},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1630749519722},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1630749519723},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1630749519723},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1630749519723},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1630749519724},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1630749519724},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1630749519727},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1630749519728},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1630749519727},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1630749519730},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1630749519730},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1630749519733},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1630749519733},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1630749519734},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1630749519757},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1630749519758},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1630749519667},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1630749519667},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1630749519667},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1630749519669},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1630749519668},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1630749519668},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1630749519669},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1630749519668},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1630749519669},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1630749519670},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1630749519672},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1630749519671},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1630749519674},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1630749519675},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1630749519675},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1630749519677},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1630749519677},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1630749519677},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1630749519677},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1630749519678},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1630749519678},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1630749519678},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1630749519679},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1630749519679},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1630749519679},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1630749519681},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1630749519680},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1630749519681},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1630749519681},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1630749519682},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1630749519682},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1630749519682},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1630749519683},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1630749519683},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1630749519684},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1630749519683},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1630749519684},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1630749519684},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1630749519685},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1630749519685},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1630749519685},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1630749519686},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1630749519686},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1630749519698},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1630749519694},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1630749519695},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1630749519714},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1630749519714},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1630749519715},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1630749519715},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1630749519715},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1630749519725},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1630749519725},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1630749519725},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1630749519726},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1630749519726},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1630749519726},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1630749519744},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1630749519717},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1630749519742},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1630749519743},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1630749519735},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1630749519742},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1630749519760},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1630749519737},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1630749519720},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1630749519757},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1630749519740},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1630749532266},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1630749532266},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1630749532266},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1630749532266},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1630749532266},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1630749532266},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1630749532266},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1630749532266},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1630749532266},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1630749532266},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1630749532266},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1630749532266},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1630749532266},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1630749532266},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1630749532266},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1630749532266},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1630749532266},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1630749532266},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1630749532266},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1630749532266},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1630749532266},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1630749532266},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1630749532266},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1630749532266},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1630749532266},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1630749532266},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1630749532266},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1630749532266},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1630749532266},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1630749532266},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1630749532266},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1630749532266},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1630749532266},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1630749532266},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1630749532266},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1630749532266},{"_id":"public/lib/fastclick/README.html","hash":"c88ed76304392b9e77b266fcbbc05f443c5df133","modified":1630749532266},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1630749532266},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"bc6cf8951a99074bdc6ec9172f03fb7c0e412729","modified":1630749532266},{"_id":"public/lib/jquery_lazyload/README.html","hash":"96a5c2cc00de5b338ae972c1e8de879d2d919608","modified":1630749532266},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1630749532266},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1630749532266},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1630749532266},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1630749532266},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1630749532266},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1630749532266},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1630749532266},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1630749532266},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1630749532266},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1630749532266},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1630749532266},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1630749532266},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1630749532266},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1630749532266},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1630749532266},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1630749532266},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1630749532266},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1630749532266},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1630749532266},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1630749532266},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1630749532266},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1630749532266},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1630749532266},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1630749532266},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1630749532266},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1630749532266},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1630749532266},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1630749532266},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1630749532266},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1630749532266},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1630749532266},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1630749532266},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1630749532266},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1630749532266},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1630749532266},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1630749532266},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1630749532266},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1630749532266},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1630749532266},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1630749532266},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1630749532266}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2021-03-15T13:48:11.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-03-15 21:48:11\ntype: \"categories\"\n---\n","updated":"2021-09-04T09:47:13.423Z","path":"categories/index.html","_id":"ckmd8l6al0000zepv34xdbz9z","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-03-12T06:22:30.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-03-12 14:22:30\ntype: \"tags\"\n---\n","updated":"2021-09-04T09:47:13.424Z","path":"tags/index.html","_id":"ckmd8l6ap0002zepvfeyydcwc","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JavaScript-基本概念","date":"2021-03-17T04:58:09.000Z","_content":"\n### 什么是标识符\n所谓标识符，就是指变量、函数、属性的名字，或者函数的参数。标识符可以是按照下列格式规则组合起来的一或多个字符：\n- 第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；\n- 其他字符可以是字母、下划线、美元符号或数字。\n\n### 怎么开启严格模式\n要在整个脚本中启用严格模式，可以在顶部添加如下代码：\n```js\n\"use strict\";\n```\n这行代码看起来像是字符串，而且也没有赋值给任何变量，但其实它是一个编译指示（pragma），用于告诉支持的JavaScript 引擎切换到严格模式。\n在函数内部的上方包含这条编译指示，也可以指定函数在严格模式下执行：\n```js\nfunction doSomething(){\n  \"use strict\";\n  //函数体\n}\n```\n\n<!-- more -->\n\n### typeof 操作符的返回值\n- \"undefined\"——如果这个值未定义；\n- \"boolean\"——如果这个值是布尔值；\n- \"string\"——如果这个值是字符串；\n- \"number\"——如果这个值是数值；\n- \"object\"——如果这个值是对象或null；\n- \"function\"——如果这个值是函数。\n\n### null 和 undefined 的区别\n对未初始化和未声明的变量执行typeof 操作符都会返回undefined。\n从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用typeof 操作符检测null 值时会返回\"object\"的原因。\n只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存null 值。这样做不仅可以体现null 作为空对象指针的惯例，而且也有助于进一步区分null 和undefined。\n\n### NaN 的特点是什么\nNaN 本身有两个非同寻常的特点。首先，任何涉及NaN 的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN 与任何值都不相等，包括NaN 本身。所以需要 isNaN() 来判断。\n\n### Number()函数的转换规则\n如果是Boolean 值，true 和false 将分别被转换为1 和0。\n- 如果是数字值，只是简单的传入和返回。\n- `如果是null 值，返回0。`\n- `如果是undefined，返回NaN。`\n- 如果是字符串，遵循下列规则：\n- 如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即\"1\"会变成1，\"123\"会变成123，而\"011\"会变成11（注意：前导的零被忽略了）；\n- 如果字符串中包含有效的浮点格式，如\"1.1\"，则将其转换为对应的浮点数值（同样，也会忽略前导零）；\n- 如果字符串中包含有效的十六进制格式，例如\"0xf\"，则将其转换为相同大小的十进制整数值；\n- 如果字符串是空的（不包含任何字符），则将其转换为0；\n- `如果字符串中包含除上述格式之外的字符，则将其转换为NaN。`\n- **一元加操作符的操作与Number()函数相同。**\n\n### parseInt()函数的转换规则\n它会忽略字符串前面的空格，直至找到第一个非空格字符。\n可以为这个函数提供第二个参数：转换时使用的基数（即多少进制）\n```js\nvar num = parseInt(\"0xAF\", 16); //175\n```\n\n### 字符串拼接时发生了什么\n```js\nvar lang = \"Java\";\nlang = lang + \"Script\";\n```\nECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量，\n上方示例实现的过程如下：首先创建一个能容纳10 个字符的新字符串，然后在这个字符串中填充\"Java\"和\"Script\"，最后一步是销毁原来的字符串\"Java\"和字符串\"Script\"，因为这两个字符串已经没用了。\n\n### toString()方法特点\n数值、布尔值、对象和字符串值（没错，每个字符串也都有一个toString()方法，该方法返回字符串的一个副本）都有toString()方法。但null 和undefined 值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出数值的基数。\n\n### String()函数的转换规则\n- 如果值有toString()方法，则调用该方法（没有参数）并返回相应的结果；\n- 如果值是null，则返回\"null\"；\n- 如果值是undefined，则返回\"undefined\"。\n\n### 创建Object 的实例\n```js\nvar o = new Object();\n-----\n这个语法与Java 中创建对象的语法相似；但在ECMAScript 中，如果不给构造函数传递参数，则可以省略后面的那一对圆括号\n-----\nvar o = new Object; // 有效，但不推荐省略圆括号\n```\n\n### Object 的每个实例都具有的属性和方法\n- constructor：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是Object()。\n- hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。\n- isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型。\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in 语句来枚举。与hasOwnProperty()方法一样，作为参数的属性名必须以字符串形式指定。\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应。\n- toString()：返回对象的字符串表示。\n- valueOf()：返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。\n\n### 一元加和减操作符的特点\n在对非数值应用一元加操作符时，该操作符会像Number()转型函数一样对这个值执行转换。\n在将一元减操作符应用于数值时，该值会变成负数。而当应用于非数值时，一元减操作符遵循与一元加操作符相同的规则，最后再将得到的数值转换为负数。\n\n### 加法操作符的特点\n如果两个操作符都是数值，执行常规的加法计算\n如果有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个字符串拼接\n如果有一个操作数是对象、数值或布尔值，则调用它们的toString()方法取得相应的字符串值，然后再应用前面关于字符串的规则\n对于undefined 和null，则分别调用String()函数并取得字符串\"undefined\"和\"null\"。\n\n### 减法操作符的特点\n如果有一个操作数是字符串、布尔值、null 或undefined，则先在后台调用Number()函数将其转换为数值，然后再根据前面的规则执行减法计算。如果转换的结果是NaN，则减法的结果就是NaN。\n如果有一个操作数是对象，则调用对象的valueOf()方法以取得表示该对象的数值。如果得到的值是NaN，则减法的结果就是NaN。\n如果对象没有valueOf()方法，则调用其toString()方法并将得到的字符串转换为数值。\n```js\ntypeof(+'') //\"number\"\ntypeof(''+'') //\"string\"\ntypeof(''-'') //\"number\"\n```\n\n### 相等操作符转换规则\n如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false 转换为0，而 true 转换为1；\n如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；\n`null 和undefined 是相等的。`\n`要比较相等性之前，不能将null 和undefined 转换成其他任何值。`\n如果有一个操作数是NaN，则相等操作符返回false，而不相等操作符返回true。即使两个操作数都是NaN，相等操作符也返回false；因为按照规则，NaN 不等于NaN。\n如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回true；否则，返回false。\n\n### 为什么很少使用 with 语句\n严格模式下使用 with 语句会被视为语法错误。\n大量使用 with 语句会导致性能下降，同时也会给调试代码造成困难。\n\n### 看到 switch 的有意思的用法\n```js\nvar num = 25;\nswitch (true) {\n  case num < 0:\n    alert(\"Less than 0.\");\n    break;\n  case num >= 0 && num <= 10:\n    alert(\"Between 0 and 10.\");\n    break;\n  case num > 10 && num <= 20:\n    alert(\"Between 10 and 20.\");\n    break;\n  default:\n    alert(\"More than 20.\");\n}\n```\n\n### 理解下 arguments 对象\narguments 对象是类数组结构。\n关于arguments 的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步，但他们内存空间是相对独立的。\n```js\nfunction doAdd(num1, num2) {\n  arguments[1] = 10;\n  alert(arguments[0] + num2);\n}\ndoAdd(1,2)  // 11\ndoAdd(1)    // NaN\n```\n每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值修改为10。因为arguments对象中的值会自动反映到对应的命名参数，所以修改arguments[1]，也就修改了num2，结果它们的值都会变成10。\n不过，这并不是说读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但它们的值会同步。\n另外还要记住，如果只传入了一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments 对象的长度是由传入的参数个数决定的，不是由定义函数时的命名参数的个数决定的。\n\n### \n","source":"_posts/JavaScript-基本概念.md","raw":"---\ntitle: JavaScript-基本概念\ndate: 2021-03-17 12:58:09\ntags: JavaScript\n---\n\n### 什么是标识符\n所谓标识符，就是指变量、函数、属性的名字，或者函数的参数。标识符可以是按照下列格式规则组合起来的一或多个字符：\n- 第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；\n- 其他字符可以是字母、下划线、美元符号或数字。\n\n### 怎么开启严格模式\n要在整个脚本中启用严格模式，可以在顶部添加如下代码：\n```js\n\"use strict\";\n```\n这行代码看起来像是字符串，而且也没有赋值给任何变量，但其实它是一个编译指示（pragma），用于告诉支持的JavaScript 引擎切换到严格模式。\n在函数内部的上方包含这条编译指示，也可以指定函数在严格模式下执行：\n```js\nfunction doSomething(){\n  \"use strict\";\n  //函数体\n}\n```\n\n<!-- more -->\n\n### typeof 操作符的返回值\n- \"undefined\"——如果这个值未定义；\n- \"boolean\"——如果这个值是布尔值；\n- \"string\"——如果这个值是字符串；\n- \"number\"——如果这个值是数值；\n- \"object\"——如果这个值是对象或null；\n- \"function\"——如果这个值是函数。\n\n### null 和 undefined 的区别\n对未初始化和未声明的变量执行typeof 操作符都会返回undefined。\n从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用typeof 操作符检测null 值时会返回\"object\"的原因。\n只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存null 值。这样做不仅可以体现null 作为空对象指针的惯例，而且也有助于进一步区分null 和undefined。\n\n### NaN 的特点是什么\nNaN 本身有两个非同寻常的特点。首先，任何涉及NaN 的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN 与任何值都不相等，包括NaN 本身。所以需要 isNaN() 来判断。\n\n### Number()函数的转换规则\n如果是Boolean 值，true 和false 将分别被转换为1 和0。\n- 如果是数字值，只是简单的传入和返回。\n- `如果是null 值，返回0。`\n- `如果是undefined，返回NaN。`\n- 如果是字符串，遵循下列规则：\n- 如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即\"1\"会变成1，\"123\"会变成123，而\"011\"会变成11（注意：前导的零被忽略了）；\n- 如果字符串中包含有效的浮点格式，如\"1.1\"，则将其转换为对应的浮点数值（同样，也会忽略前导零）；\n- 如果字符串中包含有效的十六进制格式，例如\"0xf\"，则将其转换为相同大小的十进制整数值；\n- 如果字符串是空的（不包含任何字符），则将其转换为0；\n- `如果字符串中包含除上述格式之外的字符，则将其转换为NaN。`\n- **一元加操作符的操作与Number()函数相同。**\n\n### parseInt()函数的转换规则\n它会忽略字符串前面的空格，直至找到第一个非空格字符。\n可以为这个函数提供第二个参数：转换时使用的基数（即多少进制）\n```js\nvar num = parseInt(\"0xAF\", 16); //175\n```\n\n### 字符串拼接时发生了什么\n```js\nvar lang = \"Java\";\nlang = lang + \"Script\";\n```\nECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量，\n上方示例实现的过程如下：首先创建一个能容纳10 个字符的新字符串，然后在这个字符串中填充\"Java\"和\"Script\"，最后一步是销毁原来的字符串\"Java\"和字符串\"Script\"，因为这两个字符串已经没用了。\n\n### toString()方法特点\n数值、布尔值、对象和字符串值（没错，每个字符串也都有一个toString()方法，该方法返回字符串的一个副本）都有toString()方法。但null 和undefined 值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出数值的基数。\n\n### String()函数的转换规则\n- 如果值有toString()方法，则调用该方法（没有参数）并返回相应的结果；\n- 如果值是null，则返回\"null\"；\n- 如果值是undefined，则返回\"undefined\"。\n\n### 创建Object 的实例\n```js\nvar o = new Object();\n-----\n这个语法与Java 中创建对象的语法相似；但在ECMAScript 中，如果不给构造函数传递参数，则可以省略后面的那一对圆括号\n-----\nvar o = new Object; // 有效，但不推荐省略圆括号\n```\n\n### Object 的每个实例都具有的属性和方法\n- constructor：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是Object()。\n- hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。\n- isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型。\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in 语句来枚举。与hasOwnProperty()方法一样，作为参数的属性名必须以字符串形式指定。\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应。\n- toString()：返回对象的字符串表示。\n- valueOf()：返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。\n\n### 一元加和减操作符的特点\n在对非数值应用一元加操作符时，该操作符会像Number()转型函数一样对这个值执行转换。\n在将一元减操作符应用于数值时，该值会变成负数。而当应用于非数值时，一元减操作符遵循与一元加操作符相同的规则，最后再将得到的数值转换为负数。\n\n### 加法操作符的特点\n如果两个操作符都是数值，执行常规的加法计算\n如果有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个字符串拼接\n如果有一个操作数是对象、数值或布尔值，则调用它们的toString()方法取得相应的字符串值，然后再应用前面关于字符串的规则\n对于undefined 和null，则分别调用String()函数并取得字符串\"undefined\"和\"null\"。\n\n### 减法操作符的特点\n如果有一个操作数是字符串、布尔值、null 或undefined，则先在后台调用Number()函数将其转换为数值，然后再根据前面的规则执行减法计算。如果转换的结果是NaN，则减法的结果就是NaN。\n如果有一个操作数是对象，则调用对象的valueOf()方法以取得表示该对象的数值。如果得到的值是NaN，则减法的结果就是NaN。\n如果对象没有valueOf()方法，则调用其toString()方法并将得到的字符串转换为数值。\n```js\ntypeof(+'') //\"number\"\ntypeof(''+'') //\"string\"\ntypeof(''-'') //\"number\"\n```\n\n### 相等操作符转换规则\n如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false 转换为0，而 true 转换为1；\n如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；\n`null 和undefined 是相等的。`\n`要比较相等性之前，不能将null 和undefined 转换成其他任何值。`\n如果有一个操作数是NaN，则相等操作符返回false，而不相等操作符返回true。即使两个操作数都是NaN，相等操作符也返回false；因为按照规则，NaN 不等于NaN。\n如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回true；否则，返回false。\n\n### 为什么很少使用 with 语句\n严格模式下使用 with 语句会被视为语法错误。\n大量使用 with 语句会导致性能下降，同时也会给调试代码造成困难。\n\n### 看到 switch 的有意思的用法\n```js\nvar num = 25;\nswitch (true) {\n  case num < 0:\n    alert(\"Less than 0.\");\n    break;\n  case num >= 0 && num <= 10:\n    alert(\"Between 0 and 10.\");\n    break;\n  case num > 10 && num <= 20:\n    alert(\"Between 10 and 20.\");\n    break;\n  default:\n    alert(\"More than 20.\");\n}\n```\n\n### 理解下 arguments 对象\narguments 对象是类数组结构。\n关于arguments 的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步，但他们内存空间是相对独立的。\n```js\nfunction doAdd(num1, num2) {\n  arguments[1] = 10;\n  alert(arguments[0] + num2);\n}\ndoAdd(1,2)  // 11\ndoAdd(1)    // NaN\n```\n每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值修改为10。因为arguments对象中的值会自动反映到对应的命名参数，所以修改arguments[1]，也就修改了num2，结果它们的值都会变成10。\n不过，这并不是说读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但它们的值会同步。\n另外还要记住，如果只传入了一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments 对象的长度是由传入的参数个数决定的，不是由定义函数时的命名参数的个数决定的。\n\n### \n","slug":"JavaScript-基本概念","published":1,"updated":"2021-09-04T09:47:13.416Z","_id":"ckmd8l6an0001zepv4pyn0cem","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是标识符\"><a href=\"#什么是标识符\" class=\"headerlink\" title=\"什么是标识符\"></a>什么是标识符</h3><p>所谓标识符，就是指变量、函数、属性的名字，或者函数的参数。标识符可以是按照下列格式规则组合起来的一或多个字符：</p>\n<ul>\n<li>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；</li>\n<li>其他字符可以是字母、下划线、美元符号或数字。</li>\n</ul>\n<h3 id=\"怎么开启严格模式\"><a href=\"#怎么开启严格模式\" class=\"headerlink\" title=\"怎么开启严格模式\"></a>怎么开启严格模式</h3><p>要在整个脚本中启用严格模式，可以在顶部添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>这行代码看起来像是字符串，而且也没有赋值给任何变量，但其实它是一个编译指示（pragma），用于告诉支持的JavaScript 引擎切换到严格模式。<br>在函数内部的上方包含这条编译指示，也可以指定函数在严格模式下执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  &quot;use strict&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">//函数体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"typeof-操作符的返回值\"><a href=\"#typeof-操作符的返回值\" class=\"headerlink\" title=\"typeof 操作符的返回值\"></a>typeof 操作符的返回值</h3><ul>\n<li>“undefined”——如果这个值未定义；</li>\n<li>“boolean”——如果这个值是布尔值；</li>\n<li>“string”——如果这个值是字符串；</li>\n<li>“number”——如果这个值是数值；</li>\n<li>“object”——如果这个值是对象或null；</li>\n<li>“function”——如果这个值是函数。</li>\n</ul>\n<h3 id=\"null-和-undefined-的区别\"><a href=\"#null-和-undefined-的区别\" class=\"headerlink\" title=\"null 和 undefined 的区别\"></a>null 和 undefined 的区别</h3><p>对未初始化和未声明的变量执行typeof 操作符都会返回undefined。<br>从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用typeof 操作符检测null 值时会返回”object”的原因。<br>只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存null 值。这样做不仅可以体现null 作为空对象指针的惯例，而且也有助于进一步区分null 和undefined。</p>\n<h3 id=\"NaN-的特点是什么\"><a href=\"#NaN-的特点是什么\" class=\"headerlink\" title=\"NaN 的特点是什么\"></a>NaN 的特点是什么</h3><p>NaN 本身有两个非同寻常的特点。首先，任何涉及NaN 的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN 与任何值都不相等，包括NaN 本身。所以需要 isNaN() 来判断。</p>\n<h3 id=\"Number-函数的转换规则\"><a href=\"#Number-函数的转换规则\" class=\"headerlink\" title=\"Number()函数的转换规则\"></a>Number()函数的转换规则</h3><p>如果是Boolean 值，true 和false 将分别被转换为1 和0。</p>\n<ul>\n<li>如果是数字值，只是简单的传入和返回。</li>\n<li><code>如果是null 值，返回0。</code></li>\n<li><code>如果是undefined，返回NaN。</code></li>\n<li>如果是字符串，遵循下列规则：</li>\n<li>如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即”1”会变成1，”123”会变成123，而”011”会变成11（注意：前导的零被忽略了）；</li>\n<li>如果字符串中包含有效的浮点格式，如”1.1”，则将其转换为对应的浮点数值（同样，也会忽略前导零）；</li>\n<li>如果字符串中包含有效的十六进制格式，例如”0xf”，则将其转换为相同大小的十进制整数值；</li>\n<li>如果字符串是空的（不包含任何字符），则将其转换为0；</li>\n<li><code>如果字符串中包含除上述格式之外的字符，则将其转换为NaN。</code></li>\n<li><strong>一元加操作符的操作与Number()函数相同。</strong></li>\n</ul>\n<h3 id=\"parseInt-函数的转换规则\"><a href=\"#parseInt-函数的转换规则\" class=\"headerlink\" title=\"parseInt()函数的转换规则\"></a>parseInt()函数的转换规则</h3><p>它会忽略字符串前面的空格，直至找到第一个非空格字符。<br>可以为这个函数提供第二个参数：转换时使用的基数（即多少进制）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;0xAF&quot;</span>, <span class=\"number\">16</span>); <span class=\"comment\">//175</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串拼接时发生了什么\"><a href=\"#字符串拼接时发生了什么\" class=\"headerlink\" title=\"字符串拼接时发生了什么\"></a>字符串拼接时发生了什么</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lang = <span class=\"string\">&quot;Java&quot;</span>;</span><br><span class=\"line\">lang = lang + <span class=\"string\">&quot;Script&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量，<br>上方示例实现的过程如下：首先创建一个能容纳10 个字符的新字符串，然后在这个字符串中填充”Java”和”Script”，最后一步是销毁原来的字符串”Java”和字符串”Script”，因为这两个字符串已经没用了。</p>\n<h3 id=\"toString-方法特点\"><a href=\"#toString-方法特点\" class=\"headerlink\" title=\"toString()方法特点\"></a>toString()方法特点</h3><p>数值、布尔值、对象和字符串值（没错，每个字符串也都有一个toString()方法，该方法返回字符串的一个副本）都有toString()方法。但null 和undefined 值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出数值的基数。</p>\n<h3 id=\"String-函数的转换规则\"><a href=\"#String-函数的转换规则\" class=\"headerlink\" title=\"String()函数的转换规则\"></a>String()函数的转换规则</h3><ul>\n<li>如果值有toString()方法，则调用该方法（没有参数）并返回相应的结果；</li>\n<li>如果值是null，则返回”null”；</li>\n<li>如果值是undefined，则返回”undefined”。</li>\n</ul>\n<h3 id=\"创建Object-的实例\"><a href=\"#创建Object-的实例\" class=\"headerlink\" title=\"创建Object 的实例\"></a>创建Object 的实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">-----</span><br><span class=\"line\">这个语法与Java 中创建对象的语法相似；但在ECMAScript 中，如果不给构造函数传递参数，则可以省略后面的那一对圆括号</span><br><span class=\"line\">-----</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// 有效，但不推荐省略圆括号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Object-的每个实例都具有的属性和方法\"><a href=\"#Object-的每个实例都具有的属性和方法\" class=\"headerlink\" title=\"Object 的每个实例都具有的属性和方法\"></a>Object 的每个实例都具有的属性和方法</h3><ul>\n<li>constructor：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是Object()。</li>\n<li>hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。</li>\n<li>isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型。</li>\n<li>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in 语句来枚举。与hasOwnProperty()方法一样，作为参数的属性名必须以字符串形式指定。</li>\n<li>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应。</li>\n<li>toString()：返回对象的字符串表示。</li>\n<li>valueOf()：返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。</li>\n</ul>\n<h3 id=\"一元加和减操作符的特点\"><a href=\"#一元加和减操作符的特点\" class=\"headerlink\" title=\"一元加和减操作符的特点\"></a>一元加和减操作符的特点</h3><p>在对非数值应用一元加操作符时，该操作符会像Number()转型函数一样对这个值执行转换。<br>在将一元减操作符应用于数值时，该值会变成负数。而当应用于非数值时，一元减操作符遵循与一元加操作符相同的规则，最后再将得到的数值转换为负数。</p>\n<h3 id=\"加法操作符的特点\"><a href=\"#加法操作符的特点\" class=\"headerlink\" title=\"加法操作符的特点\"></a>加法操作符的特点</h3><p>如果两个操作符都是数值，执行常规的加法计算<br>如果有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个字符串拼接<br>如果有一个操作数是对象、数值或布尔值，则调用它们的toString()方法取得相应的字符串值，然后再应用前面关于字符串的规则<br>对于undefined 和null，则分别调用String()函数并取得字符串”undefined”和”null”。</p>\n<h3 id=\"减法操作符的特点\"><a href=\"#减法操作符的特点\" class=\"headerlink\" title=\"减法操作符的特点\"></a>减法操作符的特点</h3><p>如果有一个操作数是字符串、布尔值、null 或undefined，则先在后台调用Number()函数将其转换为数值，然后再根据前面的规则执行减法计算。如果转换的结果是NaN，则减法的结果就是NaN。<br>如果有一个操作数是对象，则调用对象的valueOf()方法以取得表示该对象的数值。如果得到的值是NaN，则减法的结果就是NaN。<br>如果对象没有valueOf()方法，则调用其toString()方法并将得到的字符串转换为数值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span>(+<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">//&quot;number&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"string\">&#x27;&#x27;</span>+<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">//&quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"string\">&#x27;&#x27;</span>-<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">//&quot;number&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相等操作符转换规则\"><a href=\"#相等操作符转换规则\" class=\"headerlink\" title=\"相等操作符转换规则\"></a>相等操作符转换规则</h3><p>如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false 转换为0，而 true 转换为1；<br>如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；<br><code>null 和undefined 是相等的。</code><br><code>要比较相等性之前，不能将null 和undefined 转换成其他任何值。</code><br>如果有一个操作数是NaN，则相等操作符返回false，而不相等操作符返回true。即使两个操作数都是NaN，相等操作符也返回false；因为按照规则，NaN 不等于NaN。<br>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回true；否则，返回false。</p>\n<h3 id=\"为什么很少使用-with-语句\"><a href=\"#为什么很少使用-with-语句\" class=\"headerlink\" title=\"为什么很少使用 with 语句\"></a>为什么很少使用 with 语句</h3><p>严格模式下使用 with 语句会被视为语法错误。<br>大量使用 with 语句会导致性能下降，同时也会给调试代码造成困难。</p>\n<h3 id=\"看到-switch-的有意思的用法\"><a href=\"#看到-switch-的有意思的用法\" class=\"headerlink\" title=\"看到 switch 的有意思的用法\"></a>看到 switch 的有意思的用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">25</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> num &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;Less than 0.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> num &gt;= <span class=\"number\">0</span> &amp;&amp; num &lt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;Between 0 and 10.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> num &gt; <span class=\"number\">10</span> &amp;&amp; num &lt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;Between 10 and 20.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;More than 20.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"理解下-arguments-对象\"><a href=\"#理解下-arguments-对象\" class=\"headerlink\" title=\"理解下 arguments 对象\"></a>理解下 arguments 对象</h3><p>arguments 对象是类数组结构。<br>关于arguments 的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步，但他们内存空间是相对独立的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdd</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">  alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doAdd(<span class=\"number\">1</span>,<span class=\"number\">2</span>)  <span class=\"comment\">// 11</span></span><br><span class=\"line\">doAdd(<span class=\"number\">1</span>)    <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值修改为10。因为arguments对象中的值会自动反映到对应的命名参数，所以修改arguments[1]，也就修改了num2，结果它们的值都会变成10。<br>不过，这并不是说读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但它们的值会同步。<br>另外还要记住，如果只传入了一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments 对象的长度是由传入的参数个数决定的，不是由定义函数时的命名参数的个数决定的。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","site":{"data":{}},"excerpt":"<h3 id=\"什么是标识符\"><a href=\"#什么是标识符\" class=\"headerlink\" title=\"什么是标识符\"></a>什么是标识符</h3><p>所谓标识符，就是指变量、函数、属性的名字，或者函数的参数。标识符可以是按照下列格式规则组合起来的一或多个字符：</p>\n<ul>\n<li>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；</li>\n<li>其他字符可以是字母、下划线、美元符号或数字。</li>\n</ul>\n<h3 id=\"怎么开启严格模式\"><a href=\"#怎么开启严格模式\" class=\"headerlink\" title=\"怎么开启严格模式\"></a>怎么开启严格模式</h3><p>要在整个脚本中启用严格模式，可以在顶部添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>这行代码看起来像是字符串，而且也没有赋值给任何变量，但其实它是一个编译指示（pragma），用于告诉支持的JavaScript 引擎切换到严格模式。<br>在函数内部的上方包含这条编译指示，也可以指定函数在严格模式下执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  &quot;use strict&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">//函数体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"typeof-操作符的返回值\"><a href=\"#typeof-操作符的返回值\" class=\"headerlink\" title=\"typeof 操作符的返回值\"></a>typeof 操作符的返回值</h3><ul>\n<li>“undefined”——如果这个值未定义；</li>\n<li>“boolean”——如果这个值是布尔值；</li>\n<li>“string”——如果这个值是字符串；</li>\n<li>“number”——如果这个值是数值；</li>\n<li>“object”——如果这个值是对象或null；</li>\n<li>“function”——如果这个值是函数。</li>\n</ul>\n<h3 id=\"null-和-undefined-的区别\"><a href=\"#null-和-undefined-的区别\" class=\"headerlink\" title=\"null 和 undefined 的区别\"></a>null 和 undefined 的区别</h3><p>对未初始化和未声明的变量执行typeof 操作符都会返回undefined。<br>从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用typeof 操作符检测null 值时会返回”object”的原因。<br>只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存null 值。这样做不仅可以体现null 作为空对象指针的惯例，而且也有助于进一步区分null 和undefined。</p>\n<h3 id=\"NaN-的特点是什么\"><a href=\"#NaN-的特点是什么\" class=\"headerlink\" title=\"NaN 的特点是什么\"></a>NaN 的特点是什么</h3><p>NaN 本身有两个非同寻常的特点。首先，任何涉及NaN 的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN 与任何值都不相等，包括NaN 本身。所以需要 isNaN() 来判断。</p>\n<h3 id=\"Number-函数的转换规则\"><a href=\"#Number-函数的转换规则\" class=\"headerlink\" title=\"Number()函数的转换规则\"></a>Number()函数的转换规则</h3><p>如果是Boolean 值，true 和false 将分别被转换为1 和0。</p>\n<ul>\n<li>如果是数字值，只是简单的传入和返回。</li>\n<li><code>如果是null 值，返回0。</code></li>\n<li><code>如果是undefined，返回NaN。</code></li>\n<li>如果是字符串，遵循下列规则：</li>\n<li>如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即”1”会变成1，”123”会变成123，而”011”会变成11（注意：前导的零被忽略了）；</li>\n<li>如果字符串中包含有效的浮点格式，如”1.1”，则将其转换为对应的浮点数值（同样，也会忽略前导零）；</li>\n<li>如果字符串中包含有效的十六进制格式，例如”0xf”，则将其转换为相同大小的十进制整数值；</li>\n<li>如果字符串是空的（不包含任何字符），则将其转换为0；</li>\n<li><code>如果字符串中包含除上述格式之外的字符，则将其转换为NaN。</code></li>\n<li><strong>一元加操作符的操作与Number()函数相同。</strong></li>\n</ul>\n<h3 id=\"parseInt-函数的转换规则\"><a href=\"#parseInt-函数的转换规则\" class=\"headerlink\" title=\"parseInt()函数的转换规则\"></a>parseInt()函数的转换规则</h3><p>它会忽略字符串前面的空格，直至找到第一个非空格字符。<br>可以为这个函数提供第二个参数：转换时使用的基数（即多少进制）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;0xAF&quot;</span>, <span class=\"number\">16</span>); <span class=\"comment\">//175</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串拼接时发生了什么\"><a href=\"#字符串拼接时发生了什么\" class=\"headerlink\" title=\"字符串拼接时发生了什么\"></a>字符串拼接时发生了什么</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lang = <span class=\"string\">&quot;Java&quot;</span>;</span><br><span class=\"line\">lang = lang + <span class=\"string\">&quot;Script&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量，<br>上方示例实现的过程如下：首先创建一个能容纳10 个字符的新字符串，然后在这个字符串中填充”Java”和”Script”，最后一步是销毁原来的字符串”Java”和字符串”Script”，因为这两个字符串已经没用了。</p>\n<h3 id=\"toString-方法特点\"><a href=\"#toString-方法特点\" class=\"headerlink\" title=\"toString()方法特点\"></a>toString()方法特点</h3><p>数值、布尔值、对象和字符串值（没错，每个字符串也都有一个toString()方法，该方法返回字符串的一个副本）都有toString()方法。但null 和undefined 值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出数值的基数。</p>\n<h3 id=\"String-函数的转换规则\"><a href=\"#String-函数的转换规则\" class=\"headerlink\" title=\"String()函数的转换规则\"></a>String()函数的转换规则</h3><ul>\n<li>如果值有toString()方法，则调用该方法（没有参数）并返回相应的结果；</li>\n<li>如果值是null，则返回”null”；</li>\n<li>如果值是undefined，则返回”undefined”。</li>\n</ul>\n<h3 id=\"创建Object-的实例\"><a href=\"#创建Object-的实例\" class=\"headerlink\" title=\"创建Object 的实例\"></a>创建Object 的实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">-----</span><br><span class=\"line\">这个语法与Java 中创建对象的语法相似；但在ECMAScript 中，如果不给构造函数传递参数，则可以省略后面的那一对圆括号</span><br><span class=\"line\">-----</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">// 有效，但不推荐省略圆括号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Object-的每个实例都具有的属性和方法\"><a href=\"#Object-的每个实例都具有的属性和方法\" class=\"headerlink\" title=\"Object 的每个实例都具有的属性和方法\"></a>Object 的每个实例都具有的属性和方法</h3><ul>\n<li>constructor：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是Object()。</li>\n<li>hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。</li>\n<li>isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型。</li>\n<li>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in 语句来枚举。与hasOwnProperty()方法一样，作为参数的属性名必须以字符串形式指定。</li>\n<li>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应。</li>\n<li>toString()：返回对象的字符串表示。</li>\n<li>valueOf()：返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。</li>\n</ul>\n<h3 id=\"一元加和减操作符的特点\"><a href=\"#一元加和减操作符的特点\" class=\"headerlink\" title=\"一元加和减操作符的特点\"></a>一元加和减操作符的特点</h3><p>在对非数值应用一元加操作符时，该操作符会像Number()转型函数一样对这个值执行转换。<br>在将一元减操作符应用于数值时，该值会变成负数。而当应用于非数值时，一元减操作符遵循与一元加操作符相同的规则，最后再将得到的数值转换为负数。</p>\n<h3 id=\"加法操作符的特点\"><a href=\"#加法操作符的特点\" class=\"headerlink\" title=\"加法操作符的特点\"></a>加法操作符的特点</h3><p>如果两个操作符都是数值，执行常规的加法计算<br>如果有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个字符串拼接<br>如果有一个操作数是对象、数值或布尔值，则调用它们的toString()方法取得相应的字符串值，然后再应用前面关于字符串的规则<br>对于undefined 和null，则分别调用String()函数并取得字符串”undefined”和”null”。</p>\n<h3 id=\"减法操作符的特点\"><a href=\"#减法操作符的特点\" class=\"headerlink\" title=\"减法操作符的特点\"></a>减法操作符的特点</h3><p>如果有一个操作数是字符串、布尔值、null 或undefined，则先在后台调用Number()函数将其转换为数值，然后再根据前面的规则执行减法计算。如果转换的结果是NaN，则减法的结果就是NaN。<br>如果有一个操作数是对象，则调用对象的valueOf()方法以取得表示该对象的数值。如果得到的值是NaN，则减法的结果就是NaN。<br>如果对象没有valueOf()方法，则调用其toString()方法并将得到的字符串转换为数值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span>(+<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">//&quot;number&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"string\">&#x27;&#x27;</span>+<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">//&quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"string\">&#x27;&#x27;</span>-<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">//&quot;number&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相等操作符转换规则\"><a href=\"#相等操作符转换规则\" class=\"headerlink\" title=\"相等操作符转换规则\"></a>相等操作符转换规则</h3><p>如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false 转换为0，而 true 转换为1；<br>如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；<br><code>null 和undefined 是相等的。</code><br><code>要比较相等性之前，不能将null 和undefined 转换成其他任何值。</code><br>如果有一个操作数是NaN，则相等操作符返回false，而不相等操作符返回true。即使两个操作数都是NaN，相等操作符也返回false；因为按照规则，NaN 不等于NaN。<br>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回true；否则，返回false。</p>\n<h3 id=\"为什么很少使用-with-语句\"><a href=\"#为什么很少使用-with-语句\" class=\"headerlink\" title=\"为什么很少使用 with 语句\"></a>为什么很少使用 with 语句</h3><p>严格模式下使用 with 语句会被视为语法错误。<br>大量使用 with 语句会导致性能下降，同时也会给调试代码造成困难。</p>\n<h3 id=\"看到-switch-的有意思的用法\"><a href=\"#看到-switch-的有意思的用法\" class=\"headerlink\" title=\"看到 switch 的有意思的用法\"></a>看到 switch 的有意思的用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">25</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> num &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;Less than 0.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> num &gt;= <span class=\"number\">0</span> &amp;&amp; num &lt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;Between 0 and 10.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> num &gt; <span class=\"number\">10</span> &amp;&amp; num &lt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;Between 10 and 20.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;More than 20.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"理解下-arguments-对象\"><a href=\"#理解下-arguments-对象\" class=\"headerlink\" title=\"理解下 arguments 对象\"></a>理解下 arguments 对象</h3><p>arguments 对象是类数组结构。<br>关于arguments 的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步，但他们内存空间是相对独立的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdd</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">  alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doAdd(<span class=\"number\">1</span>,<span class=\"number\">2</span>)  <span class=\"comment\">// 11</span></span><br><span class=\"line\">doAdd(<span class=\"number\">1</span>)    <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值修改为10。因为arguments对象中的值会自动反映到对应的命名参数，所以修改arguments[1]，也就修改了num2，结果它们的值都会变成10。<br>不过，这并不是说读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但它们的值会同步。<br>另外还要记住，如果只传入了一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments 对象的长度是由传入的参数个数决定的，不是由定义函数时的命名参数的个数决定的。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>"},{"title":"Linux：关闭占用端口的进程.md","date":"2021-03-11T03:52:04.000Z","_content":"\n## Linux：关闭占用端口的进程\n- 使用端口号\n```bash\n[root@localhost _posts]# lsof -i:8888\nbash: lsof: 未找到命令\n[root@localhost _posts]# yum install lsof\n.....\n\n[root@localhost _posts]# lsof -i:8888\nCOMMAND   PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME\nnode    47161 root   20u  IPv6 1354694      0t0  TCP *:ddi-tcp-1 (LISTEN)\n[root@localhost _posts]# kill -9 47161\n[root@localhost _posts]# lsof -i:8888\n[6]+  已杀死               hexo s\n```\n","source":"_posts/Linux：关闭占用端口的进程-md.md","raw":"---\ntitle: Linux：关闭占用端口的进程.md\ndate: 2021-03-11 11:52:04\ntags:\n---\n\n## Linux：关闭占用端口的进程\n- 使用端口号\n```bash\n[root@localhost _posts]# lsof -i:8888\nbash: lsof: 未找到命令\n[root@localhost _posts]# yum install lsof\n.....\n\n[root@localhost _posts]# lsof -i:8888\nCOMMAND   PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME\nnode    47161 root   20u  IPv6 1354694      0t0  TCP *:ddi-tcp-1 (LISTEN)\n[root@localhost _posts]# kill -9 47161\n[root@localhost _posts]# lsof -i:8888\n[6]+  已杀死               hexo s\n```\n","slug":"Linux：关闭占用端口的进程-md","published":1,"updated":"2021-09-04T09:47:13.418Z","_id":"ckmd8l6aq0003zepvejrl4wph","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Linux：关闭占用端口的进程\"><a href=\"#Linux：关闭占用端口的进程\" class=\"headerlink\" title=\"Linux：关闭占用端口的进程\"></a>Linux：关闭占用端口的进程</h2><ul>\n<li>使用端口号<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost _posts]<span class=\"comment\"># lsof -i:8888</span></span><br><span class=\"line\">bash: lsof: 未找到命令</span><br><span class=\"line\">[root@localhost _posts]<span class=\"comment\"># yum install lsof</span></span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost _posts]<span class=\"comment\"># lsof -i:8888</span></span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">node    47161 root   20u  IPv6 1354694      0t0  TCP *:ddi-tcp-1 (LISTEN)</span><br><span class=\"line\">[root@localhost _posts]<span class=\"comment\"># kill -9 47161</span></span><br><span class=\"line\">[root@localhost _posts]<span class=\"comment\"># lsof -i:8888</span></span><br><span class=\"line\">[6]+  已杀死               hexo s</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux：关闭占用端口的进程\"><a href=\"#Linux：关闭占用端口的进程\" class=\"headerlink\" title=\"Linux：关闭占用端口的进程\"></a>Linux：关闭占用端口的进程</h2><ul>\n<li>使用端口号<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost _posts]<span class=\"comment\"># lsof -i:8888</span></span><br><span class=\"line\">bash: lsof: 未找到命令</span><br><span class=\"line\">[root@localhost _posts]<span class=\"comment\"># yum install lsof</span></span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost _posts]<span class=\"comment\"># lsof -i:8888</span></span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">node    47161 root   20u  IPv6 1354694      0t0  TCP *:ddi-tcp-1 (LISTEN)</span><br><span class=\"line\">[root@localhost _posts]<span class=\"comment\"># kill -9 47161</span></span><br><span class=\"line\">[root@localhost _posts]<span class=\"comment\"># lsof -i:8888</span></span><br><span class=\"line\">[6]+  已杀死               hexo s</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"git-命令","date":"2021-03-15T06:58:35.000Z","_content":"\n### git checkout 命令\n- 创建并切换到新的分支\n```bash\n$ git checkout -b new-branch-name\n```\n\n- 强制创建并切换到新的分支，如果有同名分支则将其覆盖\n``` bash\n$ git checkout -B new-branch-name\n```\n\n- 使用暂存区内容覆盖工作区内容\n```bash\n$ git checkout file-name\n```\n\n<!-- more -->\n\n- 使用暂存区内容覆盖工作区所有文件内容\n```bash\n$ git checkout .\n```\n\n- 切换分支\n```bash\n$ git checkout branch-name\n```\n\n- 为了防止暂存区内容覆盖和切换分支误判，建议用下面的命令获取暂存区内容\n```bash \n$ git checkout -- file-name\n```\n\n- 使用指定commit内容覆盖工作区\n```bash \n$ git checkout commit-hash-id -- file-name\n```\n\n- 使用指定分支的最新暂存区内容覆盖当前工作区内容\n```bash\n$ git checkout branch-name -- file-name\n```\n\n\n### git branch 命令\n\n\n\n### git remote 命令\n- 查看远程仓库信息\n```bash\n$ git remote -v\n```\n\n- 查看远程仓库的各个分支信息\n```bash\n$ git remote show origin\n```\n这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支。它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了。\n\n- 刷新本地仓库与远程仓库保持同步改动\n```bash\n$ git remote prune origin\n```\n\n- 查看无效的远程分支\n```bash\n$ git remote prune origin --dry-run\n```\n\n- 清理无效的远程分支\n```bash\n$ git remote prune origin\n```\n\n### git branch 命令\n- 查看本地分支\n```bash\ngit branch\n```\n\n- 查看远程分支\n```bash\ngit branch -r\n```\n\n- 查看所有分支\n```bash\ngit branch -a\n```\n\n- 给分支重命名\n```bash\ngit branch -m old-name new-name\n```\n\n- 查看每个分支的最后一次提交\n```bash\ngit branch -v\n```\n\n- 查看本地分支对应的远程分支\n```bash\ngit branch -vv\n```\n\n- 创建分支\n```bash\ngit branch new-name\n```\n\n- 删除分支\n```bash\ngit branch -d branch-name\n```\n\n- 强制删除分支\n```bash\ngit branch -D branch-name\n```\n","source":"_posts/git-命令.md","raw":"---\ntitle: git-命令\ndate: 2021-03-15 14:58:35\ntags: Git\n---\n\n### git checkout 命令\n- 创建并切换到新的分支\n```bash\n$ git checkout -b new-branch-name\n```\n\n- 强制创建并切换到新的分支，如果有同名分支则将其覆盖\n``` bash\n$ git checkout -B new-branch-name\n```\n\n- 使用暂存区内容覆盖工作区内容\n```bash\n$ git checkout file-name\n```\n\n<!-- more -->\n\n- 使用暂存区内容覆盖工作区所有文件内容\n```bash\n$ git checkout .\n```\n\n- 切换分支\n```bash\n$ git checkout branch-name\n```\n\n- 为了防止暂存区内容覆盖和切换分支误判，建议用下面的命令获取暂存区内容\n```bash \n$ git checkout -- file-name\n```\n\n- 使用指定commit内容覆盖工作区\n```bash \n$ git checkout commit-hash-id -- file-name\n```\n\n- 使用指定分支的最新暂存区内容覆盖当前工作区内容\n```bash\n$ git checkout branch-name -- file-name\n```\n\n\n### git branch 命令\n\n\n\n### git remote 命令\n- 查看远程仓库信息\n```bash\n$ git remote -v\n```\n\n- 查看远程仓库的各个分支信息\n```bash\n$ git remote show origin\n```\n这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支。它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了。\n\n- 刷新本地仓库与远程仓库保持同步改动\n```bash\n$ git remote prune origin\n```\n\n- 查看无效的远程分支\n```bash\n$ git remote prune origin --dry-run\n```\n\n- 清理无效的远程分支\n```bash\n$ git remote prune origin\n```\n\n### git branch 命令\n- 查看本地分支\n```bash\ngit branch\n```\n\n- 查看远程分支\n```bash\ngit branch -r\n```\n\n- 查看所有分支\n```bash\ngit branch -a\n```\n\n- 给分支重命名\n```bash\ngit branch -m old-name new-name\n```\n\n- 查看每个分支的最后一次提交\n```bash\ngit branch -v\n```\n\n- 查看本地分支对应的远程分支\n```bash\ngit branch -vv\n```\n\n- 创建分支\n```bash\ngit branch new-name\n```\n\n- 删除分支\n```bash\ngit branch -d branch-name\n```\n\n- 强制删除分支\n```bash\ngit branch -D branch-name\n```\n","slug":"git-命令","published":1,"updated":"2021-09-04T09:47:13.418Z","_id":"ckmd8l6as0005zepv88l54lp2","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"git-checkout-命令\"><a href=\"#git-checkout-命令\" class=\"headerlink\" title=\"git checkout 命令\"></a>git checkout 命令</h3><ul>\n<li><p>创建并切换到新的分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b new-branch-name</span><br></pre></td></tr></table></figure></li>\n<li><p>强制创建并切换到新的分支，如果有同名分支则将其覆盖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -B new-branch-name</span><br></pre></td></tr></table></figure></li>\n<li><p>使用暂存区内容覆盖工作区内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout file-name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>使用暂存区内容覆盖工作区所有文件内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout .</span><br></pre></td></tr></table></figure></li>\n<li><p>切换分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout branch-name</span><br></pre></td></tr></table></figure></li>\n<li><p>为了防止暂存区内容覆盖和切换分支误判，建议用下面的命令获取暂存区内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- file-name</span><br></pre></td></tr></table></figure></li>\n<li><p>使用指定commit内容覆盖工作区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout commit-hash-id -- file-name</span><br></pre></td></tr></table></figure></li>\n<li><p>使用指定分支的最新暂存区内容覆盖当前工作区内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout branch-name -- file-name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"git-branch-命令\"><a href=\"#git-branch-命令\" class=\"headerlink\" title=\"git branch 命令\"></a>git branch 命令</h3><h3 id=\"git-remote-命令\"><a href=\"#git-remote-命令\" class=\"headerlink\" title=\"git remote 命令\"></a>git remote 命令</h3><ul>\n<li><p>查看远程仓库信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br></pre></td></tr></table></figure></li>\n<li><p>查看远程仓库的各个分支信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote show origin</span><br></pre></td></tr></table></figure>\n<p>这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支。它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了。</p>\n</li>\n<li><p>刷新本地仓库与远程仓库保持同步改动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote prune origin</span><br></pre></td></tr></table></figure></li>\n<li><p>查看无效的远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote prune origin --dry-run</span><br></pre></td></tr></table></figure></li>\n<li><p>清理无效的远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote prune origin</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"git-branch-命令-1\"><a href=\"#git-branch-命令-1\" class=\"headerlink\" title=\"git branch 命令\"></a>git branch 命令</h3><ul>\n<li><p>查看本地分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></li>\n<li><p>查看远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure></li>\n<li><p>查看所有分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></li>\n<li><p>给分支重命名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m old-name new-name</span><br></pre></td></tr></table></figure></li>\n<li><p>查看每个分支的最后一次提交</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -v</span><br></pre></td></tr></table></figure></li>\n<li><p>查看本地分支对应的远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure></li>\n<li><p>创建分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch new-name</span><br></pre></td></tr></table></figure></li>\n<li><p>删除分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branch-name</span><br></pre></td></tr></table></figure></li>\n<li><p>强制删除分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D branch-name</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"git-checkout-命令\"><a href=\"#git-checkout-命令\" class=\"headerlink\" title=\"git checkout 命令\"></a>git checkout 命令</h3><ul>\n<li><p>创建并切换到新的分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b new-branch-name</span><br></pre></td></tr></table></figure></li>\n<li><p>强制创建并切换到新的分支，如果有同名分支则将其覆盖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -B new-branch-name</span><br></pre></td></tr></table></figure></li>\n<li><p>使用暂存区内容覆盖工作区内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout file-name</span><br></pre></td></tr></table></figure></li>\n</ul>","more":"<ul>\n<li><p>使用暂存区内容覆盖工作区所有文件内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout .</span><br></pre></td></tr></table></figure></li>\n<li><p>切换分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout branch-name</span><br></pre></td></tr></table></figure></li>\n<li><p>为了防止暂存区内容覆盖和切换分支误判，建议用下面的命令获取暂存区内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- file-name</span><br></pre></td></tr></table></figure></li>\n<li><p>使用指定commit内容覆盖工作区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout commit-hash-id -- file-name</span><br></pre></td></tr></table></figure></li>\n<li><p>使用指定分支的最新暂存区内容覆盖当前工作区内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout branch-name -- file-name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"git-branch-命令\"><a href=\"#git-branch-命令\" class=\"headerlink\" title=\"git branch 命令\"></a>git branch 命令</h3><h3 id=\"git-remote-命令\"><a href=\"#git-remote-命令\" class=\"headerlink\" title=\"git remote 命令\"></a>git remote 命令</h3><ul>\n<li><p>查看远程仓库信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br></pre></td></tr></table></figure></li>\n<li><p>查看远程仓库的各个分支信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote show origin</span><br></pre></td></tr></table></figure>\n<p>这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支。它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了。</p>\n</li>\n<li><p>刷新本地仓库与远程仓库保持同步改动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote prune origin</span><br></pre></td></tr></table></figure></li>\n<li><p>查看无效的远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote prune origin --dry-run</span><br></pre></td></tr></table></figure></li>\n<li><p>清理无效的远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote prune origin</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"git-branch-命令-1\"><a href=\"#git-branch-命令-1\" class=\"headerlink\" title=\"git branch 命令\"></a>git branch 命令</h3><ul>\n<li><p>查看本地分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></li>\n<li><p>查看远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure></li>\n<li><p>查看所有分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></li>\n<li><p>给分支重命名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m old-name new-name</span><br></pre></td></tr></table></figure></li>\n<li><p>查看每个分支的最后一次提交</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -v</span><br></pre></td></tr></table></figure></li>\n<li><p>查看本地分支对应的远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure></li>\n<li><p>创建分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch new-name</span><br></pre></td></tr></table></figure></li>\n<li><p>删除分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branch-name</span><br></pre></td></tr></table></figure></li>\n<li><p>强制删除分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D branch-name</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"git命令指定默认分支","date":"2021-03-11T04:06:07.000Z","_content":"git 对于push操作有个default行为，但是根据git版本不同，push的默认行为不同。\n在Git的2.0之前，push.default属性默认被设为'matching'，2.0之后被改成为'simple'。\npush.default的可选值：nothing , current , upstream , simple , matching\n\n### push.default 的可选值\n- nothing : 无默认操作，需要显示地指定远程分支；eg : git push origin branchname\n- current :  push当前分支到远程同名分支，如果远程同名分支不存在则自动创建同名分支\n- upstream : push当前分支到它的upstream分支上\n- simple : 与upstream类似，但有一点不同，就是simple必须保证本地分支和它的远程分支upstream分支同名，否则会拒绝push操作。\n- matching : push所有本地和远程两端都存在的同名分支\n\n### 改变 push.default\n```bash\ngit config --global push.default current\n```\n","source":"_posts/git命令指定默认分支.md","raw":"---\ntitle: git命令指定默认分支\ndate: 2021-03-11 12:06:07\ntags:\n---\ngit 对于push操作有个default行为，但是根据git版本不同，push的默认行为不同。\n在Git的2.0之前，push.default属性默认被设为'matching'，2.0之后被改成为'simple'。\npush.default的可选值：nothing , current , upstream , simple , matching\n\n### push.default 的可选值\n- nothing : 无默认操作，需要显示地指定远程分支；eg : git push origin branchname\n- current :  push当前分支到远程同名分支，如果远程同名分支不存在则自动创建同名分支\n- upstream : push当前分支到它的upstream分支上\n- simple : 与upstream类似，但有一点不同，就是simple必须保证本地分支和它的远程分支upstream分支同名，否则会拒绝push操作。\n- matching : push所有本地和远程两端都存在的同名分支\n\n### 改变 push.default\n```bash\ngit config --global push.default current\n```\n","slug":"git命令指定默认分支","published":1,"updated":"2021-09-04T09:47:13.418Z","_id":"ckmd8l6at0006zepva91bcn5q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>git 对于push操作有个default行为，但是根据git版本不同，push的默认行为不同。<br>在Git的2.0之前，push.default属性默认被设为’matching’，2.0之后被改成为’simple’。<br>push.default的可选值：nothing , current , upstream , simple , matching</p>\n<h3 id=\"push-default-的可选值\"><a href=\"#push-default-的可选值\" class=\"headerlink\" title=\"push.default 的可选值\"></a>push.default 的可选值</h3><ul>\n<li>nothing : 无默认操作，需要显示地指定远程分支；eg : git push origin branchname</li>\n<li>current :  push当前分支到远程同名分支，如果远程同名分支不存在则自动创建同名分支</li>\n<li>upstream : push当前分支到它的upstream分支上</li>\n<li>simple : 与upstream类似，但有一点不同，就是simple必须保证本地分支和它的远程分支upstream分支同名，否则会拒绝push操作。</li>\n<li>matching : push所有本地和远程两端都存在的同名分支</li>\n</ul>\n<h3 id=\"改变-push-default\"><a href=\"#改变-push-default\" class=\"headerlink\" title=\"改变 push.default\"></a>改变 push.default</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global push.default current</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>git 对于push操作有个default行为，但是根据git版本不同，push的默认行为不同。<br>在Git的2.0之前，push.default属性默认被设为’matching’，2.0之后被改成为’simple’。<br>push.default的可选值：nothing , current , upstream , simple , matching</p>\n<h3 id=\"push-default-的可选值\"><a href=\"#push-default-的可选值\" class=\"headerlink\" title=\"push.default 的可选值\"></a>push.default 的可选值</h3><ul>\n<li>nothing : 无默认操作，需要显示地指定远程分支；eg : git push origin branchname</li>\n<li>current :  push当前分支到远程同名分支，如果远程同名分支不存在则自动创建同名分支</li>\n<li>upstream : push当前分支到它的upstream分支上</li>\n<li>simple : 与upstream类似，但有一点不同，就是simple必须保证本地分支和它的远程分支upstream分支同名，否则会拒绝push操作。</li>\n<li>matching : push所有本地和远程两端都存在的同名分支</li>\n</ul>\n<h3 id=\"改变-push-default\"><a href=\"#改变-push-default\" class=\"headerlink\" title=\"改变 push.default\"></a>改变 push.default</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global push.default current</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-09-04T09:47:13.419Z","updated":"2021-09-04T09:47:13.419Z","_id":"ckmd8l6au0007zepvg5sw746j","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"hexo自动保存域名.md","date":"2021-03-11T03:15:01.000Z","_content":"\n## hexo d 部署时自动保存域名\n```bash\nvi source/CNAME\n-- 输入域名 --\n:wq\nhexo g\nhexo d\n```\n","source":"_posts/hexo自动保存域名-md.md","raw":"---\ntitle: hexo自动保存域名.md\ndate: 2021-03-11 11:15:01\ntags:\n---\n\n## hexo d 部署时自动保存域名\n```bash\nvi source/CNAME\n-- 输入域名 --\n:wq\nhexo g\nhexo d\n```\n","slug":"hexo自动保存域名-md","published":1,"updated":"2021-09-04T09:47:13.419Z","_id":"ckmd8l6av000azepv3xw6esov","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"hexo-d-部署时自动保存域名\"><a href=\"#hexo-d-部署时自动保存域名\" class=\"headerlink\" title=\"hexo d 部署时自动保存域名\"></a>hexo d 部署时自动保存域名</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi <span class=\"built_in\">source</span>/CNAME</span><br><span class=\"line\">-- 输入域名 --</span><br><span class=\"line\">:wq</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hexo-d-部署时自动保存域名\"><a href=\"#hexo-d-部署时自动保存域名\" class=\"headerlink\" title=\"hexo d 部署时自动保存域名\"></a>hexo d 部署时自动保存域名</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi <span class=\"built_in\">source</span>/CNAME</span><br><span class=\"line\">-- 输入域名 --</span><br><span class=\"line\">:wq</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n"},{"title":"init-hexo.md","date":"2021-03-10T12:08:37.000Z","_content":"## hexo 初始化\n``` bash\nhexo init <dirname>\ncd <dirname>\nnpm install\n\n--- 假设报错\nnpm ERR! ejs@2.7.4 postinstall: `node ./postinstall.js`\n\n: 执行\nnpm install ejs@2.7.4 --ignore-scripts\n再 npm install\n---\n```\n","source":"_posts/init-hexo-md.md","raw":"---\ntitle: init-hexo.md\ndate: 2021-03-10 20:08:37\ntags:\n---\n## hexo 初始化\n``` bash\nhexo init <dirname>\ncd <dirname>\nnpm install\n\n--- 假设报错\nnpm ERR! ejs@2.7.4 postinstall: `node ./postinstall.js`\n\n: 执行\nnpm install ejs@2.7.4 --ignore-scripts\n再 npm install\n---\n```\n","slug":"init-hexo-md","published":1,"updated":"2021-09-04T09:47:13.419Z","_id":"ckmd8l6av000bzepv540ddx2y","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"hexo-初始化\"><a href=\"#hexo-初始化\" class=\"headerlink\" title=\"hexo 初始化\"></a>hexo 初始化</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;dirname&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;dirname&gt;</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">--- 假设报错</span><br><span class=\"line\">npm ERR! ejs@2.7.4 postinstall: `node ./postinstall.js`</span><br><span class=\"line\"></span><br><span class=\"line\">: 执行</span><br><span class=\"line\">npm install ejs@2.7.4 --ignore-scripts</span><br><span class=\"line\">再 npm install</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hexo-初始化\"><a href=\"#hexo-初始化\" class=\"headerlink\" title=\"hexo 初始化\"></a>hexo 初始化</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;dirname&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;dirname&gt;</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">--- 假设报错</span><br><span class=\"line\">npm ERR! ejs@2.7.4 postinstall: `node ./postinstall.js`</span><br><span class=\"line\"></span><br><span class=\"line\">: 执行</span><br><span class=\"line\">npm install ejs@2.7.4 --ignore-scripts</span><br><span class=\"line\">再 npm install</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n"},{"title":"linux不能使用ftp命令","date":"2021-03-15T12:46:44.000Z","_content":"\n### 异常\n```bash\n[root@localhost RunSky87.github.io]# ftp 192.168.1.115\nbash: ftp: 未找到命令\n```\n\n### 解决\n```bash\n$ yum -y install ftp\n```\n\n### 如下图所示\n<!-- more -->\n![install-ftp-svg](https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/install_ftp.svg)\n","source":"_posts/linux不能使用ftp命令.md","raw":"---\ntitle: linux不能使用ftp命令\ndate: 2021-03-15 20:46:44\ntags: FTP\n---\n\n### 异常\n```bash\n[root@localhost RunSky87.github.io]# ftp 192.168.1.115\nbash: ftp: 未找到命令\n```\n\n### 解决\n```bash\n$ yum -y install ftp\n```\n\n### 如下图所示\n<!-- more -->\n![install-ftp-svg](https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/install_ftp.svg)\n","slug":"linux不能使用ftp命令","published":1,"updated":"2021-09-04T09:47:13.421Z","_id":"ckmd8l6ax000czepv91j06ga2","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost RunSky87.github.io]<span class=\"comment\"># ftp 192.168.1.115</span></span><br><span class=\"line\">bash: ftp: 未找到命令</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum -y install ftp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如下图所示\"><a href=\"#如下图所示\" class=\"headerlink\" title=\"如下图所示\"></a>如下图所示</h3><span id=\"more\"></span>\n<p><img src=\"https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/install_ftp.svg\" alt=\"install-ftp-svg\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost RunSky87.github.io]<span class=\"comment\"># ftp 192.168.1.115</span></span><br><span class=\"line\">bash: ftp: 未找到命令</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum -y install ftp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如下图所示\"><a href=\"#如下图所示\" class=\"headerlink\" title=\"如下图所示\"></a>如下图所示</h3>","more":"<p><img src=\"https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/install_ftp.svg\" alt=\"install-ftp-svg\"></p>"},{"title":"test","date":"2021-03-12T02:38:12.000Z","_content":"\n[美化教程](https://zhuanlan.zhihu.com/p/69211731)\n\n \n```javascript\nvar a = 12321\n```\n```javascript\nvar a = 12321\n```\n```C\nvar a = 12321\n```\n<!-- more -->\n\n```C#\nvar a = 12321\nusing System;\nusing System.ComponentModel;\n\nnamespace EM\n{\n    public class SysUserEM\n    {\n        [Description(\"用户ID\"), Category(\"系统-用户表\"), DisplayName(\"用户ID\")]\n        public string UserId { get; set; }\n\n        [Description(\"名称\"), Category(\"系统-用户表\"), DisplayName(\"名称\")]\n        public string UserName { get; set; }\n\n        [Description(\"密码\"), Category(\"系统-用户表\"), DisplayName(\"密码\")]\n        public string SPwd { get; set; }\n\n        [Description(\"手机号\"), Category(\"系统-用户表\"), DisplayName(\"手机号\")]\n        public string SMobile { get; set; }\n\n        [Description(\"Email\"), Category(\"系统-用户表\"), DisplayName(\"Email\")]\n        public string SEmail { get; set; }\n\n        [Description(\"状态\"), Category(\"系统-用户表\"), DisplayName(\"状态\")]\n        public string UserStatus { get; set; }\n\n        [Description(\"创建日期\"), Category(\"系统-用户表\"), DisplayName(\"创建日期\")]\n        public DateTime DTime { get; set; }\n\n        [Description(\"备注\"), Category(\"系统-用户表\"), DisplayName(\"备注\")]\n        public string SNote { get; set; }\n\n    }\n}\n\n```\n``` html /blog/index.html Tyrion Yu tyrionyu-blog\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n</body>\n</html>\n```\n\n<div id=\"binft\"></div>\n  <script>\n    var binft = function (r) {\n      function t() {\n        return b[Math.floor(Math.random() * b.length)]\n      }  \n      function e() {\n        return String.fromCharCode(94 * Math.random() + 33)\n      }\n      function n(r) {\n        for (var n = document.createDocumentFragment(), i = 0; r > i; i++) {\n          var l = document.createElement(\"span\");\n          l.textContent = e(), l.style.color = t(), n.appendChild(l)\n        }\n        return n\n      }\n      function i() {\n        var t = o[c.skillI];\n        c.step ? c.step-- : (c.step = g, c.prefixP < l.length ? (c.prefixP >= 0 && (c.text += l[c.prefixP]), c.prefixP++) : \"forward\" === c.direction ? c.skillP < t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = \"backward\", c.delay = a) : c.skillP > 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % o.length, c.direction = \"forward\")), r.textContent = c.text, r.appendChild(n(c.prefixP < l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d)\n      }\n      var l = \"\",\n      o = [\"青青陵上柏，磊磊涧中石。\", \"人生天地间，忽如远行客。\",\"斗酒相娱乐，聊厚不为薄。\", \"驱车策驽马，游戏宛与洛。\",\"洛中何郁郁，冠带自相索。\",\"长衢罗夹巷，王侯多第宅。\",\"两宫遥相望，双阙百余尺。\",\"极宴娱心意，戚戚何所迫？\"].map(function (r) {\n      return r + \"\"\n      }),\n      a = 2,\n      g = 1,\n      s = 5,\n      d = 75,\n      b = [\"rgb(110,64,170)\", \"rgb(150,61,179)\", \"rgb(191,60,175)\", \"rgb(228,65,157)\", \"rgb(254,75,131)\", \"rgb(255,94,99)\", \"rgb(255,120,71)\", \"rgb(251,150,51)\", \"rgb(226,183,47)\", \"rgb(198,214,60)\", \"rgb(175,240,91)\", \"rgb(127,246,88)\", \"rgb(82,246,103)\", \"rgb(48,239,130)\", \"rgb(29,223,163)\", \"rgb(26,199,194)\", \"rgb(35,171,216)\", \"rgb(54,140,225)\", \"rgb(76,110,219)\", \"rgb(96,84,200)\"],\n      c = {\n        text: \"\",\n        prefixP: -s,\n        skillI: 0,\n        skillP: 0,\n        direction: \"forward\",\n        delay: a,\n        step: g\n      };\n      i()\n      };\n      binft(document.getElementById('binft'));\n  </script>\n\n<iframe frameborder=\"no\"  border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1355197518&auto=1&height=66\"></iframe>\n\n\n<script>\n<!--浏览器搞笑标题-->\n var OriginTitle = document.title;\n var titleTime;\n document.addEventListener('visibilitychange', function () {\n     if (document.hidden) {\n         $('[rel=\"icon\"]').attr('href', \"/img/trhx2.png\");\n         document.title = 'ヽ(●-`Д´-)ノ你丑你就走！';\n         clearTimeout(titleTime);\n     }\n     else {\n         $('[rel=\"icon\"]').attr('href', \"/img/trhx2.png\");\n         document.title = 'ヾ(Ő∀Ő3)ノ你帅就回来！' + OriginTitle;\n         titleTime = setTimeout(function () {\n             document.title = OriginTitle;\n         }, 2000);\n     }\n });\n</script>\n\n<script type=\"text/javascript\"\ncolor=\"220,220,220\" opacity='0.7' zIndex=\"-2\" count=\"200\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\">\n</script>\n<script>\n/*样式一*/\n(function($){\n    $.fn.snow = function(options){\n    var $flake = $('<div id=\"snowbox\" />').css({'position': 'absolute','z-index':'9999', 'top': '-50px'}).html('&#10052;'),\n    documentHeight  = $(document).height(),\n    documentWidth   = $(document).width(),\n    defaults = {\n        minSize     : 10,\n        maxSize     : 20,\n        newOn       : 1000,\n        flakeColor  : \"#AFDAEF\" /* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */\n    },\n    options = $.extend({}, defaults, options);\n    var interval= setInterval( function(){\n    var startPositionLeft = Math.random() * documentWidth - 100,\n    startOpacity = 0.5 + Math.random(),\n    sizeFlake = options.minSize + Math.random() * options.maxSize,\n    endPositionTop = documentHeight - 200,\n    endPositionLeft = startPositionLeft - 500 + Math.random() * 500,\n    durationFall = documentHeight * 10 + Math.random() * 5000;\n    $flake.clone().appendTo('body').css({\n        left: startPositionLeft,\n        opacity: startOpacity,\n        'font-size': sizeFlake,\n        color: options.flakeColor\n    }).animate({\n        top: endPositionTop,\n        left: endPositionLeft,\n        opacity: 0.2\n    },durationFall,'linear',function(){\n        $(this).remove()\n    });\n    }, options.newOn);\n    };\n})(jQuery);\n$(function(){\n    $.fn.snow({ \n        minSize: 5, /* 定义雪花最小尺寸 */\n        maxSize: 50,/* 定义雪花最大尺寸 */\n        newOn: 300  /* 定义密集程度，数字越小越密集 */\n    });\n});\n</script>\n\n<script>\n\n// 鼠标样式\ndocument.querySelector(\"body\").style.cursor = 'url(https://blog.shanamaid.top/css/images/icon.png),default';\n\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n</script>\n\n<iframe\n  src=\"https://carbon.now.sh/embed?bg=rgba%28171%2C184%2C195%2C0%29&t=seti&wt=none&l=auto&ds=true&dsyoff=16px&dsblur=14px&wc=true&wa=true&pv=34px&ph=48px&ln=false&fl=1&fm=Hack&fs=13px&lh=148%25&si=false&es=2x&wm=false&code=var%2520spiralOrder%2520%253D%2520function%28matrix%29%2520%257B%250A%2520%2520%2520%2520if%2520%28%21matrix.length%2520%257C%257C%2520%21matrix%255B0%255D.length%29%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%255B%255D%253B%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520const%2520rows%2520%253D%2520matrix.length%252C%2520columns%2520%253D%2520matrix%255B0%255D.length%253B%250A%2520%2520%2520%2520const%2520visited%2520%253D%2520new%2520Array%28rows%29.fill%280%29.map%28%28%29%2520%253D%253E%2520new%2520Array%28columns%29.fill%28false%29%29%253B%250A%2520%2520%2520%2520const%2520total%2520%253D%2520rows%2520*%2520columns%253B%250A%2520%2520%2520%2520const%2520order%2520%253D%2520new%2520Array%28total%29.fill%280%29%253B%250A%250A%2520%2520%2520%2520let%2520directionIndex%2520%253D%25200%252C%2520row%2520%253D%25200%252C%2520column%2520%253D%25200%253B%250A%2520%2520%2520%2520const%2520directions%2520%253D%2520%255B%255B0%252C%25201%255D%252C%2520%255B1%252C%25200%255D%252C%2520%255B0%252C%2520-1%255D%252C%2520%255B-1%252C%25200%255D%255D%253B%250A%2520%2520%2520%2520for%2520%28let%2520i%2520%253D%25200%253B%2520i%2520%253C%2520total%253B%2520i%252B%252B%29%2520%257B%2520%250A%2520%2520%2520%2520%2520%2520%2520%2520order%255Bi%255D%2520%253D%2520matrix%255Brow%255D%255Bcolumn%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520visited%255Brow%255D%255Bcolumn%255D%2520%253D%2520true%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520const%2520nextRow%2520%253D%2520row%2520%252B%2520directions%255BdirectionIndex%255D%255B0%255D%252C%2520nextColumn%2520%253D%2520column%2520%252B%2520directions%255BdirectionIndex%255D%255B1%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520%28%21%280%2520%253C%253D%2520nextRow%2520%2526%2526%2520nextRow%2520%253C%2520rows%2520%2526%2526%25200%2520%253C%253D%2520nextColumn%2520%2526%2526%2520nextColumn%2520%253C%2520columns%2520%2526%2526%2520%21%28visited%255BnextRow%255D%255BnextColumn%255D%29%29%29%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520directionIndex%2520%253D%2520%28directionIndex%2520%252B%25201%29%2520%2525%25204%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520row%2520%252B%253D%2520directions%255BdirectionIndex%255D%255B0%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520column%2520%252B%253D%2520directions%255BdirectionIndex%255D%255B1%255D%253B%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520return%2520order%253B%250A%257D%253B\"\n  style=\"width: 1024px; height: 698px; border:0; transform: scale(1); overflow:hidden;\"\n  sandbox=\"allow-scripts allow-same-origin\">\n</iframe>\n\n![https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/carbon.png?versionId=CAEQIBiBgMC3_7XQwRciIGE1ZjRmY2ZmOTY4NzQ5ODNiMTFkMmQ4ZDc1YTA2YmU2](https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/carbon.png?versionId=CAEQIBiBgMC3_7XQwRciIGE1ZjRmY2ZmOTY4NzQ5ODNiMTFkMmQ4ZDc1YTA2YmU2)\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2021-03-12 10:38:12\ntags:\n---\n\n[美化教程](https://zhuanlan.zhihu.com/p/69211731)\n\n \n```javascript\nvar a = 12321\n```\n```javascript\nvar a = 12321\n```\n```C\nvar a = 12321\n```\n<!-- more -->\n\n```C#\nvar a = 12321\nusing System;\nusing System.ComponentModel;\n\nnamespace EM\n{\n    public class SysUserEM\n    {\n        [Description(\"用户ID\"), Category(\"系统-用户表\"), DisplayName(\"用户ID\")]\n        public string UserId { get; set; }\n\n        [Description(\"名称\"), Category(\"系统-用户表\"), DisplayName(\"名称\")]\n        public string UserName { get; set; }\n\n        [Description(\"密码\"), Category(\"系统-用户表\"), DisplayName(\"密码\")]\n        public string SPwd { get; set; }\n\n        [Description(\"手机号\"), Category(\"系统-用户表\"), DisplayName(\"手机号\")]\n        public string SMobile { get; set; }\n\n        [Description(\"Email\"), Category(\"系统-用户表\"), DisplayName(\"Email\")]\n        public string SEmail { get; set; }\n\n        [Description(\"状态\"), Category(\"系统-用户表\"), DisplayName(\"状态\")]\n        public string UserStatus { get; set; }\n\n        [Description(\"创建日期\"), Category(\"系统-用户表\"), DisplayName(\"创建日期\")]\n        public DateTime DTime { get; set; }\n\n        [Description(\"备注\"), Category(\"系统-用户表\"), DisplayName(\"备注\")]\n        public string SNote { get; set; }\n\n    }\n}\n\n```\n``` html /blog/index.html Tyrion Yu tyrionyu-blog\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n</body>\n</html>\n```\n\n<div id=\"binft\"></div>\n  <script>\n    var binft = function (r) {\n      function t() {\n        return b[Math.floor(Math.random() * b.length)]\n      }  \n      function e() {\n        return String.fromCharCode(94 * Math.random() + 33)\n      }\n      function n(r) {\n        for (var n = document.createDocumentFragment(), i = 0; r > i; i++) {\n          var l = document.createElement(\"span\");\n          l.textContent = e(), l.style.color = t(), n.appendChild(l)\n        }\n        return n\n      }\n      function i() {\n        var t = o[c.skillI];\n        c.step ? c.step-- : (c.step = g, c.prefixP < l.length ? (c.prefixP >= 0 && (c.text += l[c.prefixP]), c.prefixP++) : \"forward\" === c.direction ? c.skillP < t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = \"backward\", c.delay = a) : c.skillP > 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % o.length, c.direction = \"forward\")), r.textContent = c.text, r.appendChild(n(c.prefixP < l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d)\n      }\n      var l = \"\",\n      o = [\"青青陵上柏，磊磊涧中石。\", \"人生天地间，忽如远行客。\",\"斗酒相娱乐，聊厚不为薄。\", \"驱车策驽马，游戏宛与洛。\",\"洛中何郁郁，冠带自相索。\",\"长衢罗夹巷，王侯多第宅。\",\"两宫遥相望，双阙百余尺。\",\"极宴娱心意，戚戚何所迫？\"].map(function (r) {\n      return r + \"\"\n      }),\n      a = 2,\n      g = 1,\n      s = 5,\n      d = 75,\n      b = [\"rgb(110,64,170)\", \"rgb(150,61,179)\", \"rgb(191,60,175)\", \"rgb(228,65,157)\", \"rgb(254,75,131)\", \"rgb(255,94,99)\", \"rgb(255,120,71)\", \"rgb(251,150,51)\", \"rgb(226,183,47)\", \"rgb(198,214,60)\", \"rgb(175,240,91)\", \"rgb(127,246,88)\", \"rgb(82,246,103)\", \"rgb(48,239,130)\", \"rgb(29,223,163)\", \"rgb(26,199,194)\", \"rgb(35,171,216)\", \"rgb(54,140,225)\", \"rgb(76,110,219)\", \"rgb(96,84,200)\"],\n      c = {\n        text: \"\",\n        prefixP: -s,\n        skillI: 0,\n        skillP: 0,\n        direction: \"forward\",\n        delay: a,\n        step: g\n      };\n      i()\n      };\n      binft(document.getElementById('binft'));\n  </script>\n\n<iframe frameborder=\"no\"  border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1355197518&auto=1&height=66\"></iframe>\n\n\n<script>\n<!--浏览器搞笑标题-->\n var OriginTitle = document.title;\n var titleTime;\n document.addEventListener('visibilitychange', function () {\n     if (document.hidden) {\n         $('[rel=\"icon\"]').attr('href', \"/img/trhx2.png\");\n         document.title = 'ヽ(●-`Д´-)ノ你丑你就走！';\n         clearTimeout(titleTime);\n     }\n     else {\n         $('[rel=\"icon\"]').attr('href', \"/img/trhx2.png\");\n         document.title = 'ヾ(Ő∀Ő3)ノ你帅就回来！' + OriginTitle;\n         titleTime = setTimeout(function () {\n             document.title = OriginTitle;\n         }, 2000);\n     }\n });\n</script>\n\n<script type=\"text/javascript\"\ncolor=\"220,220,220\" opacity='0.7' zIndex=\"-2\" count=\"200\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\">\n</script>\n<script>\n/*样式一*/\n(function($){\n    $.fn.snow = function(options){\n    var $flake = $('<div id=\"snowbox\" />').css({'position': 'absolute','z-index':'9999', 'top': '-50px'}).html('&#10052;'),\n    documentHeight  = $(document).height(),\n    documentWidth   = $(document).width(),\n    defaults = {\n        minSize     : 10,\n        maxSize     : 20,\n        newOn       : 1000,\n        flakeColor  : \"#AFDAEF\" /* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */\n    },\n    options = $.extend({}, defaults, options);\n    var interval= setInterval( function(){\n    var startPositionLeft = Math.random() * documentWidth - 100,\n    startOpacity = 0.5 + Math.random(),\n    sizeFlake = options.minSize + Math.random() * options.maxSize,\n    endPositionTop = documentHeight - 200,\n    endPositionLeft = startPositionLeft - 500 + Math.random() * 500,\n    durationFall = documentHeight * 10 + Math.random() * 5000;\n    $flake.clone().appendTo('body').css({\n        left: startPositionLeft,\n        opacity: startOpacity,\n        'font-size': sizeFlake,\n        color: options.flakeColor\n    }).animate({\n        top: endPositionTop,\n        left: endPositionLeft,\n        opacity: 0.2\n    },durationFall,'linear',function(){\n        $(this).remove()\n    });\n    }, options.newOn);\n    };\n})(jQuery);\n$(function(){\n    $.fn.snow({ \n        minSize: 5, /* 定义雪花最小尺寸 */\n        maxSize: 50,/* 定义雪花最大尺寸 */\n        newOn: 300  /* 定义密集程度，数字越小越密集 */\n    });\n});\n</script>\n\n<script>\n\n// 鼠标样式\ndocument.querySelector(\"body\").style.cursor = 'url(https://blog.shanamaid.top/css/images/icon.png),default';\n\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n</script>\n\n<iframe\n  src=\"https://carbon.now.sh/embed?bg=rgba%28171%2C184%2C195%2C0%29&t=seti&wt=none&l=auto&ds=true&dsyoff=16px&dsblur=14px&wc=true&wa=true&pv=34px&ph=48px&ln=false&fl=1&fm=Hack&fs=13px&lh=148%25&si=false&es=2x&wm=false&code=var%2520spiralOrder%2520%253D%2520function%28matrix%29%2520%257B%250A%2520%2520%2520%2520if%2520%28%21matrix.length%2520%257C%257C%2520%21matrix%255B0%255D.length%29%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%255B%255D%253B%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520const%2520rows%2520%253D%2520matrix.length%252C%2520columns%2520%253D%2520matrix%255B0%255D.length%253B%250A%2520%2520%2520%2520const%2520visited%2520%253D%2520new%2520Array%28rows%29.fill%280%29.map%28%28%29%2520%253D%253E%2520new%2520Array%28columns%29.fill%28false%29%29%253B%250A%2520%2520%2520%2520const%2520total%2520%253D%2520rows%2520*%2520columns%253B%250A%2520%2520%2520%2520const%2520order%2520%253D%2520new%2520Array%28total%29.fill%280%29%253B%250A%250A%2520%2520%2520%2520let%2520directionIndex%2520%253D%25200%252C%2520row%2520%253D%25200%252C%2520column%2520%253D%25200%253B%250A%2520%2520%2520%2520const%2520directions%2520%253D%2520%255B%255B0%252C%25201%255D%252C%2520%255B1%252C%25200%255D%252C%2520%255B0%252C%2520-1%255D%252C%2520%255B-1%252C%25200%255D%255D%253B%250A%2520%2520%2520%2520for%2520%28let%2520i%2520%253D%25200%253B%2520i%2520%253C%2520total%253B%2520i%252B%252B%29%2520%257B%2520%250A%2520%2520%2520%2520%2520%2520%2520%2520order%255Bi%255D%2520%253D%2520matrix%255Brow%255D%255Bcolumn%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520visited%255Brow%255D%255Bcolumn%255D%2520%253D%2520true%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520const%2520nextRow%2520%253D%2520row%2520%252B%2520directions%255BdirectionIndex%255D%255B0%255D%252C%2520nextColumn%2520%253D%2520column%2520%252B%2520directions%255BdirectionIndex%255D%255B1%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520%28%21%280%2520%253C%253D%2520nextRow%2520%2526%2526%2520nextRow%2520%253C%2520rows%2520%2526%2526%25200%2520%253C%253D%2520nextColumn%2520%2526%2526%2520nextColumn%2520%253C%2520columns%2520%2526%2526%2520%21%28visited%255BnextRow%255D%255BnextColumn%255D%29%29%29%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520directionIndex%2520%253D%2520%28directionIndex%2520%252B%25201%29%2520%2525%25204%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520row%2520%252B%253D%2520directions%255BdirectionIndex%255D%255B0%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520column%2520%252B%253D%2520directions%255BdirectionIndex%255D%255B1%255D%253B%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520return%2520order%253B%250A%257D%253B\"\n  style=\"width: 1024px; height: 698px; border:0; transform: scale(1); overflow:hidden;\"\n  sandbox=\"allow-scripts allow-same-origin\">\n</iframe>\n\n![https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/carbon.png?versionId=CAEQIBiBgMC3_7XQwRciIGE1ZjRmY2ZmOTY4NzQ5ODNiMTFkMmQ4ZDc1YTA2YmU2](https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/carbon.png?versionId=CAEQIBiBgMC3_7XQwRciIGE1ZjRmY2ZmOTY4NzQ5ODNiMTFkMmQ4ZDc1YTA2YmU2)\n","slug":"test","published":1,"updated":"2021-09-04T09:47:13.421Z","_id":"ckmd8l6ay000ezepveeiidifj","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://zhuanlan.zhihu.com/p/69211731\">美化教程</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">12321</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">12321</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = <span class=\"number\">12321</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">12321</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EM</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SysUserEM</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;用户ID&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;用户ID&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;名称&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;名称&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;密码&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;密码&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> SPwd &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;手机号&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;手机号&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> SMobile &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;Email&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;Email&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> SEmail &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;状态&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;状态&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserStatus &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;创建日期&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;创建日期&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime DTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;备注&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;备注&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> SNote &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><figcaption><span>/blog/index.html Tyrion Yu tyrionyu-blog</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<div id=\"binft\"></div>\n  <script>\n    var binft = function (r) {\n      function t() {\n        return b[Math.floor(Math.random() * b.length)]\n      }  \n      function e() {\n        return String.fromCharCode(94 * Math.random() + 33)\n      }\n      function n(r) {\n        for (var n = document.createDocumentFragment(), i = 0; r > i; i++) {\n          var l = document.createElement(\"span\");\n          l.textContent = e(), l.style.color = t(), n.appendChild(l)\n        }\n        return n\n      }\n      function i() {\n        var t = o[c.skillI];\n        c.step ? c.step-- : (c.step = g, c.prefixP < l.length ? (c.prefixP >= 0 && (c.text += l[c.prefixP]), c.prefixP++) : \"forward\" === c.direction ? c.skillP < t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = \"backward\", c.delay = a) : c.skillP > 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % o.length, c.direction = \"forward\")), r.textContent = c.text, r.appendChild(n(c.prefixP < l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d)\n      }\n      var l = \"\",\n      o = [\"青青陵上柏，磊磊涧中石。\", \"人生天地间，忽如远行客。\",\"斗酒相娱乐，聊厚不为薄。\", \"驱车策驽马，游戏宛与洛。\",\"洛中何郁郁，冠带自相索。\",\"长衢罗夹巷，王侯多第宅。\",\"两宫遥相望，双阙百余尺。\",\"极宴娱心意，戚戚何所迫？\"].map(function (r) {\n      return r + \"\"\n      }),\n      a = 2,\n      g = 1,\n      s = 5,\n      d = 75,\n      b = [\"rgb(110,64,170)\", \"rgb(150,61,179)\", \"rgb(191,60,175)\", \"rgb(228,65,157)\", \"rgb(254,75,131)\", \"rgb(255,94,99)\", \"rgb(255,120,71)\", \"rgb(251,150,51)\", \"rgb(226,183,47)\", \"rgb(198,214,60)\", \"rgb(175,240,91)\", \"rgb(127,246,88)\", \"rgb(82,246,103)\", \"rgb(48,239,130)\", \"rgb(29,223,163)\", \"rgb(26,199,194)\", \"rgb(35,171,216)\", \"rgb(54,140,225)\", \"rgb(76,110,219)\", \"rgb(96,84,200)\"],\n      c = {\n        text: \"\",\n        prefixP: -s,\n        skillI: 0,\n        skillP: 0,\n        direction: \"forward\",\n        delay: a,\n        step: g\n      };\n      i()\n      };\n      binft(document.getElementById('binft'));\n  </script>\n\n<iframe frameborder=\"no\"  border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1355197518&auto=1&height=66\"></iframe>\n\n\n<script>\n<!--浏览器搞笑标题-->\n var OriginTitle = document.title;\n var titleTime;\n document.addEventListener('visibilitychange', function () {\n     if (document.hidden) {\n         $('[rel=\"icon\"]').attr('href', \"/img/trhx2.png\");\n         document.title = 'ヽ(●-`Д´-)ノ你丑你就走！';\n         clearTimeout(titleTime);\n     }\n     else {\n         $('[rel=\"icon\"]').attr('href', \"/img/trhx2.png\");\n         document.title = 'ヾ(Ő∀Ő3)ノ你帅就回来！' + OriginTitle;\n         titleTime = setTimeout(function () {\n             document.title = OriginTitle;\n         }, 2000);\n     }\n });\n</script>\n\n<script type=\"text/javascript\"\ncolor=\"220,220,220\" opacity='0.7' zIndex=\"-2\" count=\"200\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\">\n</script>\n<script>\n/*样式一*/\n(function($){\n    $.fn.snow = function(options){\n    var $flake = $('<div id=\"snowbox\" />').css({'position': 'absolute','z-index':'9999', 'top': '-50px'}).html('&#10052;'),\n    documentHeight  = $(document).height(),\n    documentWidth   = $(document).width(),\n    defaults = {\n        minSize     : 10,\n        maxSize     : 20,\n        newOn       : 1000,\n        flakeColor  : \"#AFDAEF\" /* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */\n    },\n    options = $.extend({}, defaults, options);\n    var interval= setInterval( function(){\n    var startPositionLeft = Math.random() * documentWidth - 100,\n    startOpacity = 0.5 + Math.random(),\n    sizeFlake = options.minSize + Math.random() * options.maxSize,\n    endPositionTop = documentHeight - 200,\n    endPositionLeft = startPositionLeft - 500 + Math.random() * 500,\n    durationFall = documentHeight * 10 + Math.random() * 5000;\n    $flake.clone().appendTo('body').css({\n        left: startPositionLeft,\n        opacity: startOpacity,\n        'font-size': sizeFlake,\n        color: options.flakeColor\n    }).animate({\n        top: endPositionTop,\n        left: endPositionLeft,\n        opacity: 0.2\n    },durationFall,'linear',function(){\n        $(this).remove()\n    });\n    }, options.newOn);\n    };\n})(jQuery);\n$(function(){\n    $.fn.snow({ \n        minSize: 5, /* 定义雪花最小尺寸 */\n        maxSize: 50,/* 定义雪花最大尺寸 */\n        newOn: 300  /* 定义密集程度，数字越小越密集 */\n    });\n});\n</script>\n\n<script>\n\n// 鼠标样式\ndocument.querySelector(\"body\").style.cursor = 'url(https://blog.shanamaid.top/css/images/icon.png),default';\n\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n</script>\n\n<iframe\n  src=\"https://carbon.now.sh/embed?bg=rgba%28171%2C184%2C195%2C0%29&t=seti&wt=none&l=auto&ds=true&dsyoff=16px&dsblur=14px&wc=true&wa=true&pv=34px&ph=48px&ln=false&fl=1&fm=Hack&fs=13px&lh=148%25&si=false&es=2x&wm=false&code=var%2520spiralOrder%2520%253D%2520function%28matrix%29%2520%257B%250A%2520%2520%2520%2520if%2520%28%21matrix.length%2520%257C%257C%2520%21matrix%255B0%255D.length%29%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%255B%255D%253B%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520const%2520rows%2520%253D%2520matrix.length%252C%2520columns%2520%253D%2520matrix%255B0%255D.length%253B%250A%2520%2520%2520%2520const%2520visited%2520%253D%2520new%2520Array%28rows%29.fill%280%29.map%28%28%29%2520%253D%253E%2520new%2520Array%28columns%29.fill%28false%29%29%253B%250A%2520%2520%2520%2520const%2520total%2520%253D%2520rows%2520*%2520columns%253B%250A%2520%2520%2520%2520const%2520order%2520%253D%2520new%2520Array%28total%29.fill%280%29%253B%250A%250A%2520%2520%2520%2520let%2520directionIndex%2520%253D%25200%252C%2520row%2520%253D%25200%252C%2520column%2520%253D%25200%253B%250A%2520%2520%2520%2520const%2520directions%2520%253D%2520%255B%255B0%252C%25201%255D%252C%2520%255B1%252C%25200%255D%252C%2520%255B0%252C%2520-1%255D%252C%2520%255B-1%252C%25200%255D%255D%253B%250A%2520%2520%2520%2520for%2520%28let%2520i%2520%253D%25200%253B%2520i%2520%253C%2520total%253B%2520i%252B%252B%29%2520%257B%2520%250A%2520%2520%2520%2520%2520%2520%2520%2520order%255Bi%255D%2520%253D%2520matrix%255Brow%255D%255Bcolumn%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520visited%255Brow%255D%255Bcolumn%255D%2520%253D%2520true%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520const%2520nextRow%2520%253D%2520row%2520%252B%2520directions%255BdirectionIndex%255D%255B0%255D%252C%2520nextColumn%2520%253D%2520column%2520%252B%2520directions%255BdirectionIndex%255D%255B1%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520%28%21%280%2520%253C%253D%2520nextRow%2520%2526%2526%2520nextRow%2520%253C%2520rows%2520%2526%2526%25200%2520%253C%253D%2520nextColumn%2520%2526%2526%2520nextColumn%2520%253C%2520columns%2520%2526%2526%2520%21%28visited%255BnextRow%255D%255BnextColumn%255D%29%29%29%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520directionIndex%2520%253D%2520%28directionIndex%2520%252B%25201%29%2520%2525%25204%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520row%2520%252B%253D%2520directions%255BdirectionIndex%255D%255B0%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520column%2520%252B%253D%2520directions%255BdirectionIndex%255D%255B1%255D%253B%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520return%2520order%253B%250A%257D%253B\"\n  style=\"width: 1024px; height: 698px; border:0; transform: scale(1); overflow:hidden;\"\n  sandbox=\"allow-scripts allow-same-origin\">\n</iframe>\n\n<p><img src=\"https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/carbon.png?versionId=CAEQIBiBgMC3_7XQwRciIGE1ZjRmY2ZmOTY4NzQ5ODNiMTFkMmQ4ZDc1YTA2YmU2\" alt=\"https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/carbon.png?versionId=CAEQIBiBgMC3_7XQwRciIGE1ZjRmY2ZmOTY4NzQ5ODNiMTFkMmQ4ZDc1YTA2YmU2\"></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://zhuanlan.zhihu.com/p/69211731\">美化教程</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">12321</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">12321</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = <span class=\"number\">12321</span></span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">12321</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EM</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SysUserEM</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;用户ID&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;用户ID&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;名称&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;名称&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;密码&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;密码&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> SPwd &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;手机号&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;手机号&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> SMobile &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;Email&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;Email&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> SEmail &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;状态&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;状态&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserStatus &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;创建日期&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;创建日期&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime DTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Description(<span class=\"meta-string\">&quot;备注&quot;</span>), Category(<span class=\"meta-string\">&quot;系统-用户表&quot;</span>), DisplayName(<span class=\"meta-string\">&quot;备注&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> SNote &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><figcaption><span>/blog/index.html Tyrion Yu tyrionyu-blog</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<div id=\"binft\"></div>\n  <script>\n    var binft = function (r) {\n      function t() {\n        return b[Math.floor(Math.random() * b.length)]\n      }  \n      function e() {\n        return String.fromCharCode(94 * Math.random() + 33)\n      }\n      function n(r) {\n        for (var n = document.createDocumentFragment(), i = 0; r > i; i++) {\n          var l = document.createElement(\"span\");\n          l.textContent = e(), l.style.color = t(), n.appendChild(l)\n        }\n        return n\n      }\n      function i() {\n        var t = o[c.skillI];\n        c.step ? c.step-- : (c.step = g, c.prefixP < l.length ? (c.prefixP >= 0 && (c.text += l[c.prefixP]), c.prefixP++) : \"forward\" === c.direction ? c.skillP < t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = \"backward\", c.delay = a) : c.skillP > 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % o.length, c.direction = \"forward\")), r.textContent = c.text, r.appendChild(n(c.prefixP < l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d)\n      }\n      var l = \"\",\n      o = [\"青青陵上柏，磊磊涧中石。\", \"人生天地间，忽如远行客。\",\"斗酒相娱乐，聊厚不为薄。\", \"驱车策驽马，游戏宛与洛。\",\"洛中何郁郁，冠带自相索。\",\"长衢罗夹巷，王侯多第宅。\",\"两宫遥相望，双阙百余尺。\",\"极宴娱心意，戚戚何所迫？\"].map(function (r) {\n      return r + \"\"\n      }),\n      a = 2,\n      g = 1,\n      s = 5,\n      d = 75,\n      b = [\"rgb(110,64,170)\", \"rgb(150,61,179)\", \"rgb(191,60,175)\", \"rgb(228,65,157)\", \"rgb(254,75,131)\", \"rgb(255,94,99)\", \"rgb(255,120,71)\", \"rgb(251,150,51)\", \"rgb(226,183,47)\", \"rgb(198,214,60)\", \"rgb(175,240,91)\", \"rgb(127,246,88)\", \"rgb(82,246,103)\", \"rgb(48,239,130)\", \"rgb(29,223,163)\", \"rgb(26,199,194)\", \"rgb(35,171,216)\", \"rgb(54,140,225)\", \"rgb(76,110,219)\", \"rgb(96,84,200)\"],\n      c = {\n        text: \"\",\n        prefixP: -s,\n        skillI: 0,\n        skillP: 0,\n        direction: \"forward\",\n        delay: a,\n        step: g\n      };\n      i()\n      };\n      binft(document.getElementById('binft'));\n  </script>\n\n<iframe frameborder=\"no\"  border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1355197518&auto=1&height=66\"></iframe>\n\n\n<script>\n<!--浏览器搞笑标题-->\n var OriginTitle = document.title;\n var titleTime;\n document.addEventListener('visibilitychange', function () {\n     if (document.hidden) {\n         $('[rel=\"icon\"]').attr('href', \"/img/trhx2.png\");\n         document.title = 'ヽ(●-`Д´-)ノ你丑你就走！';\n         clearTimeout(titleTime);\n     }\n     else {\n         $('[rel=\"icon\"]').attr('href', \"/img/trhx2.png\");\n         document.title = 'ヾ(Ő∀Ő3)ノ你帅就回来！' + OriginTitle;\n         titleTime = setTimeout(function () {\n             document.title = OriginTitle;\n         }, 2000);\n     }\n });\n</script>\n\n<script type=\"text/javascript\"\ncolor=\"220,220,220\" opacity='0.7' zIndex=\"-2\" count=\"200\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\">\n</script>\n<script>\n/*样式一*/\n(function($){\n    $.fn.snow = function(options){\n    var $flake = $('<div id=\"snowbox\" />').css({'position': 'absolute','z-index':'9999', 'top': '-50px'}).html('&#10052;'),\n    documentHeight  = $(document).height(),\n    documentWidth   = $(document).width(),\n    defaults = {\n        minSize     : 10,\n        maxSize     : 20,\n        newOn       : 1000,\n        flakeColor  : \"#AFDAEF\" /* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */\n    },\n    options = $.extend({}, defaults, options);\n    var interval= setInterval( function(){\n    var startPositionLeft = Math.random() * documentWidth - 100,\n    startOpacity = 0.5 + Math.random(),\n    sizeFlake = options.minSize + Math.random() * options.maxSize,\n    endPositionTop = documentHeight - 200,\n    endPositionLeft = startPositionLeft - 500 + Math.random() * 500,\n    durationFall = documentHeight * 10 + Math.random() * 5000;\n    $flake.clone().appendTo('body').css({\n        left: startPositionLeft,\n        opacity: startOpacity,\n        'font-size': sizeFlake,\n        color: options.flakeColor\n    }).animate({\n        top: endPositionTop,\n        left: endPositionLeft,\n        opacity: 0.2\n    },durationFall,'linear',function(){\n        $(this).remove()\n    });\n    }, options.newOn);\n    };\n})(jQuery);\n$(function(){\n    $.fn.snow({ \n        minSize: 5, /* 定义雪花最小尺寸 */\n        maxSize: 50,/* 定义雪花最大尺寸 */\n        newOn: 300  /* 定义密集程度，数字越小越密集 */\n    });\n});\n</script>\n\n<script>\n\n// 鼠标样式\ndocument.querySelector(\"body\").style.cursor = 'url(https://blog.shanamaid.top/css/images/icon.png),default';\n\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n</script>\n\n<iframe\n  src=\"https://carbon.now.sh/embed?bg=rgba%28171%2C184%2C195%2C0%29&t=seti&wt=none&l=auto&ds=true&dsyoff=16px&dsblur=14px&wc=true&wa=true&pv=34px&ph=48px&ln=false&fl=1&fm=Hack&fs=13px&lh=148%25&si=false&es=2x&wm=false&code=var%2520spiralOrder%2520%253D%2520function%28matrix%29%2520%257B%250A%2520%2520%2520%2520if%2520%28%21matrix.length%2520%257C%257C%2520%21matrix%255B0%255D.length%29%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%255B%255D%253B%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520const%2520rows%2520%253D%2520matrix.length%252C%2520columns%2520%253D%2520matrix%255B0%255D.length%253B%250A%2520%2520%2520%2520const%2520visited%2520%253D%2520new%2520Array%28rows%29.fill%280%29.map%28%28%29%2520%253D%253E%2520new%2520Array%28columns%29.fill%28false%29%29%253B%250A%2520%2520%2520%2520const%2520total%2520%253D%2520rows%2520*%2520columns%253B%250A%2520%2520%2520%2520const%2520order%2520%253D%2520new%2520Array%28total%29.fill%280%29%253B%250A%250A%2520%2520%2520%2520let%2520directionIndex%2520%253D%25200%252C%2520row%2520%253D%25200%252C%2520column%2520%253D%25200%253B%250A%2520%2520%2520%2520const%2520directions%2520%253D%2520%255B%255B0%252C%25201%255D%252C%2520%255B1%252C%25200%255D%252C%2520%255B0%252C%2520-1%255D%252C%2520%255B-1%252C%25200%255D%255D%253B%250A%2520%2520%2520%2520for%2520%28let%2520i%2520%253D%25200%253B%2520i%2520%253C%2520total%253B%2520i%252B%252B%29%2520%257B%2520%250A%2520%2520%2520%2520%2520%2520%2520%2520order%255Bi%255D%2520%253D%2520matrix%255Brow%255D%255Bcolumn%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520visited%255Brow%255D%255Bcolumn%255D%2520%253D%2520true%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520const%2520nextRow%2520%253D%2520row%2520%252B%2520directions%255BdirectionIndex%255D%255B0%255D%252C%2520nextColumn%2520%253D%2520column%2520%252B%2520directions%255BdirectionIndex%255D%255B1%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520%28%21%280%2520%253C%253D%2520nextRow%2520%2526%2526%2520nextRow%2520%253C%2520rows%2520%2526%2526%25200%2520%253C%253D%2520nextColumn%2520%2526%2526%2520nextColumn%2520%253C%2520columns%2520%2526%2526%2520%21%28visited%255BnextRow%255D%255BnextColumn%255D%29%29%29%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520directionIndex%2520%253D%2520%28directionIndex%2520%252B%25201%29%2520%2525%25204%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520row%2520%252B%253D%2520directions%255BdirectionIndex%255D%255B0%255D%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520column%2520%252B%253D%2520directions%255BdirectionIndex%255D%255B1%255D%253B%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520return%2520order%253B%250A%257D%253B\"\n  style=\"width: 1024px; height: 698px; border:0; transform: scale(1); overflow:hidden;\"\n  sandbox=\"allow-scripts allow-same-origin\">\n</iframe>\n\n<p><img src=\"https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/carbon.png?versionId=CAEQIBiBgMC3_7XQwRciIGE1ZjRmY2ZmOTY4NzQ5ODNiMTFkMmQ4ZDc1YTA2YmU2\" alt=\"https://zhangbaoyuan.oss-cn-shanghai.aliyuncs.com/test/carbon.png?versionId=CAEQIBiBgMC3_7XQwRciIGE1ZjRmY2ZmOTY4NzQ5ODNiMTFkMmQ4ZDc1YTA2YmU2\"></p>"},{"title":"我的第一本算法书","date":"2021-03-14T03:12:47.000Z","_content":"\n# 数据结构\n## 链表\n在链表中，数据一般都是分散存储于内存中的，无需存储在连续的空间内。\n因为数据都是分散存储的，所以如果想要访问数据，只能从第1 个数据开始，顺着指针的指向一一往下访问（这便是顺序访问）。\n\n### 链表的添加和删除\n如果想要添加数据，只需要改变添加位置前后的指针指向就可以，访问数据时，我们需要从链表头部开始查找（线性查找），如果目标数据在链表最后的话，需要的时间就是O(n)。\n数据的删除也一样，只要改变指针的指向就可以，虽然被删除元素本身还存储在内存中，但是不管从哪里都无法访问这个数据，所以也就没有特意去删除它的必要了。今后需要用到其所在的存储空间时，只要用新数据覆盖掉就可以了。\n\n<!-- more -->\n\n## 数组\n数据按顺序存储在内存的连续空间内，由于数据是存储在连续空间内的，所以每个数据的内存地址（在内存上的位置）都可以通过数组下标算出。\n由于数据是存储在连续空间内的，所以每个数据的内存地址（在内存上的位置）都可以通过数组下标算出。\n\n### 数组的添加和删除\n想要向数组中添加新数据时，必须把目标位置后面的数据一个个移开。所以，如果在数组头部添加数据，就需要O(n) 的时间。删除操作同理。\n\n### 数组和链表比较\n在链表和数组中，数据都是线性地排成一列。在链表中访问数据较为复杂，添加和删除数据较为简单；而在数组中访问数据比较简单，添加和删除数据却比较复杂。\n\n## 栈和队列\n### 栈 - LIFO\n与链表和数组一样，栈的数据也是线性排列，但在栈中，添加和删除数据的操作只能在一端进行，访问数据也只能访问到顶端的数据。想要访问中间的数据时，就必须通过出栈操作将目标数据移到栈顶才行。\n\n### 队列 - FIFO\n在栈中，数据的添加和删除都在同一端进行，而在队列中则分别是在两端进行的。队列也不能直接访问位于中间的数据，必须通过出队操作将目标数据变成首位后才能访问。\n\n## 哈希表\n哈希表存储的是由键（key）和值（value）组成的数据。\n在哈希表中，我们可以利用哈希函数快速访问到数组中的目标数据。如果发生哈希冲突，就使用链表进行存储。\n\n## 堆\n堆是一种图的树形结构，在堆的树形结构中，各个顶点被称为“结点”（node），数据就存储在这些结点中。堆中的每个结点最多有两个子结点。\n优先队列是一种数据结构，可以自由添加数据，但取出数据时要从最小值开始按顺序取出，堆主要被用于实现优先队列。\n\n### 向堆中添加元素\n在堆中存储数据时必须遵守这样一条规则：子结点必定大于父结点。因此，最小值被存储在顶端的根结点中。\n往堆中添加数据时，为了遵守这条规则，一般会把新数据放在最下面一行靠左的位置。当最下面一行里没有多余空间时，就再往下另起一行，把数据加在这一行的最左端。\n此时如果父结点大于子结点，则不符合上文提到的规则，因此需要交换父子结点的位置。重复和父节点比较的操作直到数据都符合规则，不再需要交换为止。\n\n### 从堆中取出元素\n从堆中取出数据时，取出的是最上面的数据。这样，堆中就能始终保持取出的数据最小。\n由于最上面的数据被取出，因此堆的结构也需要重新调整。\n取出最末端元素，将其放入顶端，然后和子节点比较，如果子节点小于父节点，则交换两者的位置，重复此操作知道满足堆的条件。\n\n## 二叉查找树\n二叉查找树有两个性质。第一个是每个结点的值均大于其左子树上任意一个结点的值。第二个是每个结点的值均小于其右子树上任意一个结点的值。\n根据这两个性质可以得到以下结论。首先，二叉查找树的最小结点要从顶端开始，往其左下的末端寻找。反过来，二叉查找树的最大结点要从顶端开始，往其右下的末端寻找。\n\n### 二叉查找树添加数据\n从二叉查找树的顶端结点开始寻找添加数字的位置。将想要添加的1与该结点中的值进行比较，小于它则往左移，大于它则往右移。循环此操作即可添加到合适位置。\n\n### 二叉查找树删除数据\n如果需要删除的结点没有子结点，直接删掉该结点即可。\n如果需要删除的结点只有一个子结点，那么先删掉目标结点，然后把子结点移到被删除结点的位置上即可。\n如果需要删除的结点有两个子结点，那么先删掉目标结点，然后在被删除结点的左子树中寻找最大结点，最后将最大结点移到被删除结点的位置上。\n这样一来，就能在满足二叉查找树性质的前提下删除结点了。\n\n### 二叉查找树查找数据\n从二叉查找树的顶端结点开始往下查找。和添加数据时一样，把待查找数据和结点中的值进行比较，小于该结点的值则往左移，大于则往右移。\n\n### 什么是 B树\n二叉查找树中一个结点最多有两个子结点，但我们可以把子结点数扩展为m（m 为预先设定好的常数）。像这种子结点数可以自由设定，并且形状均衡的树便是B 树。\n\n# 排序算法\n## 冒泡排序\n冒泡排序就是重复“从序列右边开始比较相邻两个数字的大小，再根据结果交换两个数字的位置”这一操作的算法。在这个过程中，数字会像泡泡一样，慢慢从右往左“浮”到序列的顶端，所以这个算法才被称为“冒泡排序”。\n\n## 选择排序\n选择排序就是重复“从待排序的数据中寻找最小值，将其与序列最左边的数字进行交换”这一操作的算法。在序列中寻找最小值时使用的是线性查找。\n\n## 插入排序\n插入排序是一种从序列左端开始依次对数据进行排序的算法。在排序过程中，左侧的数据陆续归位，而右侧留下的就是还未被排序的数据。\n插入排序的思路就是从右侧的未排序区域内取出一个数据，将其与左侧数据从后往前比较，若左边的数字更大，就交换这两个数字。重复该操作，直到左边已归位的数字比取出的数字更小，或者取出的数字已经被移到整个序列的最左边为止。\n\n## 堆排序\n首先，在堆中存储所有的数据，并按升序来构建堆。为了排序，需要再从堆中把数据一个个取出来。每次取出新数据则重新构造堆，下次取出的依旧是最小值。\n堆排序的运行时间比之前讲到的冒泡排序、选择排序、插入排序的时间都要短，但由于要使用堆这个相对复杂的数据结构，所以实现起来也较为困难。\n\n## 归并排序\n归并排序算法会把序列分成长度相同的两个子序列，当无法继续往下分时（也就是每个子序列中只有一个数据时），就对子序列进行归并。\n归并指的是把两个排好序的子序列合并成一个有序序列，就是从两个子序列依次取出较小的那个，那么生成的就是排好序的。该操作会一直重复执行，直到所有子序列都归并为一个整体为止。\n\n## 快速排序\n快速排序算法首先会在序列中随机选择一个基准值（pivot），然后将除了基准值以外的数分为“比基准值小的数”和“比基准值大的数”这两个类别，再将其排列成以下形式。\n[比基准值小的数] 基准值 [比基准值大的数]\n接着，对两个“[ ]”中的数据进行排序之后，整体的排序便完成了。对“[ ]”里面的数据进行排序时同样也会使用快速排序。\n快速排序是一种“分治法”。它将原本的问题分成两个子问题（比基准值小的数和比基准值大的数），然后再分别解决这两个问题。\n\n# 数组查找\n## 线性查找\n线性查找是一种在数组中查找数据的算法，与二分查找不同，即便数据没有按顺序存储，也可以应用线性查找。线性查找的操作很简单，只要在数组中从头开始依次往下查找即可。\n线性查找需要从头开始不断地按顺序检查数据，因此在数据量大且目标数据靠后，或者目标数据不存在时，比较的次数就会更多，也更为耗时。\n\n## 二分查找\n二分查找也是一种在数组中查找数据的算法。与线性查找不同，它只能查找已经排好序的数据。二分查找通过比较数组中间的数据与目标数据的大小，可以得知目标数据是在数组的左边还是右边。因此，比较一次就可以把查找范围缩小一半。重复执行该操作就可以找到目标数据，或得出目标数据不存在的结论。\n\n## 线性查找和二分查找比较\n二分查找的时间复杂度为`O(logn)`，与线性查找的`O(n)` 相比速度上得到了指数倍提高（x=log<sub>2</sub>n，则 n=2<sup>x</sup>）。\n但是，二分查找必须建立在数据已经排好序的基础上才能使用，因此添加数据时必须加到合适的位置，这就需要额外耗费维护数组的时间。\n而使用线性查找时，数组中的数据可以是无序的，因此添加数据时也无须顾虑位置，直接把它加在末尾即可，不需要耗费时间。\n综上，具体使用哪种查找方法，可以根据查找和添加两个操作哪个更为频繁来决定。\n\n# 图的搜索\n## 图\n由顶点和连接每对顶点的边所构成的图形就是图。\n举个例子，若将车站作为顶点，将相邻两站用边连接，就能用图来表现地铁的路线了。\n\n### 加权图\n由顶点和边构成的图，而我们还可以给边加上一个值。\n这个值叫作边的“权重”或者“权”，加了权的图被称为“加权图”。没有权的边只能表示两个顶点的连接状态，而有权的边就可以表示顶点之间的“连接程度”。\n举个例子，如果把两个车站间的票价加在边上，就能表现乘车费了。\n\n### 有向图\n当我们想在路线图中表示该路线只能单向行驶时，就可以给边加上箭头，而这样的图就叫作“有向图”。比如网页里的链接也是有方向性的，用有向图来表示就会很方便。与此相对，边上没有箭头的图便是“无向图”。\n和无向图一样，有向图的边也可以加上权重。不过使用有向图还可以设置非对称的权重。\n\n## 广度优先搜索\n广度优先搜索是一种对图进行搜索的算法。假设我们一开始位于某个顶点（即起点），此时并不知道图的整体结构，而我们的目的是从起点开始顺着边搜索，直到到达指定顶点（即终\n点）。在此过程中每走到一个顶点，就会判断一次它是否为终点。广度优先搜索会优先从离起点近的顶点开始搜索。\n广度优先搜索的特征为从起点开始，由近及远进行广泛的搜索。因此，目标顶点离起点越近，搜索结束得就越快。\n\n## 深度优先搜索\n深度优先搜索和广度优先搜索一样，都是对图进行搜索的算法，目的也都是从起点开始搜索直到到达指定顶点（终点）。深度优先搜索会沿着一条路径不断往下搜索直到不能再继续为止，然后再折返，开始搜索下一条候补路径。\n深度优先搜索的特征为沿着一条路径不断往下，一条路走到天黑，进行深度搜索，然后再回头走其他路。\n\n# 安全算法\n## 传输数据时的四个问题\n### 窃听\nA 向B 发送的消息可能会在传输途中被X 偷看。这就是“窃听”。\n\n### 假冒\nA 以为向B 发送了消息，然而B 有可能是X 冒充的；反过来， B 以为从A那里收到了消息，然而A 也有可能是X 冒充的。这种问题就叫作“假冒”。\n\n### 篡改\n即便B 确实收到了A 发送的消息，但也有可能该消息的内容在途中就被X 更改了。这种行为就叫作“篡改”。\n\n### 事后否认\nB 从A 那里收到了消息，但作为消息发送者的A 可能对B 抱有恶意，并在事后声称“这不是我发送的消息”。这种行为便是“事后否认”。\n\n### 解决以上问题的方法\n为了应对第一个问题“窃听”，我们会使用 “加密”技术。\n为了应对第二个问题“假冒”，我们会使用“消息认证码”或“数字签名”技术。\n为了应对第三个问题“篡改”，我们同样会使用“消息认证码”或“数字签名”技术。\n其中“数字签名”技术还可以用于预防第四个问题“事后否认”。\n\n## 加密含义\n对计算机来说，数据就是一串有意义的数字罗列。密文也是数字罗列，只不过它是计算机无法理解的无规律的数字罗列。\n也就是说，加密就是数据经过某种运算后，变成计算机无法理解的数的过程。像这样，将数据变成第三者的计算机无法理解的形式，然后再将其恢复成原本数据的一系列操作就是加密技术。\n\n## 哈希函数\n哈希函数输出的无规律数值，这个数值就是“哈希值”。哈希值虽然是数字，但多用十六进制来表示。他并不是无意义的数字字母组合的字符串，而是十六进制数字。\n\n### 哈希函数的特征\n- 第一个特征是输出的哈希值数据长度不变。\n- 第二个特征是如果输入的数据相同，那么输出的哈希值也必定相同。\n- 第三个特征是即使输入的数据相似，但哪怕它们只有一比特的差别，那么输出的哈希值也会有很大的差异。输入相似的数据并不会导致输出的哈希值也相似。\n- 第四个特征是即使输入的两个数据完全不同，输出的哈希值也有可能是相同的，虽然出现这种情况的概率比较低。这种情况叫作“哈希冲突”。\n- 第五个特征是不可能从哈希值反向推算出原本的数据。输入和输出不可逆这一点和加密有很大不同。\n- 最后一个特征是求哈希值的计算相对容易。\n\n## 加密数据的两种方法\n加密数据的方法可以分为两种：加密和解密都使用相同密钥的“共享密钥加密”和分别使用不同密钥的“公开密钥加密”。\n\n### 共享密钥加密\n共享密钥加密是加密和解密都使用相同密钥的一种加密方式。由于使用的密钥相同，所以这种算法也被称为“对称加密”。\n\n### 共享密钥加密的问题\nA 和 B 通信的过程中，密文可能已经被X 窃听了。\n这里假设A 和B 无法直接沟通，B 不知道加密时使用的是什么密钥。\nA 需要通过某种手段将密钥交给B。和密文一样，A 又在互联网上向B 发送了密钥。B 使用收到的密钥对密文进行解密。\n但是，该密钥也有可能会被X 窃听。这样一来，X 也可以使用密钥对密文进行解密了。\n\n### 公开密钥加密\n公开密钥加密是加密和解密使用不同密钥的一种加密方法。由于使用的密钥不同，所以这种算法也被称为“非对称加密”。加密用的密钥叫作“公开密钥”，解密用的叫作“私有密钥”。\n\n### 公开密钥加密的优点\n在和多人传输数据时，使用公开密钥加密十分方便。不需要为每个发送对象都准备相对应的密钥。需要保密的私有密钥仅由接收方保管，所以安全性也更高。\n如果使用共享密钥加密，密钥的需求数量会随着发送人数的增多而急剧增多。\n\n### 公开密钥加密的问题\n公开密钥加密存在公开密钥可靠性的问题。\nX 想要窃听A 发给B 的数据，于是他也准备了公开密钥PX 和私有密钥SX。\n在B 把公开密钥PB 发给A 的时候,X 把公开密钥PB 替换成自己的公开密钥PX,于是公开密钥PX 传到了A 那里。由于公开密钥无法显示自己是由谁生成的，所以A 不会发现自己收到的公开密钥已经被人替换。\nA 使用公开密钥PX 对数据加密。当A 把想要给B 的密文发送出去后，X 接收了这个密文。接下来，X 用B 生成的公开密钥PB 加密数据。X把密文发送给B，这个密文由B发出的公开密钥PB加密而成，所以B可以用自己的私有密钥SB来解密。\n从收到密文到解密密文都没发生任何问题，因此B也意识不到数据已经被窃听。这种\n通过中途替换公开密钥来窃听数据的攻击方法叫作“中间人攻击”（man-in-the-middle attack）。\n公开密钥的可靠性会出现问题，就是因为A 无法判断收到的公开密钥是否来自B。\n要想解决这个问题，就要用到“数字证书”。\n公开密钥加密还有一个问题，那就是加密和解密都比较耗时，所以这种方法不适用\n于持续发送零碎数据的情况。要想解决这个问题，就要用到“混合加密”。\n\n### 混合加密\n共享密钥加密存在无法安全传输密钥的密钥分配问题，公开密钥加密又存在加密解密速度较慢的问题。结合这两种方法以实现互补的一种加密方法就是混合加密。\n在混合加密中，要用处理速度较快的共享密钥加密对数据进行加密。不过，加密时使用的密钥，则需要用没有密钥分配问题的公开密钥加密进行处理。\n\n## 消息认证码\n消息认证码可以实现“认证”和“检测篡改”这两个功能。密文的内容在传输过程中可能会被篡改，这会导致解密后的内容发生变化，从而产生误会。消息认证码就是可以预防这种情况发生的机制。\n消息认证码就是由密钥和密文生成的值，以下简称为MAC（Message Authentication Code）。\nX 没有计算MAC 的密钥，所以即便他可以篡改MAC，也无法让篡改后的密文变得合理。所以，只要B 计算出MAC，发现密文对应的MAC 与自己算出的不同，就能确认通信过程中发生了篡改。\n\n## 数字签名\n数字签名不仅可以实现消息认证码的认证和检测篡改功能，还可以预防事后否认问题的发生。由于在消息认证码中使用的是共享密钥加密，所以持有密钥的收信人也有可能是消息的发送者，这样是无法预防事后否认行为的。而数字签名是只有发信人才能生成的，因此使用它就可以确定谁是消息的发送者了。\n\n### 数字签名生成流程\n公开密钥加密中，加密使用的是公开密钥P ，解密使用的是私有密钥S 。任何人都可以使用公开密钥对数据进行加密，但只有持有私有密钥的人才能解密数据。然而，数字签名却是恰恰相反的。\n首先由A 准备好需要发送的消息、私有密钥和公开密钥。由消息的发送者来准备这两个密钥，这一点与公开密钥加密有所不同。\nA 将公开密钥发送给B。A 使用私有密钥加密消息。加密后的消息就是数字签名。A 将消息和签名都发送给了B。B 使用公开密钥对密文（签名）进行解密。B 对解密后的消息进行确认，看它是否和收到的消息一致。流程到此结束。\n数字签名使用的是用私有密钥生成签名、用公开密钥验证签名这一机制。\n\n## 数字证书\n“公开密钥加密”和“数字签名”无法保证公开密钥确实来自信息的发送者。因此，就算公开密钥被第三者恶意替换，接收方也不会注意到。不过，如果使用数字证书，就能保证公开密钥的正确性。数字证书由可信赖的认证中心提供。\n","source":"_posts/我的第一本算法书.md","raw":"---\ntitle: 我的第一本算法书\ndate: 2021-03-14 11:12:47\ntags: 算法\n---\n\n# 数据结构\n## 链表\n在链表中，数据一般都是分散存储于内存中的，无需存储在连续的空间内。\n因为数据都是分散存储的，所以如果想要访问数据，只能从第1 个数据开始，顺着指针的指向一一往下访问（这便是顺序访问）。\n\n### 链表的添加和删除\n如果想要添加数据，只需要改变添加位置前后的指针指向就可以，访问数据时，我们需要从链表头部开始查找（线性查找），如果目标数据在链表最后的话，需要的时间就是O(n)。\n数据的删除也一样，只要改变指针的指向就可以，虽然被删除元素本身还存储在内存中，但是不管从哪里都无法访问这个数据，所以也就没有特意去删除它的必要了。今后需要用到其所在的存储空间时，只要用新数据覆盖掉就可以了。\n\n<!-- more -->\n\n## 数组\n数据按顺序存储在内存的连续空间内，由于数据是存储在连续空间内的，所以每个数据的内存地址（在内存上的位置）都可以通过数组下标算出。\n由于数据是存储在连续空间内的，所以每个数据的内存地址（在内存上的位置）都可以通过数组下标算出。\n\n### 数组的添加和删除\n想要向数组中添加新数据时，必须把目标位置后面的数据一个个移开。所以，如果在数组头部添加数据，就需要O(n) 的时间。删除操作同理。\n\n### 数组和链表比较\n在链表和数组中，数据都是线性地排成一列。在链表中访问数据较为复杂，添加和删除数据较为简单；而在数组中访问数据比较简单，添加和删除数据却比较复杂。\n\n## 栈和队列\n### 栈 - LIFO\n与链表和数组一样，栈的数据也是线性排列，但在栈中，添加和删除数据的操作只能在一端进行，访问数据也只能访问到顶端的数据。想要访问中间的数据时，就必须通过出栈操作将目标数据移到栈顶才行。\n\n### 队列 - FIFO\n在栈中，数据的添加和删除都在同一端进行，而在队列中则分别是在两端进行的。队列也不能直接访问位于中间的数据，必须通过出队操作将目标数据变成首位后才能访问。\n\n## 哈希表\n哈希表存储的是由键（key）和值（value）组成的数据。\n在哈希表中，我们可以利用哈希函数快速访问到数组中的目标数据。如果发生哈希冲突，就使用链表进行存储。\n\n## 堆\n堆是一种图的树形结构，在堆的树形结构中，各个顶点被称为“结点”（node），数据就存储在这些结点中。堆中的每个结点最多有两个子结点。\n优先队列是一种数据结构，可以自由添加数据，但取出数据时要从最小值开始按顺序取出，堆主要被用于实现优先队列。\n\n### 向堆中添加元素\n在堆中存储数据时必须遵守这样一条规则：子结点必定大于父结点。因此，最小值被存储在顶端的根结点中。\n往堆中添加数据时，为了遵守这条规则，一般会把新数据放在最下面一行靠左的位置。当最下面一行里没有多余空间时，就再往下另起一行，把数据加在这一行的最左端。\n此时如果父结点大于子结点，则不符合上文提到的规则，因此需要交换父子结点的位置。重复和父节点比较的操作直到数据都符合规则，不再需要交换为止。\n\n### 从堆中取出元素\n从堆中取出数据时，取出的是最上面的数据。这样，堆中就能始终保持取出的数据最小。\n由于最上面的数据被取出，因此堆的结构也需要重新调整。\n取出最末端元素，将其放入顶端，然后和子节点比较，如果子节点小于父节点，则交换两者的位置，重复此操作知道满足堆的条件。\n\n## 二叉查找树\n二叉查找树有两个性质。第一个是每个结点的值均大于其左子树上任意一个结点的值。第二个是每个结点的值均小于其右子树上任意一个结点的值。\n根据这两个性质可以得到以下结论。首先，二叉查找树的最小结点要从顶端开始，往其左下的末端寻找。反过来，二叉查找树的最大结点要从顶端开始，往其右下的末端寻找。\n\n### 二叉查找树添加数据\n从二叉查找树的顶端结点开始寻找添加数字的位置。将想要添加的1与该结点中的值进行比较，小于它则往左移，大于它则往右移。循环此操作即可添加到合适位置。\n\n### 二叉查找树删除数据\n如果需要删除的结点没有子结点，直接删掉该结点即可。\n如果需要删除的结点只有一个子结点，那么先删掉目标结点，然后把子结点移到被删除结点的位置上即可。\n如果需要删除的结点有两个子结点，那么先删掉目标结点，然后在被删除结点的左子树中寻找最大结点，最后将最大结点移到被删除结点的位置上。\n这样一来，就能在满足二叉查找树性质的前提下删除结点了。\n\n### 二叉查找树查找数据\n从二叉查找树的顶端结点开始往下查找。和添加数据时一样，把待查找数据和结点中的值进行比较，小于该结点的值则往左移，大于则往右移。\n\n### 什么是 B树\n二叉查找树中一个结点最多有两个子结点，但我们可以把子结点数扩展为m（m 为预先设定好的常数）。像这种子结点数可以自由设定，并且形状均衡的树便是B 树。\n\n# 排序算法\n## 冒泡排序\n冒泡排序就是重复“从序列右边开始比较相邻两个数字的大小，再根据结果交换两个数字的位置”这一操作的算法。在这个过程中，数字会像泡泡一样，慢慢从右往左“浮”到序列的顶端，所以这个算法才被称为“冒泡排序”。\n\n## 选择排序\n选择排序就是重复“从待排序的数据中寻找最小值，将其与序列最左边的数字进行交换”这一操作的算法。在序列中寻找最小值时使用的是线性查找。\n\n## 插入排序\n插入排序是一种从序列左端开始依次对数据进行排序的算法。在排序过程中，左侧的数据陆续归位，而右侧留下的就是还未被排序的数据。\n插入排序的思路就是从右侧的未排序区域内取出一个数据，将其与左侧数据从后往前比较，若左边的数字更大，就交换这两个数字。重复该操作，直到左边已归位的数字比取出的数字更小，或者取出的数字已经被移到整个序列的最左边为止。\n\n## 堆排序\n首先，在堆中存储所有的数据，并按升序来构建堆。为了排序，需要再从堆中把数据一个个取出来。每次取出新数据则重新构造堆，下次取出的依旧是最小值。\n堆排序的运行时间比之前讲到的冒泡排序、选择排序、插入排序的时间都要短，但由于要使用堆这个相对复杂的数据结构，所以实现起来也较为困难。\n\n## 归并排序\n归并排序算法会把序列分成长度相同的两个子序列，当无法继续往下分时（也就是每个子序列中只有一个数据时），就对子序列进行归并。\n归并指的是把两个排好序的子序列合并成一个有序序列，就是从两个子序列依次取出较小的那个，那么生成的就是排好序的。该操作会一直重复执行，直到所有子序列都归并为一个整体为止。\n\n## 快速排序\n快速排序算法首先会在序列中随机选择一个基准值（pivot），然后将除了基准值以外的数分为“比基准值小的数”和“比基准值大的数”这两个类别，再将其排列成以下形式。\n[比基准值小的数] 基准值 [比基准值大的数]\n接着，对两个“[ ]”中的数据进行排序之后，整体的排序便完成了。对“[ ]”里面的数据进行排序时同样也会使用快速排序。\n快速排序是一种“分治法”。它将原本的问题分成两个子问题（比基准值小的数和比基准值大的数），然后再分别解决这两个问题。\n\n# 数组查找\n## 线性查找\n线性查找是一种在数组中查找数据的算法，与二分查找不同，即便数据没有按顺序存储，也可以应用线性查找。线性查找的操作很简单，只要在数组中从头开始依次往下查找即可。\n线性查找需要从头开始不断地按顺序检查数据，因此在数据量大且目标数据靠后，或者目标数据不存在时，比较的次数就会更多，也更为耗时。\n\n## 二分查找\n二分查找也是一种在数组中查找数据的算法。与线性查找不同，它只能查找已经排好序的数据。二分查找通过比较数组中间的数据与目标数据的大小，可以得知目标数据是在数组的左边还是右边。因此，比较一次就可以把查找范围缩小一半。重复执行该操作就可以找到目标数据，或得出目标数据不存在的结论。\n\n## 线性查找和二分查找比较\n二分查找的时间复杂度为`O(logn)`，与线性查找的`O(n)` 相比速度上得到了指数倍提高（x=log<sub>2</sub>n，则 n=2<sup>x</sup>）。\n但是，二分查找必须建立在数据已经排好序的基础上才能使用，因此添加数据时必须加到合适的位置，这就需要额外耗费维护数组的时间。\n而使用线性查找时，数组中的数据可以是无序的，因此添加数据时也无须顾虑位置，直接把它加在末尾即可，不需要耗费时间。\n综上，具体使用哪种查找方法，可以根据查找和添加两个操作哪个更为频繁来决定。\n\n# 图的搜索\n## 图\n由顶点和连接每对顶点的边所构成的图形就是图。\n举个例子，若将车站作为顶点，将相邻两站用边连接，就能用图来表现地铁的路线了。\n\n### 加权图\n由顶点和边构成的图，而我们还可以给边加上一个值。\n这个值叫作边的“权重”或者“权”，加了权的图被称为“加权图”。没有权的边只能表示两个顶点的连接状态，而有权的边就可以表示顶点之间的“连接程度”。\n举个例子，如果把两个车站间的票价加在边上，就能表现乘车费了。\n\n### 有向图\n当我们想在路线图中表示该路线只能单向行驶时，就可以给边加上箭头，而这样的图就叫作“有向图”。比如网页里的链接也是有方向性的，用有向图来表示就会很方便。与此相对，边上没有箭头的图便是“无向图”。\n和无向图一样，有向图的边也可以加上权重。不过使用有向图还可以设置非对称的权重。\n\n## 广度优先搜索\n广度优先搜索是一种对图进行搜索的算法。假设我们一开始位于某个顶点（即起点），此时并不知道图的整体结构，而我们的目的是从起点开始顺着边搜索，直到到达指定顶点（即终\n点）。在此过程中每走到一个顶点，就会判断一次它是否为终点。广度优先搜索会优先从离起点近的顶点开始搜索。\n广度优先搜索的特征为从起点开始，由近及远进行广泛的搜索。因此，目标顶点离起点越近，搜索结束得就越快。\n\n## 深度优先搜索\n深度优先搜索和广度优先搜索一样，都是对图进行搜索的算法，目的也都是从起点开始搜索直到到达指定顶点（终点）。深度优先搜索会沿着一条路径不断往下搜索直到不能再继续为止，然后再折返，开始搜索下一条候补路径。\n深度优先搜索的特征为沿着一条路径不断往下，一条路走到天黑，进行深度搜索，然后再回头走其他路。\n\n# 安全算法\n## 传输数据时的四个问题\n### 窃听\nA 向B 发送的消息可能会在传输途中被X 偷看。这就是“窃听”。\n\n### 假冒\nA 以为向B 发送了消息，然而B 有可能是X 冒充的；反过来， B 以为从A那里收到了消息，然而A 也有可能是X 冒充的。这种问题就叫作“假冒”。\n\n### 篡改\n即便B 确实收到了A 发送的消息，但也有可能该消息的内容在途中就被X 更改了。这种行为就叫作“篡改”。\n\n### 事后否认\nB 从A 那里收到了消息，但作为消息发送者的A 可能对B 抱有恶意，并在事后声称“这不是我发送的消息”。这种行为便是“事后否认”。\n\n### 解决以上问题的方法\n为了应对第一个问题“窃听”，我们会使用 “加密”技术。\n为了应对第二个问题“假冒”，我们会使用“消息认证码”或“数字签名”技术。\n为了应对第三个问题“篡改”，我们同样会使用“消息认证码”或“数字签名”技术。\n其中“数字签名”技术还可以用于预防第四个问题“事后否认”。\n\n## 加密含义\n对计算机来说，数据就是一串有意义的数字罗列。密文也是数字罗列，只不过它是计算机无法理解的无规律的数字罗列。\n也就是说，加密就是数据经过某种运算后，变成计算机无法理解的数的过程。像这样，将数据变成第三者的计算机无法理解的形式，然后再将其恢复成原本数据的一系列操作就是加密技术。\n\n## 哈希函数\n哈希函数输出的无规律数值，这个数值就是“哈希值”。哈希值虽然是数字，但多用十六进制来表示。他并不是无意义的数字字母组合的字符串，而是十六进制数字。\n\n### 哈希函数的特征\n- 第一个特征是输出的哈希值数据长度不变。\n- 第二个特征是如果输入的数据相同，那么输出的哈希值也必定相同。\n- 第三个特征是即使输入的数据相似，但哪怕它们只有一比特的差别，那么输出的哈希值也会有很大的差异。输入相似的数据并不会导致输出的哈希值也相似。\n- 第四个特征是即使输入的两个数据完全不同，输出的哈希值也有可能是相同的，虽然出现这种情况的概率比较低。这种情况叫作“哈希冲突”。\n- 第五个特征是不可能从哈希值反向推算出原本的数据。输入和输出不可逆这一点和加密有很大不同。\n- 最后一个特征是求哈希值的计算相对容易。\n\n## 加密数据的两种方法\n加密数据的方法可以分为两种：加密和解密都使用相同密钥的“共享密钥加密”和分别使用不同密钥的“公开密钥加密”。\n\n### 共享密钥加密\n共享密钥加密是加密和解密都使用相同密钥的一种加密方式。由于使用的密钥相同，所以这种算法也被称为“对称加密”。\n\n### 共享密钥加密的问题\nA 和 B 通信的过程中，密文可能已经被X 窃听了。\n这里假设A 和B 无法直接沟通，B 不知道加密时使用的是什么密钥。\nA 需要通过某种手段将密钥交给B。和密文一样，A 又在互联网上向B 发送了密钥。B 使用收到的密钥对密文进行解密。\n但是，该密钥也有可能会被X 窃听。这样一来，X 也可以使用密钥对密文进行解密了。\n\n### 公开密钥加密\n公开密钥加密是加密和解密使用不同密钥的一种加密方法。由于使用的密钥不同，所以这种算法也被称为“非对称加密”。加密用的密钥叫作“公开密钥”，解密用的叫作“私有密钥”。\n\n### 公开密钥加密的优点\n在和多人传输数据时，使用公开密钥加密十分方便。不需要为每个发送对象都准备相对应的密钥。需要保密的私有密钥仅由接收方保管，所以安全性也更高。\n如果使用共享密钥加密，密钥的需求数量会随着发送人数的增多而急剧增多。\n\n### 公开密钥加密的问题\n公开密钥加密存在公开密钥可靠性的问题。\nX 想要窃听A 发给B 的数据，于是他也准备了公开密钥PX 和私有密钥SX。\n在B 把公开密钥PB 发给A 的时候,X 把公开密钥PB 替换成自己的公开密钥PX,于是公开密钥PX 传到了A 那里。由于公开密钥无法显示自己是由谁生成的，所以A 不会发现自己收到的公开密钥已经被人替换。\nA 使用公开密钥PX 对数据加密。当A 把想要给B 的密文发送出去后，X 接收了这个密文。接下来，X 用B 生成的公开密钥PB 加密数据。X把密文发送给B，这个密文由B发出的公开密钥PB加密而成，所以B可以用自己的私有密钥SB来解密。\n从收到密文到解密密文都没发生任何问题，因此B也意识不到数据已经被窃听。这种\n通过中途替换公开密钥来窃听数据的攻击方法叫作“中间人攻击”（man-in-the-middle attack）。\n公开密钥的可靠性会出现问题，就是因为A 无法判断收到的公开密钥是否来自B。\n要想解决这个问题，就要用到“数字证书”。\n公开密钥加密还有一个问题，那就是加密和解密都比较耗时，所以这种方法不适用\n于持续发送零碎数据的情况。要想解决这个问题，就要用到“混合加密”。\n\n### 混合加密\n共享密钥加密存在无法安全传输密钥的密钥分配问题，公开密钥加密又存在加密解密速度较慢的问题。结合这两种方法以实现互补的一种加密方法就是混合加密。\n在混合加密中，要用处理速度较快的共享密钥加密对数据进行加密。不过，加密时使用的密钥，则需要用没有密钥分配问题的公开密钥加密进行处理。\n\n## 消息认证码\n消息认证码可以实现“认证”和“检测篡改”这两个功能。密文的内容在传输过程中可能会被篡改，这会导致解密后的内容发生变化，从而产生误会。消息认证码就是可以预防这种情况发生的机制。\n消息认证码就是由密钥和密文生成的值，以下简称为MAC（Message Authentication Code）。\nX 没有计算MAC 的密钥，所以即便他可以篡改MAC，也无法让篡改后的密文变得合理。所以，只要B 计算出MAC，发现密文对应的MAC 与自己算出的不同，就能确认通信过程中发生了篡改。\n\n## 数字签名\n数字签名不仅可以实现消息认证码的认证和检测篡改功能，还可以预防事后否认问题的发生。由于在消息认证码中使用的是共享密钥加密，所以持有密钥的收信人也有可能是消息的发送者，这样是无法预防事后否认行为的。而数字签名是只有发信人才能生成的，因此使用它就可以确定谁是消息的发送者了。\n\n### 数字签名生成流程\n公开密钥加密中，加密使用的是公开密钥P ，解密使用的是私有密钥S 。任何人都可以使用公开密钥对数据进行加密，但只有持有私有密钥的人才能解密数据。然而，数字签名却是恰恰相反的。\n首先由A 准备好需要发送的消息、私有密钥和公开密钥。由消息的发送者来准备这两个密钥，这一点与公开密钥加密有所不同。\nA 将公开密钥发送给B。A 使用私有密钥加密消息。加密后的消息就是数字签名。A 将消息和签名都发送给了B。B 使用公开密钥对密文（签名）进行解密。B 对解密后的消息进行确认，看它是否和收到的消息一致。流程到此结束。\n数字签名使用的是用私有密钥生成签名、用公开密钥验证签名这一机制。\n\n## 数字证书\n“公开密钥加密”和“数字签名”无法保证公开密钥确实来自信息的发送者。因此，就算公开密钥被第三者恶意替换，接收方也不会注意到。不过，如果使用数字证书，就能保证公开密钥的正确性。数字证书由可信赖的认证中心提供。\n","slug":"我的第一本算法书","published":1,"updated":"2021-09-04T09:47:13.422Z","_id":"ckmd8l6az000hzepv3rsj8gfu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>在链表中，数据一般都是分散存储于内存中的，无需存储在连续的空间内。<br>因为数据都是分散存储的，所以如果想要访问数据，只能从第1 个数据开始，顺着指针的指向一一往下访问（这便是顺序访问）。</p>\n<h3 id=\"链表的添加和删除\"><a href=\"#链表的添加和删除\" class=\"headerlink\" title=\"链表的添加和删除\"></a>链表的添加和删除</h3><p>如果想要添加数据，只需要改变添加位置前后的指针指向就可以，访问数据时，我们需要从链表头部开始查找（线性查找），如果目标数据在链表最后的话，需要的时间就是O(n)。<br>数据的删除也一样，只要改变指针的指向就可以，虽然被删除元素本身还存储在内存中，但是不管从哪里都无法访问这个数据，所以也就没有特意去删除它的必要了。今后需要用到其所在的存储空间时，只要用新数据覆盖掉就可以了。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>数据按顺序存储在内存的连续空间内，由于数据是存储在连续空间内的，所以每个数据的内存地址（在内存上的位置）都可以通过数组下标算出。<br>由于数据是存储在连续空间内的，所以每个数据的内存地址（在内存上的位置）都可以通过数组下标算出。</p>\n<h3 id=\"数组的添加和删除\"><a href=\"#数组的添加和删除\" class=\"headerlink\" title=\"数组的添加和删除\"></a>数组的添加和删除</h3><p>想要向数组中添加新数据时，必须把目标位置后面的数据一个个移开。所以，如果在数组头部添加数据，就需要O(n) 的时间。删除操作同理。</p>\n<h3 id=\"数组和链表比较\"><a href=\"#数组和链表比较\" class=\"headerlink\" title=\"数组和链表比较\"></a>数组和链表比较</h3><p>在链表和数组中，数据都是线性地排成一列。在链表中访问数据较为复杂，添加和删除数据较为简单；而在数组中访问数据比较简单，添加和删除数据却比较复杂。</p>\n<h2 id=\"栈和队列\"><a href=\"#栈和队列\" class=\"headerlink\" title=\"栈和队列\"></a>栈和队列</h2><h3 id=\"栈-LIFO\"><a href=\"#栈-LIFO\" class=\"headerlink\" title=\"栈 - LIFO\"></a>栈 - LIFO</h3><p>与链表和数组一样，栈的数据也是线性排列，但在栈中，添加和删除数据的操作只能在一端进行，访问数据也只能访问到顶端的数据。想要访问中间的数据时，就必须通过出栈操作将目标数据移到栈顶才行。</p>\n<h3 id=\"队列-FIFO\"><a href=\"#队列-FIFO\" class=\"headerlink\" title=\"队列 - FIFO\"></a>队列 - FIFO</h3><p>在栈中，数据的添加和删除都在同一端进行，而在队列中则分别是在两端进行的。队列也不能直接访问位于中间的数据，必须通过出队操作将目标数据变成首位后才能访问。</p>\n<h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><p>哈希表存储的是由键（key）和值（value）组成的数据。<br>在哈希表中，我们可以利用哈希函数快速访问到数组中的目标数据。如果发生哈希冲突，就使用链表进行存储。</p>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p>堆是一种图的树形结构，在堆的树形结构中，各个顶点被称为“结点”（node），数据就存储在这些结点中。堆中的每个结点最多有两个子结点。<br>优先队列是一种数据结构，可以自由添加数据，但取出数据时要从最小值开始按顺序取出，堆主要被用于实现优先队列。</p>\n<h3 id=\"向堆中添加元素\"><a href=\"#向堆中添加元素\" class=\"headerlink\" title=\"向堆中添加元素\"></a>向堆中添加元素</h3><p>在堆中存储数据时必须遵守这样一条规则：子结点必定大于父结点。因此，最小值被存储在顶端的根结点中。<br>往堆中添加数据时，为了遵守这条规则，一般会把新数据放在最下面一行靠左的位置。当最下面一行里没有多余空间时，就再往下另起一行，把数据加在这一行的最左端。<br>此时如果父结点大于子结点，则不符合上文提到的规则，因此需要交换父子结点的位置。重复和父节点比较的操作直到数据都符合规则，不再需要交换为止。</p>\n<h3 id=\"从堆中取出元素\"><a href=\"#从堆中取出元素\" class=\"headerlink\" title=\"从堆中取出元素\"></a>从堆中取出元素</h3><p>从堆中取出数据时，取出的是最上面的数据。这样，堆中就能始终保持取出的数据最小。<br>由于最上面的数据被取出，因此堆的结构也需要重新调整。<br>取出最末端元素，将其放入顶端，然后和子节点比较，如果子节点小于父节点，则交换两者的位置，重复此操作知道满足堆的条件。</p>\n<h2 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h2><p>二叉查找树有两个性质。第一个是每个结点的值均大于其左子树上任意一个结点的值。第二个是每个结点的值均小于其右子树上任意一个结点的值。<br>根据这两个性质可以得到以下结论。首先，二叉查找树的最小结点要从顶端开始，往其左下的末端寻找。反过来，二叉查找树的最大结点要从顶端开始，往其右下的末端寻找。</p>\n<h3 id=\"二叉查找树添加数据\"><a href=\"#二叉查找树添加数据\" class=\"headerlink\" title=\"二叉查找树添加数据\"></a>二叉查找树添加数据</h3><p>从二叉查找树的顶端结点开始寻找添加数字的位置。将想要添加的1与该结点中的值进行比较，小于它则往左移，大于它则往右移。循环此操作即可添加到合适位置。</p>\n<h3 id=\"二叉查找树删除数据\"><a href=\"#二叉查找树删除数据\" class=\"headerlink\" title=\"二叉查找树删除数据\"></a>二叉查找树删除数据</h3><p>如果需要删除的结点没有子结点，直接删掉该结点即可。<br>如果需要删除的结点只有一个子结点，那么先删掉目标结点，然后把子结点移到被删除结点的位置上即可。<br>如果需要删除的结点有两个子结点，那么先删掉目标结点，然后在被删除结点的左子树中寻找最大结点，最后将最大结点移到被删除结点的位置上。<br>这样一来，就能在满足二叉查找树性质的前提下删除结点了。</p>\n<h3 id=\"二叉查找树查找数据\"><a href=\"#二叉查找树查找数据\" class=\"headerlink\" title=\"二叉查找树查找数据\"></a>二叉查找树查找数据</h3><p>从二叉查找树的顶端结点开始往下查找。和添加数据时一样，把待查找数据和结点中的值进行比较，小于该结点的值则往左移，大于则往右移。</p>\n<h3 id=\"什么是-B树\"><a href=\"#什么是-B树\" class=\"headerlink\" title=\"什么是 B树\"></a>什么是 B树</h3><p>二叉查找树中一个结点最多有两个子结点，但我们可以把子结点数扩展为m（m 为预先设定好的常数）。像这种子结点数可以自由设定，并且形状均衡的树便是B 树。</p>\n<h1 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h1><h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p>冒泡排序就是重复“从序列右边开始比较相邻两个数字的大小，再根据结果交换两个数字的位置”这一操作的算法。在这个过程中，数字会像泡泡一样，慢慢从右往左“浮”到序列的顶端，所以这个算法才被称为“冒泡排序”。</p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>选择排序就是重复“从待排序的数据中寻找最小值，将其与序列最左边的数字进行交换”这一操作的算法。在序列中寻找最小值时使用的是线性查找。</p>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>插入排序是一种从序列左端开始依次对数据进行排序的算法。在排序过程中，左侧的数据陆续归位，而右侧留下的就是还未被排序的数据。<br>插入排序的思路就是从右侧的未排序区域内取出一个数据，将其与左侧数据从后往前比较，若左边的数字更大，就交换这两个数字。重复该操作，直到左边已归位的数字比取出的数字更小，或者取出的数字已经被移到整个序列的最左边为止。</p>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p>首先，在堆中存储所有的数据，并按升序来构建堆。为了排序，需要再从堆中把数据一个个取出来。每次取出新数据则重新构造堆，下次取出的依旧是最小值。<br>堆排序的运行时间比之前讲到的冒泡排序、选择排序、插入排序的时间都要短，但由于要使用堆这个相对复杂的数据结构，所以实现起来也较为困难。</p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>归并排序算法会把序列分成长度相同的两个子序列，当无法继续往下分时（也就是每个子序列中只有一个数据时），就对子序列进行归并。<br>归并指的是把两个排好序的子序列合并成一个有序序列，就是从两个子序列依次取出较小的那个，那么生成的就是排好序的。该操作会一直重复执行，直到所有子序列都归并为一个整体为止。</p>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序算法首先会在序列中随机选择一个基准值（pivot），然后将除了基准值以外的数分为“比基准值小的数”和“比基准值大的数”这两个类别，再将其排列成以下形式。<br>[比基准值小的数] 基准值 [比基准值大的数]<br>接着，对两个“[ ]”中的数据进行排序之后，整体的排序便完成了。对“[ ]”里面的数据进行排序时同样也会使用快速排序。<br>快速排序是一种“分治法”。它将原本的问题分成两个子问题（比基准值小的数和比基准值大的数），然后再分别解决这两个问题。</p>\n<h1 id=\"数组查找\"><a href=\"#数组查找\" class=\"headerlink\" title=\"数组查找\"></a>数组查找</h1><h2 id=\"线性查找\"><a href=\"#线性查找\" class=\"headerlink\" title=\"线性查找\"></a>线性查找</h2><p>线性查找是一种在数组中查找数据的算法，与二分查找不同，即便数据没有按顺序存储，也可以应用线性查找。线性查找的操作很简单，只要在数组中从头开始依次往下查找即可。<br>线性查找需要从头开始不断地按顺序检查数据，因此在数据量大且目标数据靠后，或者目标数据不存在时，比较的次数就会更多，也更为耗时。</p>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>二分查找也是一种在数组中查找数据的算法。与线性查找不同，它只能查找已经排好序的数据。二分查找通过比较数组中间的数据与目标数据的大小，可以得知目标数据是在数组的左边还是右边。因此，比较一次就可以把查找范围缩小一半。重复执行该操作就可以找到目标数据，或得出目标数据不存在的结论。</p>\n<h2 id=\"线性查找和二分查找比较\"><a href=\"#线性查找和二分查找比较\" class=\"headerlink\" title=\"线性查找和二分查找比较\"></a>线性查找和二分查找比较</h2><p>二分查找的时间复杂度为<code>O(logn)</code>，与线性查找的<code>O(n)</code> 相比速度上得到了指数倍提高（x=log<sub>2</sub>n，则 n=2<sup>x</sup>）。<br>但是，二分查找必须建立在数据已经排好序的基础上才能使用，因此添加数据时必须加到合适的位置，这就需要额外耗费维护数组的时间。<br>而使用线性查找时，数组中的数据可以是无序的，因此添加数据时也无须顾虑位置，直接把它加在末尾即可，不需要耗费时间。<br>综上，具体使用哪种查找方法，可以根据查找和添加两个操作哪个更为频繁来决定。</p>\n<h1 id=\"图的搜索\"><a href=\"#图的搜索\" class=\"headerlink\" title=\"图的搜索\"></a>图的搜索</h1><h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><p>由顶点和连接每对顶点的边所构成的图形就是图。<br>举个例子，若将车站作为顶点，将相邻两站用边连接，就能用图来表现地铁的路线了。</p>\n<h3 id=\"加权图\"><a href=\"#加权图\" class=\"headerlink\" title=\"加权图\"></a>加权图</h3><p>由顶点和边构成的图，而我们还可以给边加上一个值。<br>这个值叫作边的“权重”或者“权”，加了权的图被称为“加权图”。没有权的边只能表示两个顶点的连接状态，而有权的边就可以表示顶点之间的“连接程度”。<br>举个例子，如果把两个车站间的票价加在边上，就能表现乘车费了。</p>\n<h3 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h3><p>当我们想在路线图中表示该路线只能单向行驶时，就可以给边加上箭头，而这样的图就叫作“有向图”。比如网页里的链接也是有方向性的，用有向图来表示就会很方便。与此相对，边上没有箭头的图便是“无向图”。<br>和无向图一样，有向图的边也可以加上权重。不过使用有向图还可以设置非对称的权重。</p>\n<h2 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h2><p>广度优先搜索是一种对图进行搜索的算法。假设我们一开始位于某个顶点（即起点），此时并不知道图的整体结构，而我们的目的是从起点开始顺着边搜索，直到到达指定顶点（即终<br>点）。在此过程中每走到一个顶点，就会判断一次它是否为终点。广度优先搜索会优先从离起点近的顶点开始搜索。<br>广度优先搜索的特征为从起点开始，由近及远进行广泛的搜索。因此，目标顶点离起点越近，搜索结束得就越快。</p>\n<h2 id=\"深度优先搜索\"><a href=\"#深度优先搜索\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h2><p>深度优先搜索和广度优先搜索一样，都是对图进行搜索的算法，目的也都是从起点开始搜索直到到达指定顶点（终点）。深度优先搜索会沿着一条路径不断往下搜索直到不能再继续为止，然后再折返，开始搜索下一条候补路径。<br>深度优先搜索的特征为沿着一条路径不断往下，一条路走到天黑，进行深度搜索，然后再回头走其他路。</p>\n<h1 id=\"安全算法\"><a href=\"#安全算法\" class=\"headerlink\" title=\"安全算法\"></a>安全算法</h1><h2 id=\"传输数据时的四个问题\"><a href=\"#传输数据时的四个问题\" class=\"headerlink\" title=\"传输数据时的四个问题\"></a>传输数据时的四个问题</h2><h3 id=\"窃听\"><a href=\"#窃听\" class=\"headerlink\" title=\"窃听\"></a>窃听</h3><p>A 向B 发送的消息可能会在传输途中被X 偷看。这就是“窃听”。</p>\n<h3 id=\"假冒\"><a href=\"#假冒\" class=\"headerlink\" title=\"假冒\"></a>假冒</h3><p>A 以为向B 发送了消息，然而B 有可能是X 冒充的；反过来， B 以为从A那里收到了消息，然而A 也有可能是X 冒充的。这种问题就叫作“假冒”。</p>\n<h3 id=\"篡改\"><a href=\"#篡改\" class=\"headerlink\" title=\"篡改\"></a>篡改</h3><p>即便B 确实收到了A 发送的消息，但也有可能该消息的内容在途中就被X 更改了。这种行为就叫作“篡改”。</p>\n<h3 id=\"事后否认\"><a href=\"#事后否认\" class=\"headerlink\" title=\"事后否认\"></a>事后否认</h3><p>B 从A 那里收到了消息，但作为消息发送者的A 可能对B 抱有恶意，并在事后声称“这不是我发送的消息”。这种行为便是“事后否认”。</p>\n<h3 id=\"解决以上问题的方法\"><a href=\"#解决以上问题的方法\" class=\"headerlink\" title=\"解决以上问题的方法\"></a>解决以上问题的方法</h3><p>为了应对第一个问题“窃听”，我们会使用 “加密”技术。<br>为了应对第二个问题“假冒”，我们会使用“消息认证码”或“数字签名”技术。<br>为了应对第三个问题“篡改”，我们同样会使用“消息认证码”或“数字签名”技术。<br>其中“数字签名”技术还可以用于预防第四个问题“事后否认”。</p>\n<h2 id=\"加密含义\"><a href=\"#加密含义\" class=\"headerlink\" title=\"加密含义\"></a>加密含义</h2><p>对计算机来说，数据就是一串有意义的数字罗列。密文也是数字罗列，只不过它是计算机无法理解的无规律的数字罗列。<br>也就是说，加密就是数据经过某种运算后，变成计算机无法理解的数的过程。像这样，将数据变成第三者的计算机无法理解的形式，然后再将其恢复成原本数据的一系列操作就是加密技术。</p>\n<h2 id=\"哈希函数\"><a href=\"#哈希函数\" class=\"headerlink\" title=\"哈希函数\"></a>哈希函数</h2><p>哈希函数输出的无规律数值，这个数值就是“哈希值”。哈希值虽然是数字，但多用十六进制来表示。他并不是无意义的数字字母组合的字符串，而是十六进制数字。</p>\n<h3 id=\"哈希函数的特征\"><a href=\"#哈希函数的特征\" class=\"headerlink\" title=\"哈希函数的特征\"></a>哈希函数的特征</h3><ul>\n<li>第一个特征是输出的哈希值数据长度不变。</li>\n<li>第二个特征是如果输入的数据相同，那么输出的哈希值也必定相同。</li>\n<li>第三个特征是即使输入的数据相似，但哪怕它们只有一比特的差别，那么输出的哈希值也会有很大的差异。输入相似的数据并不会导致输出的哈希值也相似。</li>\n<li>第四个特征是即使输入的两个数据完全不同，输出的哈希值也有可能是相同的，虽然出现这种情况的概率比较低。这种情况叫作“哈希冲突”。</li>\n<li>第五个特征是不可能从哈希值反向推算出原本的数据。输入和输出不可逆这一点和加密有很大不同。</li>\n<li>最后一个特征是求哈希值的计算相对容易。</li>\n</ul>\n<h2 id=\"加密数据的两种方法\"><a href=\"#加密数据的两种方法\" class=\"headerlink\" title=\"加密数据的两种方法\"></a>加密数据的两种方法</h2><p>加密数据的方法可以分为两种：加密和解密都使用相同密钥的“共享密钥加密”和分别使用不同密钥的“公开密钥加密”。</p>\n<h3 id=\"共享密钥加密\"><a href=\"#共享密钥加密\" class=\"headerlink\" title=\"共享密钥加密\"></a>共享密钥加密</h3><p>共享密钥加密是加密和解密都使用相同密钥的一种加密方式。由于使用的密钥相同，所以这种算法也被称为“对称加密”。</p>\n<h3 id=\"共享密钥加密的问题\"><a href=\"#共享密钥加密的问题\" class=\"headerlink\" title=\"共享密钥加密的问题\"></a>共享密钥加密的问题</h3><p>A 和 B 通信的过程中，密文可能已经被X 窃听了。<br>这里假设A 和B 无法直接沟通，B 不知道加密时使用的是什么密钥。<br>A 需要通过某种手段将密钥交给B。和密文一样，A 又在互联网上向B 发送了密钥。B 使用收到的密钥对密文进行解密。<br>但是，该密钥也有可能会被X 窃听。这样一来，X 也可以使用密钥对密文进行解密了。</p>\n<h3 id=\"公开密钥加密\"><a href=\"#公开密钥加密\" class=\"headerlink\" title=\"公开密钥加密\"></a>公开密钥加密</h3><p>公开密钥加密是加密和解密使用不同密钥的一种加密方法。由于使用的密钥不同，所以这种算法也被称为“非对称加密”。加密用的密钥叫作“公开密钥”，解密用的叫作“私有密钥”。</p>\n<h3 id=\"公开密钥加密的优点\"><a href=\"#公开密钥加密的优点\" class=\"headerlink\" title=\"公开密钥加密的优点\"></a>公开密钥加密的优点</h3><p>在和多人传输数据时，使用公开密钥加密十分方便。不需要为每个发送对象都准备相对应的密钥。需要保密的私有密钥仅由接收方保管，所以安全性也更高。<br>如果使用共享密钥加密，密钥的需求数量会随着发送人数的增多而急剧增多。</p>\n<h3 id=\"公开密钥加密的问题\"><a href=\"#公开密钥加密的问题\" class=\"headerlink\" title=\"公开密钥加密的问题\"></a>公开密钥加密的问题</h3><p>公开密钥加密存在公开密钥可靠性的问题。<br>X 想要窃听A 发给B 的数据，于是他也准备了公开密钥PX 和私有密钥SX。<br>在B 把公开密钥PB 发给A 的时候,X 把公开密钥PB 替换成自己的公开密钥PX,于是公开密钥PX 传到了A 那里。由于公开密钥无法显示自己是由谁生成的，所以A 不会发现自己收到的公开密钥已经被人替换。<br>A 使用公开密钥PX 对数据加密。当A 把想要给B 的密文发送出去后，X 接收了这个密文。接下来，X 用B 生成的公开密钥PB 加密数据。X把密文发送给B，这个密文由B发出的公开密钥PB加密而成，所以B可以用自己的私有密钥SB来解密。<br>从收到密文到解密密文都没发生任何问题，因此B也意识不到数据已经被窃听。这种<br>通过中途替换公开密钥来窃听数据的攻击方法叫作“中间人攻击”（man-in-the-middle attack）。<br>公开密钥的可靠性会出现问题，就是因为A 无法判断收到的公开密钥是否来自B。<br>要想解决这个问题，就要用到“数字证书”。<br>公开密钥加密还有一个问题，那就是加密和解密都比较耗时，所以这种方法不适用<br>于持续发送零碎数据的情况。要想解决这个问题，就要用到“混合加密”。</p>\n<h3 id=\"混合加密\"><a href=\"#混合加密\" class=\"headerlink\" title=\"混合加密\"></a>混合加密</h3><p>共享密钥加密存在无法安全传输密钥的密钥分配问题，公开密钥加密又存在加密解密速度较慢的问题。结合这两种方法以实现互补的一种加密方法就是混合加密。<br>在混合加密中，要用处理速度较快的共享密钥加密对数据进行加密。不过，加密时使用的密钥，则需要用没有密钥分配问题的公开密钥加密进行处理。</p>\n<h2 id=\"消息认证码\"><a href=\"#消息认证码\" class=\"headerlink\" title=\"消息认证码\"></a>消息认证码</h2><p>消息认证码可以实现“认证”和“检测篡改”这两个功能。密文的内容在传输过程中可能会被篡改，这会导致解密后的内容发生变化，从而产生误会。消息认证码就是可以预防这种情况发生的机制。<br>消息认证码就是由密钥和密文生成的值，以下简称为MAC（Message Authentication Code）。<br>X 没有计算MAC 的密钥，所以即便他可以篡改MAC，也无法让篡改后的密文变得合理。所以，只要B 计算出MAC，发现密文对应的MAC 与自己算出的不同，就能确认通信过程中发生了篡改。</p>\n<h2 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h2><p>数字签名不仅可以实现消息认证码的认证和检测篡改功能，还可以预防事后否认问题的发生。由于在消息认证码中使用的是共享密钥加密，所以持有密钥的收信人也有可能是消息的发送者，这样是无法预防事后否认行为的。而数字签名是只有发信人才能生成的，因此使用它就可以确定谁是消息的发送者了。</p>\n<h3 id=\"数字签名生成流程\"><a href=\"#数字签名生成流程\" class=\"headerlink\" title=\"数字签名生成流程\"></a>数字签名生成流程</h3><p>公开密钥加密中，加密使用的是公开密钥P ，解密使用的是私有密钥S 。任何人都可以使用公开密钥对数据进行加密，但只有持有私有密钥的人才能解密数据。然而，数字签名却是恰恰相反的。<br>首先由A 准备好需要发送的消息、私有密钥和公开密钥。由消息的发送者来准备这两个密钥，这一点与公开密钥加密有所不同。<br>A 将公开密钥发送给B。A 使用私有密钥加密消息。加密后的消息就是数字签名。A 将消息和签名都发送给了B。B 使用公开密钥对密文（签名）进行解密。B 对解密后的消息进行确认，看它是否和收到的消息一致。流程到此结束。<br>数字签名使用的是用私有密钥生成签名、用公开密钥验证签名这一机制。</p>\n<h2 id=\"数字证书\"><a href=\"#数字证书\" class=\"headerlink\" title=\"数字证书\"></a>数字证书</h2><p>“公开密钥加密”和“数字签名”无法保证公开密钥确实来自信息的发送者。因此，就算公开密钥被第三者恶意替换，接收方也不会注意到。不过，如果使用数字证书，就能保证公开密钥的正确性。数字证书由可信赖的认证中心提供。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>在链表中，数据一般都是分散存储于内存中的，无需存储在连续的空间内。<br>因为数据都是分散存储的，所以如果想要访问数据，只能从第1 个数据开始，顺着指针的指向一一往下访问（这便是顺序访问）。</p>\n<h3 id=\"链表的添加和删除\"><a href=\"#链表的添加和删除\" class=\"headerlink\" title=\"链表的添加和删除\"></a>链表的添加和删除</h3><p>如果想要添加数据，只需要改变添加位置前后的指针指向就可以，访问数据时，我们需要从链表头部开始查找（线性查找），如果目标数据在链表最后的话，需要的时间就是O(n)。<br>数据的删除也一样，只要改变指针的指向就可以，虽然被删除元素本身还存储在内存中，但是不管从哪里都无法访问这个数据，所以也就没有特意去删除它的必要了。今后需要用到其所在的存储空间时，只要用新数据覆盖掉就可以了。</p>","more":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>数据按顺序存储在内存的连续空间内，由于数据是存储在连续空间内的，所以每个数据的内存地址（在内存上的位置）都可以通过数组下标算出。<br>由于数据是存储在连续空间内的，所以每个数据的内存地址（在内存上的位置）都可以通过数组下标算出。</p>\n<h3 id=\"数组的添加和删除\"><a href=\"#数组的添加和删除\" class=\"headerlink\" title=\"数组的添加和删除\"></a>数组的添加和删除</h3><p>想要向数组中添加新数据时，必须把目标位置后面的数据一个个移开。所以，如果在数组头部添加数据，就需要O(n) 的时间。删除操作同理。</p>\n<h3 id=\"数组和链表比较\"><a href=\"#数组和链表比较\" class=\"headerlink\" title=\"数组和链表比较\"></a>数组和链表比较</h3><p>在链表和数组中，数据都是线性地排成一列。在链表中访问数据较为复杂，添加和删除数据较为简单；而在数组中访问数据比较简单，添加和删除数据却比较复杂。</p>\n<h2 id=\"栈和队列\"><a href=\"#栈和队列\" class=\"headerlink\" title=\"栈和队列\"></a>栈和队列</h2><h3 id=\"栈-LIFO\"><a href=\"#栈-LIFO\" class=\"headerlink\" title=\"栈 - LIFO\"></a>栈 - LIFO</h3><p>与链表和数组一样，栈的数据也是线性排列，但在栈中，添加和删除数据的操作只能在一端进行，访问数据也只能访问到顶端的数据。想要访问中间的数据时，就必须通过出栈操作将目标数据移到栈顶才行。</p>\n<h3 id=\"队列-FIFO\"><a href=\"#队列-FIFO\" class=\"headerlink\" title=\"队列 - FIFO\"></a>队列 - FIFO</h3><p>在栈中，数据的添加和删除都在同一端进行，而在队列中则分别是在两端进行的。队列也不能直接访问位于中间的数据，必须通过出队操作将目标数据变成首位后才能访问。</p>\n<h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><p>哈希表存储的是由键（key）和值（value）组成的数据。<br>在哈希表中，我们可以利用哈希函数快速访问到数组中的目标数据。如果发生哈希冲突，就使用链表进行存储。</p>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p>堆是一种图的树形结构，在堆的树形结构中，各个顶点被称为“结点”（node），数据就存储在这些结点中。堆中的每个结点最多有两个子结点。<br>优先队列是一种数据结构，可以自由添加数据，但取出数据时要从最小值开始按顺序取出，堆主要被用于实现优先队列。</p>\n<h3 id=\"向堆中添加元素\"><a href=\"#向堆中添加元素\" class=\"headerlink\" title=\"向堆中添加元素\"></a>向堆中添加元素</h3><p>在堆中存储数据时必须遵守这样一条规则：子结点必定大于父结点。因此，最小值被存储在顶端的根结点中。<br>往堆中添加数据时，为了遵守这条规则，一般会把新数据放在最下面一行靠左的位置。当最下面一行里没有多余空间时，就再往下另起一行，把数据加在这一行的最左端。<br>此时如果父结点大于子结点，则不符合上文提到的规则，因此需要交换父子结点的位置。重复和父节点比较的操作直到数据都符合规则，不再需要交换为止。</p>\n<h3 id=\"从堆中取出元素\"><a href=\"#从堆中取出元素\" class=\"headerlink\" title=\"从堆中取出元素\"></a>从堆中取出元素</h3><p>从堆中取出数据时，取出的是最上面的数据。这样，堆中就能始终保持取出的数据最小。<br>由于最上面的数据被取出，因此堆的结构也需要重新调整。<br>取出最末端元素，将其放入顶端，然后和子节点比较，如果子节点小于父节点，则交换两者的位置，重复此操作知道满足堆的条件。</p>\n<h2 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h2><p>二叉查找树有两个性质。第一个是每个结点的值均大于其左子树上任意一个结点的值。第二个是每个结点的值均小于其右子树上任意一个结点的值。<br>根据这两个性质可以得到以下结论。首先，二叉查找树的最小结点要从顶端开始，往其左下的末端寻找。反过来，二叉查找树的最大结点要从顶端开始，往其右下的末端寻找。</p>\n<h3 id=\"二叉查找树添加数据\"><a href=\"#二叉查找树添加数据\" class=\"headerlink\" title=\"二叉查找树添加数据\"></a>二叉查找树添加数据</h3><p>从二叉查找树的顶端结点开始寻找添加数字的位置。将想要添加的1与该结点中的值进行比较，小于它则往左移，大于它则往右移。循环此操作即可添加到合适位置。</p>\n<h3 id=\"二叉查找树删除数据\"><a href=\"#二叉查找树删除数据\" class=\"headerlink\" title=\"二叉查找树删除数据\"></a>二叉查找树删除数据</h3><p>如果需要删除的结点没有子结点，直接删掉该结点即可。<br>如果需要删除的结点只有一个子结点，那么先删掉目标结点，然后把子结点移到被删除结点的位置上即可。<br>如果需要删除的结点有两个子结点，那么先删掉目标结点，然后在被删除结点的左子树中寻找最大结点，最后将最大结点移到被删除结点的位置上。<br>这样一来，就能在满足二叉查找树性质的前提下删除结点了。</p>\n<h3 id=\"二叉查找树查找数据\"><a href=\"#二叉查找树查找数据\" class=\"headerlink\" title=\"二叉查找树查找数据\"></a>二叉查找树查找数据</h3><p>从二叉查找树的顶端结点开始往下查找。和添加数据时一样，把待查找数据和结点中的值进行比较，小于该结点的值则往左移，大于则往右移。</p>\n<h3 id=\"什么是-B树\"><a href=\"#什么是-B树\" class=\"headerlink\" title=\"什么是 B树\"></a>什么是 B树</h3><p>二叉查找树中一个结点最多有两个子结点，但我们可以把子结点数扩展为m（m 为预先设定好的常数）。像这种子结点数可以自由设定，并且形状均衡的树便是B 树。</p>\n<h1 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h1><h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p>冒泡排序就是重复“从序列右边开始比较相邻两个数字的大小，再根据结果交换两个数字的位置”这一操作的算法。在这个过程中，数字会像泡泡一样，慢慢从右往左“浮”到序列的顶端，所以这个算法才被称为“冒泡排序”。</p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>选择排序就是重复“从待排序的数据中寻找最小值，将其与序列最左边的数字进行交换”这一操作的算法。在序列中寻找最小值时使用的是线性查找。</p>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>插入排序是一种从序列左端开始依次对数据进行排序的算法。在排序过程中，左侧的数据陆续归位，而右侧留下的就是还未被排序的数据。<br>插入排序的思路就是从右侧的未排序区域内取出一个数据，将其与左侧数据从后往前比较，若左边的数字更大，就交换这两个数字。重复该操作，直到左边已归位的数字比取出的数字更小，或者取出的数字已经被移到整个序列的最左边为止。</p>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p>首先，在堆中存储所有的数据，并按升序来构建堆。为了排序，需要再从堆中把数据一个个取出来。每次取出新数据则重新构造堆，下次取出的依旧是最小值。<br>堆排序的运行时间比之前讲到的冒泡排序、选择排序、插入排序的时间都要短，但由于要使用堆这个相对复杂的数据结构，所以实现起来也较为困难。</p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>归并排序算法会把序列分成长度相同的两个子序列，当无法继续往下分时（也就是每个子序列中只有一个数据时），就对子序列进行归并。<br>归并指的是把两个排好序的子序列合并成一个有序序列，就是从两个子序列依次取出较小的那个，那么生成的就是排好序的。该操作会一直重复执行，直到所有子序列都归并为一个整体为止。</p>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序算法首先会在序列中随机选择一个基准值（pivot），然后将除了基准值以外的数分为“比基准值小的数”和“比基准值大的数”这两个类别，再将其排列成以下形式。<br>[比基准值小的数] 基准值 [比基准值大的数]<br>接着，对两个“[ ]”中的数据进行排序之后，整体的排序便完成了。对“[ ]”里面的数据进行排序时同样也会使用快速排序。<br>快速排序是一种“分治法”。它将原本的问题分成两个子问题（比基准值小的数和比基准值大的数），然后再分别解决这两个问题。</p>\n<h1 id=\"数组查找\"><a href=\"#数组查找\" class=\"headerlink\" title=\"数组查找\"></a>数组查找</h1><h2 id=\"线性查找\"><a href=\"#线性查找\" class=\"headerlink\" title=\"线性查找\"></a>线性查找</h2><p>线性查找是一种在数组中查找数据的算法，与二分查找不同，即便数据没有按顺序存储，也可以应用线性查找。线性查找的操作很简单，只要在数组中从头开始依次往下查找即可。<br>线性查找需要从头开始不断地按顺序检查数据，因此在数据量大且目标数据靠后，或者目标数据不存在时，比较的次数就会更多，也更为耗时。</p>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>二分查找也是一种在数组中查找数据的算法。与线性查找不同，它只能查找已经排好序的数据。二分查找通过比较数组中间的数据与目标数据的大小，可以得知目标数据是在数组的左边还是右边。因此，比较一次就可以把查找范围缩小一半。重复执行该操作就可以找到目标数据，或得出目标数据不存在的结论。</p>\n<h2 id=\"线性查找和二分查找比较\"><a href=\"#线性查找和二分查找比较\" class=\"headerlink\" title=\"线性查找和二分查找比较\"></a>线性查找和二分查找比较</h2><p>二分查找的时间复杂度为<code>O(logn)</code>，与线性查找的<code>O(n)</code> 相比速度上得到了指数倍提高（x=log<sub>2</sub>n，则 n=2<sup>x</sup>）。<br>但是，二分查找必须建立在数据已经排好序的基础上才能使用，因此添加数据时必须加到合适的位置，这就需要额外耗费维护数组的时间。<br>而使用线性查找时，数组中的数据可以是无序的，因此添加数据时也无须顾虑位置，直接把它加在末尾即可，不需要耗费时间。<br>综上，具体使用哪种查找方法，可以根据查找和添加两个操作哪个更为频繁来决定。</p>\n<h1 id=\"图的搜索\"><a href=\"#图的搜索\" class=\"headerlink\" title=\"图的搜索\"></a>图的搜索</h1><h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><p>由顶点和连接每对顶点的边所构成的图形就是图。<br>举个例子，若将车站作为顶点，将相邻两站用边连接，就能用图来表现地铁的路线了。</p>\n<h3 id=\"加权图\"><a href=\"#加权图\" class=\"headerlink\" title=\"加权图\"></a>加权图</h3><p>由顶点和边构成的图，而我们还可以给边加上一个值。<br>这个值叫作边的“权重”或者“权”，加了权的图被称为“加权图”。没有权的边只能表示两个顶点的连接状态，而有权的边就可以表示顶点之间的“连接程度”。<br>举个例子，如果把两个车站间的票价加在边上，就能表现乘车费了。</p>\n<h3 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h3><p>当我们想在路线图中表示该路线只能单向行驶时，就可以给边加上箭头，而这样的图就叫作“有向图”。比如网页里的链接也是有方向性的，用有向图来表示就会很方便。与此相对，边上没有箭头的图便是“无向图”。<br>和无向图一样，有向图的边也可以加上权重。不过使用有向图还可以设置非对称的权重。</p>\n<h2 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h2><p>广度优先搜索是一种对图进行搜索的算法。假设我们一开始位于某个顶点（即起点），此时并不知道图的整体结构，而我们的目的是从起点开始顺着边搜索，直到到达指定顶点（即终<br>点）。在此过程中每走到一个顶点，就会判断一次它是否为终点。广度优先搜索会优先从离起点近的顶点开始搜索。<br>广度优先搜索的特征为从起点开始，由近及远进行广泛的搜索。因此，目标顶点离起点越近，搜索结束得就越快。</p>\n<h2 id=\"深度优先搜索\"><a href=\"#深度优先搜索\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h2><p>深度优先搜索和广度优先搜索一样，都是对图进行搜索的算法，目的也都是从起点开始搜索直到到达指定顶点（终点）。深度优先搜索会沿着一条路径不断往下搜索直到不能再继续为止，然后再折返，开始搜索下一条候补路径。<br>深度优先搜索的特征为沿着一条路径不断往下，一条路走到天黑，进行深度搜索，然后再回头走其他路。</p>\n<h1 id=\"安全算法\"><a href=\"#安全算法\" class=\"headerlink\" title=\"安全算法\"></a>安全算法</h1><h2 id=\"传输数据时的四个问题\"><a href=\"#传输数据时的四个问题\" class=\"headerlink\" title=\"传输数据时的四个问题\"></a>传输数据时的四个问题</h2><h3 id=\"窃听\"><a href=\"#窃听\" class=\"headerlink\" title=\"窃听\"></a>窃听</h3><p>A 向B 发送的消息可能会在传输途中被X 偷看。这就是“窃听”。</p>\n<h3 id=\"假冒\"><a href=\"#假冒\" class=\"headerlink\" title=\"假冒\"></a>假冒</h3><p>A 以为向B 发送了消息，然而B 有可能是X 冒充的；反过来， B 以为从A那里收到了消息，然而A 也有可能是X 冒充的。这种问题就叫作“假冒”。</p>\n<h3 id=\"篡改\"><a href=\"#篡改\" class=\"headerlink\" title=\"篡改\"></a>篡改</h3><p>即便B 确实收到了A 发送的消息，但也有可能该消息的内容在途中就被X 更改了。这种行为就叫作“篡改”。</p>\n<h3 id=\"事后否认\"><a href=\"#事后否认\" class=\"headerlink\" title=\"事后否认\"></a>事后否认</h3><p>B 从A 那里收到了消息，但作为消息发送者的A 可能对B 抱有恶意，并在事后声称“这不是我发送的消息”。这种行为便是“事后否认”。</p>\n<h3 id=\"解决以上问题的方法\"><a href=\"#解决以上问题的方法\" class=\"headerlink\" title=\"解决以上问题的方法\"></a>解决以上问题的方法</h3><p>为了应对第一个问题“窃听”，我们会使用 “加密”技术。<br>为了应对第二个问题“假冒”，我们会使用“消息认证码”或“数字签名”技术。<br>为了应对第三个问题“篡改”，我们同样会使用“消息认证码”或“数字签名”技术。<br>其中“数字签名”技术还可以用于预防第四个问题“事后否认”。</p>\n<h2 id=\"加密含义\"><a href=\"#加密含义\" class=\"headerlink\" title=\"加密含义\"></a>加密含义</h2><p>对计算机来说，数据就是一串有意义的数字罗列。密文也是数字罗列，只不过它是计算机无法理解的无规律的数字罗列。<br>也就是说，加密就是数据经过某种运算后，变成计算机无法理解的数的过程。像这样，将数据变成第三者的计算机无法理解的形式，然后再将其恢复成原本数据的一系列操作就是加密技术。</p>\n<h2 id=\"哈希函数\"><a href=\"#哈希函数\" class=\"headerlink\" title=\"哈希函数\"></a>哈希函数</h2><p>哈希函数输出的无规律数值，这个数值就是“哈希值”。哈希值虽然是数字，但多用十六进制来表示。他并不是无意义的数字字母组合的字符串，而是十六进制数字。</p>\n<h3 id=\"哈希函数的特征\"><a href=\"#哈希函数的特征\" class=\"headerlink\" title=\"哈希函数的特征\"></a>哈希函数的特征</h3><ul>\n<li>第一个特征是输出的哈希值数据长度不变。</li>\n<li>第二个特征是如果输入的数据相同，那么输出的哈希值也必定相同。</li>\n<li>第三个特征是即使输入的数据相似，但哪怕它们只有一比特的差别，那么输出的哈希值也会有很大的差异。输入相似的数据并不会导致输出的哈希值也相似。</li>\n<li>第四个特征是即使输入的两个数据完全不同，输出的哈希值也有可能是相同的，虽然出现这种情况的概率比较低。这种情况叫作“哈希冲突”。</li>\n<li>第五个特征是不可能从哈希值反向推算出原本的数据。输入和输出不可逆这一点和加密有很大不同。</li>\n<li>最后一个特征是求哈希值的计算相对容易。</li>\n</ul>\n<h2 id=\"加密数据的两种方法\"><a href=\"#加密数据的两种方法\" class=\"headerlink\" title=\"加密数据的两种方法\"></a>加密数据的两种方法</h2><p>加密数据的方法可以分为两种：加密和解密都使用相同密钥的“共享密钥加密”和分别使用不同密钥的“公开密钥加密”。</p>\n<h3 id=\"共享密钥加密\"><a href=\"#共享密钥加密\" class=\"headerlink\" title=\"共享密钥加密\"></a>共享密钥加密</h3><p>共享密钥加密是加密和解密都使用相同密钥的一种加密方式。由于使用的密钥相同，所以这种算法也被称为“对称加密”。</p>\n<h3 id=\"共享密钥加密的问题\"><a href=\"#共享密钥加密的问题\" class=\"headerlink\" title=\"共享密钥加密的问题\"></a>共享密钥加密的问题</h3><p>A 和 B 通信的过程中，密文可能已经被X 窃听了。<br>这里假设A 和B 无法直接沟通，B 不知道加密时使用的是什么密钥。<br>A 需要通过某种手段将密钥交给B。和密文一样，A 又在互联网上向B 发送了密钥。B 使用收到的密钥对密文进行解密。<br>但是，该密钥也有可能会被X 窃听。这样一来，X 也可以使用密钥对密文进行解密了。</p>\n<h3 id=\"公开密钥加密\"><a href=\"#公开密钥加密\" class=\"headerlink\" title=\"公开密钥加密\"></a>公开密钥加密</h3><p>公开密钥加密是加密和解密使用不同密钥的一种加密方法。由于使用的密钥不同，所以这种算法也被称为“非对称加密”。加密用的密钥叫作“公开密钥”，解密用的叫作“私有密钥”。</p>\n<h3 id=\"公开密钥加密的优点\"><a href=\"#公开密钥加密的优点\" class=\"headerlink\" title=\"公开密钥加密的优点\"></a>公开密钥加密的优点</h3><p>在和多人传输数据时，使用公开密钥加密十分方便。不需要为每个发送对象都准备相对应的密钥。需要保密的私有密钥仅由接收方保管，所以安全性也更高。<br>如果使用共享密钥加密，密钥的需求数量会随着发送人数的增多而急剧增多。</p>\n<h3 id=\"公开密钥加密的问题\"><a href=\"#公开密钥加密的问题\" class=\"headerlink\" title=\"公开密钥加密的问题\"></a>公开密钥加密的问题</h3><p>公开密钥加密存在公开密钥可靠性的问题。<br>X 想要窃听A 发给B 的数据，于是他也准备了公开密钥PX 和私有密钥SX。<br>在B 把公开密钥PB 发给A 的时候,X 把公开密钥PB 替换成自己的公开密钥PX,于是公开密钥PX 传到了A 那里。由于公开密钥无法显示自己是由谁生成的，所以A 不会发现自己收到的公开密钥已经被人替换。<br>A 使用公开密钥PX 对数据加密。当A 把想要给B 的密文发送出去后，X 接收了这个密文。接下来，X 用B 生成的公开密钥PB 加密数据。X把密文发送给B，这个密文由B发出的公开密钥PB加密而成，所以B可以用自己的私有密钥SB来解密。<br>从收到密文到解密密文都没发生任何问题，因此B也意识不到数据已经被窃听。这种<br>通过中途替换公开密钥来窃听数据的攻击方法叫作“中间人攻击”（man-in-the-middle attack）。<br>公开密钥的可靠性会出现问题，就是因为A 无法判断收到的公开密钥是否来自B。<br>要想解决这个问题，就要用到“数字证书”。<br>公开密钥加密还有一个问题，那就是加密和解密都比较耗时，所以这种方法不适用<br>于持续发送零碎数据的情况。要想解决这个问题，就要用到“混合加密”。</p>\n<h3 id=\"混合加密\"><a href=\"#混合加密\" class=\"headerlink\" title=\"混合加密\"></a>混合加密</h3><p>共享密钥加密存在无法安全传输密钥的密钥分配问题，公开密钥加密又存在加密解密速度较慢的问题。结合这两种方法以实现互补的一种加密方法就是混合加密。<br>在混合加密中，要用处理速度较快的共享密钥加密对数据进行加密。不过，加密时使用的密钥，则需要用没有密钥分配问题的公开密钥加密进行处理。</p>\n<h2 id=\"消息认证码\"><a href=\"#消息认证码\" class=\"headerlink\" title=\"消息认证码\"></a>消息认证码</h2><p>消息认证码可以实现“认证”和“检测篡改”这两个功能。密文的内容在传输过程中可能会被篡改，这会导致解密后的内容发生变化，从而产生误会。消息认证码就是可以预防这种情况发生的机制。<br>消息认证码就是由密钥和密文生成的值，以下简称为MAC（Message Authentication Code）。<br>X 没有计算MAC 的密钥，所以即便他可以篡改MAC，也无法让篡改后的密文变得合理。所以，只要B 计算出MAC，发现密文对应的MAC 与自己算出的不同，就能确认通信过程中发生了篡改。</p>\n<h2 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h2><p>数字签名不仅可以实现消息认证码的认证和检测篡改功能，还可以预防事后否认问题的发生。由于在消息认证码中使用的是共享密钥加密，所以持有密钥的收信人也有可能是消息的发送者，这样是无法预防事后否认行为的。而数字签名是只有发信人才能生成的，因此使用它就可以确定谁是消息的发送者了。</p>\n<h3 id=\"数字签名生成流程\"><a href=\"#数字签名生成流程\" class=\"headerlink\" title=\"数字签名生成流程\"></a>数字签名生成流程</h3><p>公开密钥加密中，加密使用的是公开密钥P ，解密使用的是私有密钥S 。任何人都可以使用公开密钥对数据进行加密，但只有持有私有密钥的人才能解密数据。然而，数字签名却是恰恰相反的。<br>首先由A 准备好需要发送的消息、私有密钥和公开密钥。由消息的发送者来准备这两个密钥，这一点与公开密钥加密有所不同。<br>A 将公开密钥发送给B。A 使用私有密钥加密消息。加密后的消息就是数字签名。A 将消息和签名都发送给了B。B 使用公开密钥对密文（签名）进行解密。B 对解密后的消息进行确认，看它是否和收到的消息一致。流程到此结束。<br>数字签名使用的是用私有密钥生成签名、用公开密钥验证签名这一机制。</p>\n<h2 id=\"数字证书\"><a href=\"#数字证书\" class=\"headerlink\" title=\"数字证书\"></a>数字证书</h2><p>“公开密钥加密”和“数字签名”无法保证公开密钥确实来自信息的发送者。因此，就算公开密钥被第三者恶意替换，接收方也不会注意到。不过，如果使用数字证书，就能保证公开密钥的正确性。数字证书由可信赖的认证中心提供。</p>"},{"title":"解决FTP因windows防火墙拦截的方法.md","date":"2021-03-11T02:42:46.000Z","_content":"\n## 解决FTP因windows防火墙拦截的方法\n- 打开 控制面板 -> 防火墙 -> 允许应用或功能通过windows防火墙\n- 点击 允许其他应用\n- 添加 C:\\Windows\\System32\\svchost.exe\n- 再次连接即可\n","source":"_posts/解决FTP因windows防火墙拦截的方法-md.md","raw":"---\ntitle: 解决FTP因windows防火墙拦截的方法.md\ndate: 2021-03-11 10:42:46\ntags:\n---\n\n## 解决FTP因windows防火墙拦截的方法\n- 打开 控制面板 -> 防火墙 -> 允许应用或功能通过windows防火墙\n- 点击 允许其他应用\n- 添加 C:\\Windows\\System32\\svchost.exe\n- 再次连接即可\n","slug":"解决FTP因windows防火墙拦截的方法-md","published":1,"updated":"2021-09-04T09:47:13.423Z","_id":"ckmd8l6b0000izepvcdyy0g2i","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"解决FTP因windows防火墙拦截的方法\"><a href=\"#解决FTP因windows防火墙拦截的方法\" class=\"headerlink\" title=\"解决FTP因windows防火墙拦截的方法\"></a>解决FTP因windows防火墙拦截的方法</h2><ul>\n<li>打开 控制面板 -&gt; 防火墙 -&gt; 允许应用或功能通过windows防火墙</li>\n<li>点击 允许其他应用</li>\n<li>添加 C:\\Windows\\System32\\svchost.exe</li>\n<li>再次连接即可</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"解决FTP因windows防火墙拦截的方法\"><a href=\"#解决FTP因windows防火墙拦截的方法\" class=\"headerlink\" title=\"解决FTP因windows防火墙拦截的方法\"></a>解决FTP因windows防火墙拦截的方法</h2><ul>\n<li>打开 控制面板 -&gt; 防火墙 -&gt; 允许应用或功能通过windows防火墙</li>\n<li>点击 允许其他应用</li>\n<li>添加 C:\\Windows\\System32\\svchost.exe</li>\n<li>再次连接即可</li>\n</ul>\n"},{"title":"图解-HTTP","date":"2021-03-14T03:16:26.000Z","_content":"\n### 名词解析\n- HTTP: HyperText Transfer Protocol，超文本传输协议\n- TCP: Transmission Control Protocol，传输控制协议\n- UDP: User Data Protocol，用户数据报协议\n- IP: Internet Protocol，网际协议\n- FTP: File Transfer Protocol，文件传输协议\n- DNS: Domain Name System，域名系统\n- URI: Uniform Resource Identifier，统一资源标识符\n- URL: Uniform Resource Locator，统一资源定位符\n\n<!-- more -->\n\n### TCP/IP 协议共有几层\n- 应用层：FTP、DNS、HTTP等\n- 传输层：TCP、UDP\n- 网络层：IP\n- 数据链路层\n\n### 什么是字节流服务\n按层次分，TCP 位于传输层，提供可靠的字节流服务。\n所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。\n\n### URI 和 URL 的区别\nURI 用字符串标识某一互联网资源，而 URL 表示资源的地点（互联网上所处的位置）。可见 URL 是 URI 的子集。\n假设所有的Html文档都有唯一的编号，记作html:xxxxx，xxxxx是一串数字，即Html文档的身份证号码，这个能唯一标识一个Html文档，那么这个号码就是一个URI。而URL则通过描述是哪个主机上哪个路径上的文件来唯一确定一个资源，也就是定位的方式来实现的URI。\n\n### 请求报文和响应报文的构成\n请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。\n响应报文基本上由协议版本、状态码、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。\n\n### 持久连接的好处\n在 HTTP/1.1 中，所有的连接默认都是持久连接。\n持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。\n另外，减少开销的那部分时间，使HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相应提高了。\n\n### 什么是管线化\n持久连接使得多数请求以管线化（pipelining）方式发送成为可能。\n从前发送请求后需等待并收到响应，才能发送下一个请求。\n管线化技术出现后，不用等待响应亦可直接发送下一个请求。\n这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待响应了。\n\n### 为什么要使用 Cookie\nHTTP 是一种不保存状态，即无状态协议。\nHTTP 协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。也就是说，无法根据之前的状态进行本次的请求处理。\n无状态协议当然也有它的优点。由于不必保存状态，自然可减少服务器的 CPU 及内存资源的消耗。更快地处理大量事务，确保协议的可伸缩性。\n为了实现期望的保持状态功能，于是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。\n\n### Cookie 是如何实现的\nCookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。\nCookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。\n服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。\n\n### 编码传输数据的优缺点\nHTTP 在传输数据时可以按照数据原貌直接传输，但也可以在传输过程中通过编码提升传输速率。\n通过在传输时编码，能有效地处理大量的访问请求。\n但是，编码的操作需要计算机来完成，因此会消耗更多的 CPU 等资源。\n\n### 报文主体和实体主体的区别\n通常，报文主体等于实体主体。\n只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。\n压缩传输时，报文主体为实体主体压缩后的密文。\n分块传输时，报文主体为实体主体分割后的一小块。\n多部分对象集合传输时，报文主体包含多个实体主体。\n\n### 什么是范围请求\n以前，如果下载过程中遇到网络中断的情况，那就必须重头开始。\n为了解决上述问题，需要一种可恢复的机制。所谓恢复是指能从之前下载中断处恢复下载。\n要实现该功能需要指定下载的实体范围。像这样，指定范围发送的请求叫做范围请求（Range Request）。\n\n### 什么是内容协商机制\n内容协商技术有以下 3 种类型。\n- 服务器驱动协商（Server-driven Negotiation）\n由服务器端进行内容协商。以请求的首部字段为参考，在服务器端自动处理。\n- 客户端驱动协商（Agent-driven Negotiation）\n由客户端进行内容协商的方式。用户从浏览器显示的可选项列表中手动选择。还可以利用 JavaScript 脚本在 Web 页面上自动进行上述选择。比如按 OS 的类型或浏览器类型，自行切换成 PC 版页面或手机版页面。\n- 透明协商（Transparent Negotiation）\n是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法。\n\n### 状态码的类别\n| |类别|原因短语|\n|---|---|---|\n|1XX |Informational（信息性状态码） |接收的请求正在处理\n|2XX |Success（成功状态码） |请求正常处理完毕\n|3XX |Redirection（重定向状态码） |需要进行附加操作以完成请求\n|4XX |Client Error（客户端错误状态码） |服务器无法处理请求\n|5XX |Server Error（服务器错误状态码） |服务器处理请求出错\n\n\n### 常用状态码\n**2XX——表明请求被正常处理了**\n1、200 OK：请求已正常处理。\n2、204 No Content：请求处理成功，但没有任何资源可以返回给客户端，一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。\n3、206 Partial Content：是对资源某一部分的请求，该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。响应报文中包含由Content-Range指定范围的实体内容。\n**3XX——表明浏览器需要执行某些特殊的处理以正确处理请求**\n4、301 Moved Permanently：永久性重定向，请求的资源已经被分配了新的URI，以后应使用资源现在所指的URI。\n5、302 Found：临时性重定向。和301相似，但302代表的资源不是永久性移动，只是临时性性质的。换句话说，已移动的资源对应的URI将来还有可能发生改变。\n6、303 See Other：资源的URI已更新，你是否能临时按新的URI访问。该状态码表示由于请求对应的资源存在着另一个URL，应使用GET方法定向获取请求的资源。303状态码和302状态码有着相同的功能，但303状态码明确表示客户端应当采用GET方法获取资源，这点与302状态码有区别。\n当301,302,303响应状态码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送。\n7、304 Not Modified：资源已找到，但未符合条件请求。该状态码表示客户端发送附带条件的请求时（采用GET方法的请求报文中包含If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since中任一首部）服务端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回304.。\n8、307 Temporary Redirect：临时重定向。与302有相同的含义。\n**4XX——表明客户端是发生错误的原因所在。**\n9、400 Bad Request：服务器端无法理解客户端发送的请求，请求报文中可能存在语法错误。\n10、401 Unauthorized：该状态码表示发送的请求需要有通过HTTP认证（BASIC认证，DIGEST认证）的认证信息。\n11、403 Forbidden：不允许访问那个资源。该状态码表明对请求资源的访问被服务器拒绝了。（权限，未授权IP等）\n12、404 Not Found：服务器上没有请求的资源。路径错误等。\n**5XX——服务器本身发生错误**\n13、500 Internal Server Error：貌似内部资源出故障了。该状态码表明服务器端在执行请求时发生了错误。也有可能是web应用存在bug或某些临时故障。\n14、503 Service Unavailable：抱歉，我现在正在忙着。该状态码表明服务器暂时处于超负载或正在停机维护，现在无法处理请求。\n\n### 代理、网关、隧道的特点\n代理: 代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。每次通过代理服务器转发请求或响应时，都会追加写入via首部信息。因此，在转发时会附加via首部字段以标记经过的主机信息。\n网关: 网关的工作机制和代理十分相似,而网关能使通信线路上的服务器提供非 HTTP 协议服务。即网关可以将经过的http请求转化为其他协议通信类型。\n隧道: 隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。隧道本身不会去解析http请求，也就是在传输的时候可以保证数据的原样性。\n\n\n### HTTP 的缺点\n- 通信使用明文（不加密），内容可能会被窃听\n- 不验证通信方的身份，因此有可能遭遇伪装\n- 无法证明报文的完整性，所以有可能已遭篡改\n\n\n### TCP/IP 是可能被窃听的网络\n按 TCP/IP 协议族的工作机制，通信内容在所有的通信线路上都有可能遭到窥视。\n即使已经过加密处理的通信，也会被窥视到通信内容，这点和未加密的通信是相同的。只是说如果通信经过加密，就有可能让人无法破解报文信息的含义，但加密处理后的报文信息本身还是会被看到的。\n\n### 什么是 HTTPS\nHTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或 TLS（Transport Layer Security，安全层传输协议）的组合使用，加密 HTTP 的通信内容。\n用 SSL 建立安全通信线路之后，就可以在这条线路上进行 HTTP 通信了。与 SSL 组合使用的 HTTP 被称为 HTTPS（HTTP Secure，超文本传输安全协议）或 HTTP over SSL。\nHTTPS 并非是一种新协议，HTTP 加上加密处理和认证以及完整性保护后即是 HTTPS。\n\n### 什么是共享密钥加密\n加密和解密同用一个密钥的方式称为共享密钥加密（Common key crypto system），也被叫做对称密钥加密。\n\n### 什么是公开密钥加密\n公开密钥加密使用一对非对称的密钥。一把叫做私有密钥（private key），另一把叫做公开密钥（public key）。顾名思\n义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。\n使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。\n\n### 共享密钥的缺点\n在互联网上转发密钥时，如果通信被监听那么密钥就可会落入攻击者之手，同时也就失去了加密的意义。另外还得设法安全地保管接收到的密钥。\n\n### 公开密钥的缺点\n公开密钥加密与共享密钥加密相比，其处理速度要慢。\n无法证明公开密钥本身就是货真价实的公开密钥。比如，正准备和某台服务器建立公开密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或许在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。--- 所以需要证书进行判断。\n\n### HTTPS 采用什么加密机制\nHTTPS 采用共享密钥加密和公开密钥加密两者并用的混合加密机制。\n在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式。\n\n### 证书的作用\n接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，客户端便可明确两件事：\n一，认证服务器的公开密钥的是真实有效的数字证书认证机构。二，服务器的公开密钥是值得信赖的。\n\n### SSL 速度慢的原因\nHTTPS 也存在一些问题，那就是当使用 SSL 时，它的处理速度会变慢。\nSSL 的慢分两种。一种是指通信慢。另一种是指由于大量消耗 CPU 及内存等资源，导致处理速度变慢。\n通信慢的原因：除去和 TCP 连接、发送 HTTP 请求 • 响应以外，还必须进行 SSL 通信，因此整体上处理通信量不可避免会增加。\n处理慢的原因：在服务器和客户端都需要进行加密和解密的运算处理。因此从结果上讲，比起 HTTP 会更多地消耗服务器和客户端的硬件资源，导致负载增强。\n\n### 为何所有的 Web 网站不一直使用 HTTPS\n一种原因是 SSL 速度变慢，负载增强，不用是为了节约资源。\n另一种原因就是购买证书太贵了。\n\n### Session 管理及 Cookie 应用\n但鉴于 HTTP 是无状态协议，之前已认证成功的用户状态无法通过协议层面保存下来。即，无法实现状态管理，因此即使当该用户下一次继续访问，也无法区分他与其他的用户。于是我们会使用 Cookie 来管理 Session，以弥补 HTTP 协议中不存在的状态管理功能。\n\n### Session 管理及 Cookie 状态管理的过程\n- 步骤 1： \n客户端把用户 ID 和密码等登录信息放入报文的实体部分，通常是以 POST 方法把请求发送给服务器。而这时，会使用 HTTPS 通信来进行 HTML 表单画面的显示和用户输入数据的发送。\n- 步骤 2： \n服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份认证，然后把用户的认证状态与 Session ID 绑定后记录在服务器端。向客户端返回响应时，会在首部字段 Set-Cookie 内写入 Session\nID（如 PHPSESSID=028a8c…）。\n- 步骤 3： \n客户端接收到从服务器端发来的 Session ID 后，会将其作为 Cookie 保存在本地。下次向服务器发送请求时，浏览器会自动发送 Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。 \n\n### HTTP 的瓶颈有哪些\n- 一条连接上只可发送一个请求。\n- 请求只能从客户端开始。客户端不可以接收除响应以外的指令。\n- 请求 / 响应首部未经压缩就发送。首部信息越多延迟越大。\n- 发送冗长的首部，每次互相发送相同的首部造成的浪费较多。\n- 可任意选择数据压缩格式。非强制压缩发送。\n\n### 什么是 SPDY\nSPDY 开发目标旨在解决 HTTP 的性能瓶颈，缩短 Web 页面的加载时间。\nSPDY 没有完全改写 HTTP 协议，而是在 TCP/IP 的应用层与运输层之间通过新加会话层的形式运作。\n同时，考虑到安全性问题，SPDY 规定通信中使用 SSL。\nSPDY 以会话层的形式加入，控制对数据的流动，但还是采用 HTTP 建立通信连接。因此，可照常使用 HTTP 的 GET 和 POST 等方法、Cookie 以及 HTTP 报文等。\n\n### 使用 SPDY 后，HTTP 协议额外获得的功能\n- 多路复用流\n通过单一的 TCP 连接，可以无限制处理多个 HTTP 请求。所有请求的处理都在一条 TCP 连接上完成，因此 TCP 的处理效率得到提高。\n- 赋予请求优先级\nSPDY 不仅可以无限制地并发处理请求，还可以给请求逐个分配优先级顺序。这样主要是为了在发送多个请求时，解决因带宽低而导致响应变慢的问题。\n- 压缩 HTTP 首部\n压缩 HTTP 请求和响应的首部。这样一来，通信产生的数据包数量和发送的字节数就更少了。\n- 推送功能\n支持服务器主动向客户端推送数据的功能。这样，服务器可直接发送数据，而不必等待客户端的请求。\n- 服务器提示功能\n服务器可以主动提示客户端请求所需的资源。由于在客户端发现资源之前就可以获知资源的存在，因此在资源已缓存等情况下，可以避免发送不必要的请求。\n\n### SPDY 的局限性\nSPDY 基本上只是将单个域名（ IP 地址）的通信多路复用，所以当一个 Web 网站上使用多个域名下的资源，改善效果就会受到限制。\nSPDY 的确是一种可有效消除 HTTP 瓶颈的技术，但很多 Web 网站存在的问题并非仅仅是由 HTTP 瓶颈所导致。对 Web 本身的速度提升，还应该从其他可细致钻研的地方入手。\n\n### WebSocket 协议的主要特点\n- 推送功能\n支持由服务器向客户端推送数据的推送功能。这样，服务器可直接发送数据，而不必等待客户端的请求。\n- 减少通信量\n只要建立起 WebSocket 连接，就希望一直保持连接状态。和 HTTP 相比，不但每次连接时的总开销减少，而且由于 WebSocket 的首部信息很小，通信量也相应减少了。\n\n### 针对 Web 应用的攻击模式\n**主动攻击**\n主动攻击（active attack）是指攻击者通过直接访问 Web 应用，把攻击代码传入的攻击模式。\n由于该模式是直接针对服务器上的资源进行攻击，因此攻击者需要能够访问到那些资源。\n主动攻击模式里具有代表性的攻击是 SQL 注入攻击和 OS 命令注入攻击。\n\n**被动攻击**\n被动攻击（passive attack）是指利用圈套策略执行攻击代码的攻击模式。在被动攻击过程中，攻击者不直接对目标 Web 应用访问发起攻击，而是诱使用户触发已设置好的陷阱。\n被动攻击模式中具有代表性的攻击是跨站脚本攻击和跨站点请求伪造。\n\n### 什么是跨站脚本攻击\n跨站脚本攻击（Cross-Site Scripting，XSS）是指通过存在安全漏洞的Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击，属于被动攻击。\n动态创建的 HTML 部分有可能隐藏着安全漏洞。就这样，攻击者编写脚本设下陷阱，用户在自己的浏览器上运行时，一\n不小心就会受到被动攻击。\n\n### 跨站脚本攻击攻击哪些方面\n- 利用虚假输入表单骗取用户个人信息。\n- 利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求。\n- 显示伪造的文章或图片。\n\n### 什么是 SQL 注入攻击\nSQL 注入（SQL Injection）是指针对 Web 应用使用的数据库，通过运行非法的 SQL 而产生的攻击。\n该安全隐患有可能引发极大的威胁，有时会直接导致个人信息及机密信息的泄露。\n\n### SQL 注入攻击攻击哪些方面\n- 非法查看或篡改数据库内的数据\n- 规避认证\n- 执行和数据库服务器业务关联的程序等\n\n### 什么是跨站点请求伪造\n跨站点请求伪造（Cross-Site Request Forgeries，CSRF）攻击是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。\n\n### 跨站点请求伪造攻击哪些方面\n- 利用已通过认证的用户权限更新设定信息等\n- 利用已通过认证的用户权限购买商品\n- 利用已通过认证的用户权限在留言板上发表言论\n\n### 什么是 DOS 攻击\nDoS 攻击（Denial of Service attack）是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。DoS 攻击的对象不仅限于 Web 网站，还包括网络设备及服务器等。\n主要有以下两种 DoS 攻击方式。\n大量请求：集中利用访问请求造成资源过载，资源用尽的同时，实际上服务也就呈停止状态。\n攻击漏洞：通过攻击安全漏洞使服务停止。\n","source":"_posts/图解-HTTP.md","raw":"---\ntitle: 图解-HTTP \ndate: 2021-03-14 11:16:26\ntags: HTTP\n---\n\n### 名词解析\n- HTTP: HyperText Transfer Protocol，超文本传输协议\n- TCP: Transmission Control Protocol，传输控制协议\n- UDP: User Data Protocol，用户数据报协议\n- IP: Internet Protocol，网际协议\n- FTP: File Transfer Protocol，文件传输协议\n- DNS: Domain Name System，域名系统\n- URI: Uniform Resource Identifier，统一资源标识符\n- URL: Uniform Resource Locator，统一资源定位符\n\n<!-- more -->\n\n### TCP/IP 协议共有几层\n- 应用层：FTP、DNS、HTTP等\n- 传输层：TCP、UDP\n- 网络层：IP\n- 数据链路层\n\n### 什么是字节流服务\n按层次分，TCP 位于传输层，提供可靠的字节流服务。\n所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。\n\n### URI 和 URL 的区别\nURI 用字符串标识某一互联网资源，而 URL 表示资源的地点（互联网上所处的位置）。可见 URL 是 URI 的子集。\n假设所有的Html文档都有唯一的编号，记作html:xxxxx，xxxxx是一串数字，即Html文档的身份证号码，这个能唯一标识一个Html文档，那么这个号码就是一个URI。而URL则通过描述是哪个主机上哪个路径上的文件来唯一确定一个资源，也就是定位的方式来实现的URI。\n\n### 请求报文和响应报文的构成\n请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。\n响应报文基本上由协议版本、状态码、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。\n\n### 持久连接的好处\n在 HTTP/1.1 中，所有的连接默认都是持久连接。\n持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。\n另外，减少开销的那部分时间，使HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相应提高了。\n\n### 什么是管线化\n持久连接使得多数请求以管线化（pipelining）方式发送成为可能。\n从前发送请求后需等待并收到响应，才能发送下一个请求。\n管线化技术出现后，不用等待响应亦可直接发送下一个请求。\n这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待响应了。\n\n### 为什么要使用 Cookie\nHTTP 是一种不保存状态，即无状态协议。\nHTTP 协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。也就是说，无法根据之前的状态进行本次的请求处理。\n无状态协议当然也有它的优点。由于不必保存状态，自然可减少服务器的 CPU 及内存资源的消耗。更快地处理大量事务，确保协议的可伸缩性。\n为了实现期望的保持状态功能，于是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。\n\n### Cookie 是如何实现的\nCookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。\nCookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。\n服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。\n\n### 编码传输数据的优缺点\nHTTP 在传输数据时可以按照数据原貌直接传输，但也可以在传输过程中通过编码提升传输速率。\n通过在传输时编码，能有效地处理大量的访问请求。\n但是，编码的操作需要计算机来完成，因此会消耗更多的 CPU 等资源。\n\n### 报文主体和实体主体的区别\n通常，报文主体等于实体主体。\n只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。\n压缩传输时，报文主体为实体主体压缩后的密文。\n分块传输时，报文主体为实体主体分割后的一小块。\n多部分对象集合传输时，报文主体包含多个实体主体。\n\n### 什么是范围请求\n以前，如果下载过程中遇到网络中断的情况，那就必须重头开始。\n为了解决上述问题，需要一种可恢复的机制。所谓恢复是指能从之前下载中断处恢复下载。\n要实现该功能需要指定下载的实体范围。像这样，指定范围发送的请求叫做范围请求（Range Request）。\n\n### 什么是内容协商机制\n内容协商技术有以下 3 种类型。\n- 服务器驱动协商（Server-driven Negotiation）\n由服务器端进行内容协商。以请求的首部字段为参考，在服务器端自动处理。\n- 客户端驱动协商（Agent-driven Negotiation）\n由客户端进行内容协商的方式。用户从浏览器显示的可选项列表中手动选择。还可以利用 JavaScript 脚本在 Web 页面上自动进行上述选择。比如按 OS 的类型或浏览器类型，自行切换成 PC 版页面或手机版页面。\n- 透明协商（Transparent Negotiation）\n是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法。\n\n### 状态码的类别\n| |类别|原因短语|\n|---|---|---|\n|1XX |Informational（信息性状态码） |接收的请求正在处理\n|2XX |Success（成功状态码） |请求正常处理完毕\n|3XX |Redirection（重定向状态码） |需要进行附加操作以完成请求\n|4XX |Client Error（客户端错误状态码） |服务器无法处理请求\n|5XX |Server Error（服务器错误状态码） |服务器处理请求出错\n\n\n### 常用状态码\n**2XX——表明请求被正常处理了**\n1、200 OK：请求已正常处理。\n2、204 No Content：请求处理成功，但没有任何资源可以返回给客户端，一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。\n3、206 Partial Content：是对资源某一部分的请求，该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。响应报文中包含由Content-Range指定范围的实体内容。\n**3XX——表明浏览器需要执行某些特殊的处理以正确处理请求**\n4、301 Moved Permanently：永久性重定向，请求的资源已经被分配了新的URI，以后应使用资源现在所指的URI。\n5、302 Found：临时性重定向。和301相似，但302代表的资源不是永久性移动，只是临时性性质的。换句话说，已移动的资源对应的URI将来还有可能发生改变。\n6、303 See Other：资源的URI已更新，你是否能临时按新的URI访问。该状态码表示由于请求对应的资源存在着另一个URL，应使用GET方法定向获取请求的资源。303状态码和302状态码有着相同的功能，但303状态码明确表示客户端应当采用GET方法获取资源，这点与302状态码有区别。\n当301,302,303响应状态码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送。\n7、304 Not Modified：资源已找到，但未符合条件请求。该状态码表示客户端发送附带条件的请求时（采用GET方法的请求报文中包含If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since中任一首部）服务端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回304.。\n8、307 Temporary Redirect：临时重定向。与302有相同的含义。\n**4XX——表明客户端是发生错误的原因所在。**\n9、400 Bad Request：服务器端无法理解客户端发送的请求，请求报文中可能存在语法错误。\n10、401 Unauthorized：该状态码表示发送的请求需要有通过HTTP认证（BASIC认证，DIGEST认证）的认证信息。\n11、403 Forbidden：不允许访问那个资源。该状态码表明对请求资源的访问被服务器拒绝了。（权限，未授权IP等）\n12、404 Not Found：服务器上没有请求的资源。路径错误等。\n**5XX——服务器本身发生错误**\n13、500 Internal Server Error：貌似内部资源出故障了。该状态码表明服务器端在执行请求时发生了错误。也有可能是web应用存在bug或某些临时故障。\n14、503 Service Unavailable：抱歉，我现在正在忙着。该状态码表明服务器暂时处于超负载或正在停机维护，现在无法处理请求。\n\n### 代理、网关、隧道的特点\n代理: 代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。每次通过代理服务器转发请求或响应时，都会追加写入via首部信息。因此，在转发时会附加via首部字段以标记经过的主机信息。\n网关: 网关的工作机制和代理十分相似,而网关能使通信线路上的服务器提供非 HTTP 协议服务。即网关可以将经过的http请求转化为其他协议通信类型。\n隧道: 隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。隧道本身不会去解析http请求，也就是在传输的时候可以保证数据的原样性。\n\n\n### HTTP 的缺点\n- 通信使用明文（不加密），内容可能会被窃听\n- 不验证通信方的身份，因此有可能遭遇伪装\n- 无法证明报文的完整性，所以有可能已遭篡改\n\n\n### TCP/IP 是可能被窃听的网络\n按 TCP/IP 协议族的工作机制，通信内容在所有的通信线路上都有可能遭到窥视。\n即使已经过加密处理的通信，也会被窥视到通信内容，这点和未加密的通信是相同的。只是说如果通信经过加密，就有可能让人无法破解报文信息的含义，但加密处理后的报文信息本身还是会被看到的。\n\n### 什么是 HTTPS\nHTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或 TLS（Transport Layer Security，安全层传输协议）的组合使用，加密 HTTP 的通信内容。\n用 SSL 建立安全通信线路之后，就可以在这条线路上进行 HTTP 通信了。与 SSL 组合使用的 HTTP 被称为 HTTPS（HTTP Secure，超文本传输安全协议）或 HTTP over SSL。\nHTTPS 并非是一种新协议，HTTP 加上加密处理和认证以及完整性保护后即是 HTTPS。\n\n### 什么是共享密钥加密\n加密和解密同用一个密钥的方式称为共享密钥加密（Common key crypto system），也被叫做对称密钥加密。\n\n### 什么是公开密钥加密\n公开密钥加密使用一对非对称的密钥。一把叫做私有密钥（private key），另一把叫做公开密钥（public key）。顾名思\n义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。\n使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。\n\n### 共享密钥的缺点\n在互联网上转发密钥时，如果通信被监听那么密钥就可会落入攻击者之手，同时也就失去了加密的意义。另外还得设法安全地保管接收到的密钥。\n\n### 公开密钥的缺点\n公开密钥加密与共享密钥加密相比，其处理速度要慢。\n无法证明公开密钥本身就是货真价实的公开密钥。比如，正准备和某台服务器建立公开密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或许在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。--- 所以需要证书进行判断。\n\n### HTTPS 采用什么加密机制\nHTTPS 采用共享密钥加密和公开密钥加密两者并用的混合加密机制。\n在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式。\n\n### 证书的作用\n接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，客户端便可明确两件事：\n一，认证服务器的公开密钥的是真实有效的数字证书认证机构。二，服务器的公开密钥是值得信赖的。\n\n### SSL 速度慢的原因\nHTTPS 也存在一些问题，那就是当使用 SSL 时，它的处理速度会变慢。\nSSL 的慢分两种。一种是指通信慢。另一种是指由于大量消耗 CPU 及内存等资源，导致处理速度变慢。\n通信慢的原因：除去和 TCP 连接、发送 HTTP 请求 • 响应以外，还必须进行 SSL 通信，因此整体上处理通信量不可避免会增加。\n处理慢的原因：在服务器和客户端都需要进行加密和解密的运算处理。因此从结果上讲，比起 HTTP 会更多地消耗服务器和客户端的硬件资源，导致负载增强。\n\n### 为何所有的 Web 网站不一直使用 HTTPS\n一种原因是 SSL 速度变慢，负载增强，不用是为了节约资源。\n另一种原因就是购买证书太贵了。\n\n### Session 管理及 Cookie 应用\n但鉴于 HTTP 是无状态协议，之前已认证成功的用户状态无法通过协议层面保存下来。即，无法实现状态管理，因此即使当该用户下一次继续访问，也无法区分他与其他的用户。于是我们会使用 Cookie 来管理 Session，以弥补 HTTP 协议中不存在的状态管理功能。\n\n### Session 管理及 Cookie 状态管理的过程\n- 步骤 1： \n客户端把用户 ID 和密码等登录信息放入报文的实体部分，通常是以 POST 方法把请求发送给服务器。而这时，会使用 HTTPS 通信来进行 HTML 表单画面的显示和用户输入数据的发送。\n- 步骤 2： \n服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份认证，然后把用户的认证状态与 Session ID 绑定后记录在服务器端。向客户端返回响应时，会在首部字段 Set-Cookie 内写入 Session\nID（如 PHPSESSID=028a8c…）。\n- 步骤 3： \n客户端接收到从服务器端发来的 Session ID 后，会将其作为 Cookie 保存在本地。下次向服务器发送请求时，浏览器会自动发送 Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。 \n\n### HTTP 的瓶颈有哪些\n- 一条连接上只可发送一个请求。\n- 请求只能从客户端开始。客户端不可以接收除响应以外的指令。\n- 请求 / 响应首部未经压缩就发送。首部信息越多延迟越大。\n- 发送冗长的首部，每次互相发送相同的首部造成的浪费较多。\n- 可任意选择数据压缩格式。非强制压缩发送。\n\n### 什么是 SPDY\nSPDY 开发目标旨在解决 HTTP 的性能瓶颈，缩短 Web 页面的加载时间。\nSPDY 没有完全改写 HTTP 协议，而是在 TCP/IP 的应用层与运输层之间通过新加会话层的形式运作。\n同时，考虑到安全性问题，SPDY 规定通信中使用 SSL。\nSPDY 以会话层的形式加入，控制对数据的流动，但还是采用 HTTP 建立通信连接。因此，可照常使用 HTTP 的 GET 和 POST 等方法、Cookie 以及 HTTP 报文等。\n\n### 使用 SPDY 后，HTTP 协议额外获得的功能\n- 多路复用流\n通过单一的 TCP 连接，可以无限制处理多个 HTTP 请求。所有请求的处理都在一条 TCP 连接上完成，因此 TCP 的处理效率得到提高。\n- 赋予请求优先级\nSPDY 不仅可以无限制地并发处理请求，还可以给请求逐个分配优先级顺序。这样主要是为了在发送多个请求时，解决因带宽低而导致响应变慢的问题。\n- 压缩 HTTP 首部\n压缩 HTTP 请求和响应的首部。这样一来，通信产生的数据包数量和发送的字节数就更少了。\n- 推送功能\n支持服务器主动向客户端推送数据的功能。这样，服务器可直接发送数据，而不必等待客户端的请求。\n- 服务器提示功能\n服务器可以主动提示客户端请求所需的资源。由于在客户端发现资源之前就可以获知资源的存在，因此在资源已缓存等情况下，可以避免发送不必要的请求。\n\n### SPDY 的局限性\nSPDY 基本上只是将单个域名（ IP 地址）的通信多路复用，所以当一个 Web 网站上使用多个域名下的资源，改善效果就会受到限制。\nSPDY 的确是一种可有效消除 HTTP 瓶颈的技术，但很多 Web 网站存在的问题并非仅仅是由 HTTP 瓶颈所导致。对 Web 本身的速度提升，还应该从其他可细致钻研的地方入手。\n\n### WebSocket 协议的主要特点\n- 推送功能\n支持由服务器向客户端推送数据的推送功能。这样，服务器可直接发送数据，而不必等待客户端的请求。\n- 减少通信量\n只要建立起 WebSocket 连接，就希望一直保持连接状态。和 HTTP 相比，不但每次连接时的总开销减少，而且由于 WebSocket 的首部信息很小，通信量也相应减少了。\n\n### 针对 Web 应用的攻击模式\n**主动攻击**\n主动攻击（active attack）是指攻击者通过直接访问 Web 应用，把攻击代码传入的攻击模式。\n由于该模式是直接针对服务器上的资源进行攻击，因此攻击者需要能够访问到那些资源。\n主动攻击模式里具有代表性的攻击是 SQL 注入攻击和 OS 命令注入攻击。\n\n**被动攻击**\n被动攻击（passive attack）是指利用圈套策略执行攻击代码的攻击模式。在被动攻击过程中，攻击者不直接对目标 Web 应用访问发起攻击，而是诱使用户触发已设置好的陷阱。\n被动攻击模式中具有代表性的攻击是跨站脚本攻击和跨站点请求伪造。\n\n### 什么是跨站脚本攻击\n跨站脚本攻击（Cross-Site Scripting，XSS）是指通过存在安全漏洞的Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击，属于被动攻击。\n动态创建的 HTML 部分有可能隐藏着安全漏洞。就这样，攻击者编写脚本设下陷阱，用户在自己的浏览器上运行时，一\n不小心就会受到被动攻击。\n\n### 跨站脚本攻击攻击哪些方面\n- 利用虚假输入表单骗取用户个人信息。\n- 利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求。\n- 显示伪造的文章或图片。\n\n### 什么是 SQL 注入攻击\nSQL 注入（SQL Injection）是指针对 Web 应用使用的数据库，通过运行非法的 SQL 而产生的攻击。\n该安全隐患有可能引发极大的威胁，有时会直接导致个人信息及机密信息的泄露。\n\n### SQL 注入攻击攻击哪些方面\n- 非法查看或篡改数据库内的数据\n- 规避认证\n- 执行和数据库服务器业务关联的程序等\n\n### 什么是跨站点请求伪造\n跨站点请求伪造（Cross-Site Request Forgeries，CSRF）攻击是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。\n\n### 跨站点请求伪造攻击哪些方面\n- 利用已通过认证的用户权限更新设定信息等\n- 利用已通过认证的用户权限购买商品\n- 利用已通过认证的用户权限在留言板上发表言论\n\n### 什么是 DOS 攻击\nDoS 攻击（Denial of Service attack）是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。DoS 攻击的对象不仅限于 Web 网站，还包括网络设备及服务器等。\n主要有以下两种 DoS 攻击方式。\n大量请求：集中利用访问请求造成资源过载，资源用尽的同时，实际上服务也就呈停止状态。\n攻击漏洞：通过攻击安全漏洞使服务停止。\n","slug":"图解-HTTP","published":1,"updated":"2021-09-04T09:47:13.422Z","_id":"ckmd8l6bf000mzepv4a3f9pkq","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"名词解析\"><a href=\"#名词解析\" class=\"headerlink\" title=\"名词解析\"></a>名词解析</h3><ul>\n<li>HTTP: HyperText Transfer Protocol，超文本传输协议</li>\n<li>TCP: Transmission Control Protocol，传输控制协议</li>\n<li>UDP: User Data Protocol，用户数据报协议</li>\n<li>IP: Internet Protocol，网际协议</li>\n<li>FTP: File Transfer Protocol，文件传输协议</li>\n<li>DNS: Domain Name System，域名系统</li>\n<li>URI: Uniform Resource Identifier，统一资源标识符</li>\n<li>URL: Uniform Resource Locator，统一资源定位符</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"TCP-IP-协议共有几层\"><a href=\"#TCP-IP-协议共有几层\" class=\"headerlink\" title=\"TCP/IP 协议共有几层\"></a>TCP/IP 协议共有几层</h3><ul>\n<li>应用层：FTP、DNS、HTTP等</li>\n<li>传输层：TCP、UDP</li>\n<li>网络层：IP</li>\n<li>数据链路层</li>\n</ul>\n<h3 id=\"什么是字节流服务\"><a href=\"#什么是字节流服务\" class=\"headerlink\" title=\"什么是字节流服务\"></a>什么是字节流服务</h3><p>按层次分，TCP 位于传输层，提供可靠的字节流服务。<br>所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。</p>\n<h3 id=\"URI-和-URL-的区别\"><a href=\"#URI-和-URL-的区别\" class=\"headerlink\" title=\"URI 和 URL 的区别\"></a>URI 和 URL 的区别</h3><p>URI 用字符串标识某一互联网资源，而 URL 表示资源的地点（互联网上所处的位置）。可见 URL 是 URI 的子集。<br>假设所有的Html文档都有唯一的编号，记作html:xxxxx，xxxxx是一串数字，即Html文档的身份证号码，这个能唯一标识一个Html文档，那么这个号码就是一个URI。而URL则通过描述是哪个主机上哪个路径上的文件来唯一确定一个资源，也就是定位的方式来实现的URI。</p>\n<h3 id=\"请求报文和响应报文的构成\"><a href=\"#请求报文和响应报文的构成\" class=\"headerlink\" title=\"请求报文和响应报文的构成\"></a>请求报文和响应报文的构成</h3><p>请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。<br>响应报文基本上由协议版本、状态码、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。</p>\n<h3 id=\"持久连接的好处\"><a href=\"#持久连接的好处\" class=\"headerlink\" title=\"持久连接的好处\"></a>持久连接的好处</h3><p>在 HTTP/1.1 中，所有的连接默认都是持久连接。<br>持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。<br>另外，减少开销的那部分时间，使HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相应提高了。</p>\n<h3 id=\"什么是管线化\"><a href=\"#什么是管线化\" class=\"headerlink\" title=\"什么是管线化\"></a>什么是管线化</h3><p>持久连接使得多数请求以管线化（pipelining）方式发送成为可能。<br>从前发送请求后需等待并收到响应，才能发送下一个请求。<br>管线化技术出现后，不用等待响应亦可直接发送下一个请求。<br>这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待响应了。</p>\n<h3 id=\"为什么要使用-Cookie\"><a href=\"#为什么要使用-Cookie\" class=\"headerlink\" title=\"为什么要使用 Cookie\"></a>为什么要使用 Cookie</h3><p>HTTP 是一种不保存状态，即无状态协议。<br>HTTP 协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。也就是说，无法根据之前的状态进行本次的请求处理。<br>无状态协议当然也有它的优点。由于不必保存状态，自然可减少服务器的 CPU 及内存资源的消耗。更快地处理大量事务，确保协议的可伸缩性。<br>为了实现期望的保持状态功能，于是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。</p>\n<h3 id=\"Cookie-是如何实现的\"><a href=\"#Cookie-是如何实现的\" class=\"headerlink\" title=\"Cookie 是如何实现的\"></a>Cookie 是如何实现的</h3><p>Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。<br>Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。<br>服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</p>\n<h3 id=\"编码传输数据的优缺点\"><a href=\"#编码传输数据的优缺点\" class=\"headerlink\" title=\"编码传输数据的优缺点\"></a>编码传输数据的优缺点</h3><p>HTTP 在传输数据时可以按照数据原貌直接传输，但也可以在传输过程中通过编码提升传输速率。<br>通过在传输时编码，能有效地处理大量的访问请求。<br>但是，编码的操作需要计算机来完成，因此会消耗更多的 CPU 等资源。</p>\n<h3 id=\"报文主体和实体主体的区别\"><a href=\"#报文主体和实体主体的区别\" class=\"headerlink\" title=\"报文主体和实体主体的区别\"></a>报文主体和实体主体的区别</h3><p>通常，报文主体等于实体主体。<br>只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。<br>压缩传输时，报文主体为实体主体压缩后的密文。<br>分块传输时，报文主体为实体主体分割后的一小块。<br>多部分对象集合传输时，报文主体包含多个实体主体。</p>\n<h3 id=\"什么是范围请求\"><a href=\"#什么是范围请求\" class=\"headerlink\" title=\"什么是范围请求\"></a>什么是范围请求</h3><p>以前，如果下载过程中遇到网络中断的情况，那就必须重头开始。<br>为了解决上述问题，需要一种可恢复的机制。所谓恢复是指能从之前下载中断处恢复下载。<br>要实现该功能需要指定下载的实体范围。像这样，指定范围发送的请求叫做范围请求（Range Request）。</p>\n<h3 id=\"什么是内容协商机制\"><a href=\"#什么是内容协商机制\" class=\"headerlink\" title=\"什么是内容协商机制\"></a>什么是内容协商机制</h3><p>内容协商技术有以下 3 种类型。</p>\n<ul>\n<li>服务器驱动协商（Server-driven Negotiation）<br>由服务器端进行内容协商。以请求的首部字段为参考，在服务器端自动处理。</li>\n<li>客户端驱动协商（Agent-driven Negotiation）<br>由客户端进行内容协商的方式。用户从浏览器显示的可选项列表中手动选择。还可以利用 JavaScript 脚本在 Web 页面上自动进行上述选择。比如按 OS 的类型或浏览器类型，自行切换成 PC 版页面或手机版页面。</li>\n<li>透明协商（Transparent Negotiation）<br>是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法。</li>\n</ul>\n<h3 id=\"状态码的类别\"><a href=\"#状态码的类别\" class=\"headerlink\" title=\"状态码的类别\"></a>状态码的类别</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>类别</th>\n<th>原因短语</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1XX</td>\n<td>Informational（信息性状态码）</td>\n<td>接收的请求正在处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td>Success（成功状态码）</td>\n<td>请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td>Redirection（重定向状态码）</td>\n<td>需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td>Client Error（客户端错误状态码）</td>\n<td>服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td>Server Error（服务器错误状态码）</td>\n<td>服务器处理请求出错</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用状态码\"><a href=\"#常用状态码\" class=\"headerlink\" title=\"常用状态码\"></a>常用状态码</h3><p><strong>2XX——表明请求被正常处理了</strong><br>1、200 OK：请求已正常处理。<br>2、204 No Content：请求处理成功，但没有任何资源可以返回给客户端，一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。<br>3、206 Partial Content：是对资源某一部分的请求，该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。响应报文中包含由Content-Range指定范围的实体内容。<br><strong>3XX——表明浏览器需要执行某些特殊的处理以正确处理请求</strong><br>4、301 Moved Permanently：永久性重定向，请求的资源已经被分配了新的URI，以后应使用资源现在所指的URI。<br>5、302 Found：临时性重定向。和301相似，但302代表的资源不是永久性移动，只是临时性性质的。换句话说，已移动的资源对应的URI将来还有可能发生改变。<br>6、303 See Other：资源的URI已更新，你是否能临时按新的URI访问。该状态码表示由于请求对应的资源存在着另一个URL，应使用GET方法定向获取请求的资源。303状态码和302状态码有着相同的功能，但303状态码明确表示客户端应当采用GET方法获取资源，这点与302状态码有区别。<br>当301,302,303响应状态码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送。<br>7、304 Not Modified：资源已找到，但未符合条件请求。该状态码表示客户端发送附带条件的请求时（采用GET方法的请求报文中包含If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since中任一首部）服务端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回304.。<br>8、307 Temporary Redirect：临时重定向。与302有相同的含义。<br><strong>4XX——表明客户端是发生错误的原因所在。</strong><br>9、400 Bad Request：服务器端无法理解客户端发送的请求，请求报文中可能存在语法错误。<br>10、401 Unauthorized：该状态码表示发送的请求需要有通过HTTP认证（BASIC认证，DIGEST认证）的认证信息。<br>11、403 Forbidden：不允许访问那个资源。该状态码表明对请求资源的访问被服务器拒绝了。（权限，未授权IP等）<br>12、404 Not Found：服务器上没有请求的资源。路径错误等。<br><strong>5XX——服务器本身发生错误</strong><br>13、500 Internal Server Error：貌似内部资源出故障了。该状态码表明服务器端在执行请求时发生了错误。也有可能是web应用存在bug或某些临时故障。<br>14、503 Service Unavailable：抱歉，我现在正在忙着。该状态码表明服务器暂时处于超负载或正在停机维护，现在无法处理请求。</p>\n<h3 id=\"代理、网关、隧道的特点\"><a href=\"#代理、网关、隧道的特点\" class=\"headerlink\" title=\"代理、网关、隧道的特点\"></a>代理、网关、隧道的特点</h3><p>代理: 代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。每次通过代理服务器转发请求或响应时，都会追加写入via首部信息。因此，在转发时会附加via首部字段以标记经过的主机信息。<br>网关: 网关的工作机制和代理十分相似,而网关能使通信线路上的服务器提供非 HTTP 协议服务。即网关可以将经过的http请求转化为其他协议通信类型。<br>隧道: 隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。隧道本身不会去解析http请求，也就是在传输的时候可以保证数据的原样性。</p>\n<h3 id=\"HTTP-的缺点\"><a href=\"#HTTP-的缺点\" class=\"headerlink\" title=\"HTTP 的缺点\"></a>HTTP 的缺点</h3><ul>\n<li>通信使用明文（不加密），内容可能会被窃听</li>\n<li>不验证通信方的身份，因此有可能遭遇伪装</li>\n<li>无法证明报文的完整性，所以有可能已遭篡改</li>\n</ul>\n<h3 id=\"TCP-IP-是可能被窃听的网络\"><a href=\"#TCP-IP-是可能被窃听的网络\" class=\"headerlink\" title=\"TCP/IP 是可能被窃听的网络\"></a>TCP/IP 是可能被窃听的网络</h3><p>按 TCP/IP 协议族的工作机制，通信内容在所有的通信线路上都有可能遭到窥视。<br>即使已经过加密处理的通信，也会被窥视到通信内容，这点和未加密的通信是相同的。只是说如果通信经过加密，就有可能让人无法破解报文信息的含义，但加密处理后的报文信息本身还是会被看到的。</p>\n<h3 id=\"什么是-HTTPS\"><a href=\"#什么是-HTTPS\" class=\"headerlink\" title=\"什么是 HTTPS\"></a>什么是 HTTPS</h3><p>HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或 TLS（Transport Layer Security，安全层传输协议）的组合使用，加密 HTTP 的通信内容。<br>用 SSL 建立安全通信线路之后，就可以在这条线路上进行 HTTP 通信了。与 SSL 组合使用的 HTTP 被称为 HTTPS（HTTP Secure，超文本传输安全协议）或 HTTP over SSL。<br>HTTPS 并非是一种新协议，HTTP 加上加密处理和认证以及完整性保护后即是 HTTPS。</p>\n<h3 id=\"什么是共享密钥加密\"><a href=\"#什么是共享密钥加密\" class=\"headerlink\" title=\"什么是共享密钥加密\"></a>什么是共享密钥加密</h3><p>加密和解密同用一个密钥的方式称为共享密钥加密（Common key crypto system），也被叫做对称密钥加密。</p>\n<h3 id=\"什么是公开密钥加密\"><a href=\"#什么是公开密钥加密\" class=\"headerlink\" title=\"什么是公开密钥加密\"></a>什么是公开密钥加密</h3><p>公开密钥加密使用一对非对称的密钥。一把叫做私有密钥（private key），另一把叫做公开密钥（public key）。顾名思<br>义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。<br>使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。</p>\n<h3 id=\"共享密钥的缺点\"><a href=\"#共享密钥的缺点\" class=\"headerlink\" title=\"共享密钥的缺点\"></a>共享密钥的缺点</h3><p>在互联网上转发密钥时，如果通信被监听那么密钥就可会落入攻击者之手，同时也就失去了加密的意义。另外还得设法安全地保管接收到的密钥。</p>\n<h3 id=\"公开密钥的缺点\"><a href=\"#公开密钥的缺点\" class=\"headerlink\" title=\"公开密钥的缺点\"></a>公开密钥的缺点</h3><p>公开密钥加密与共享密钥加密相比，其处理速度要慢。<br>无法证明公开密钥本身就是货真价实的公开密钥。比如，正准备和某台服务器建立公开密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或许在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。— 所以需要证书进行判断。</p>\n<h3 id=\"HTTPS-采用什么加密机制\"><a href=\"#HTTPS-采用什么加密机制\" class=\"headerlink\" title=\"HTTPS 采用什么加密机制\"></a>HTTPS 采用什么加密机制</h3><p>HTTPS 采用共享密钥加密和公开密钥加密两者并用的混合加密机制。<br>在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式。</p>\n<h3 id=\"证书的作用\"><a href=\"#证书的作用\" class=\"headerlink\" title=\"证书的作用\"></a>证书的作用</h3><p>接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，客户端便可明确两件事：<br>一，认证服务器的公开密钥的是真实有效的数字证书认证机构。二，服务器的公开密钥是值得信赖的。</p>\n<h3 id=\"SSL-速度慢的原因\"><a href=\"#SSL-速度慢的原因\" class=\"headerlink\" title=\"SSL 速度慢的原因\"></a>SSL 速度慢的原因</h3><p>HTTPS 也存在一些问题，那就是当使用 SSL 时，它的处理速度会变慢。<br>SSL 的慢分两种。一种是指通信慢。另一种是指由于大量消耗 CPU 及内存等资源，导致处理速度变慢。<br>通信慢的原因：除去和 TCP 连接、发送 HTTP 请求 • 响应以外，还必须进行 SSL 通信，因此整体上处理通信量不可避免会增加。<br>处理慢的原因：在服务器和客户端都需要进行加密和解密的运算处理。因此从结果上讲，比起 HTTP 会更多地消耗服务器和客户端的硬件资源，导致负载增强。</p>\n<h3 id=\"为何所有的-Web-网站不一直使用-HTTPS\"><a href=\"#为何所有的-Web-网站不一直使用-HTTPS\" class=\"headerlink\" title=\"为何所有的 Web 网站不一直使用 HTTPS\"></a>为何所有的 Web 网站不一直使用 HTTPS</h3><p>一种原因是 SSL 速度变慢，负载增强，不用是为了节约资源。<br>另一种原因就是购买证书太贵了。</p>\n<h3 id=\"Session-管理及-Cookie-应用\"><a href=\"#Session-管理及-Cookie-应用\" class=\"headerlink\" title=\"Session 管理及 Cookie 应用\"></a>Session 管理及 Cookie 应用</h3><p>但鉴于 HTTP 是无状态协议，之前已认证成功的用户状态无法通过协议层面保存下来。即，无法实现状态管理，因此即使当该用户下一次继续访问，也无法区分他与其他的用户。于是我们会使用 Cookie 来管理 Session，以弥补 HTTP 协议中不存在的状态管理功能。</p>\n<h3 id=\"Session-管理及-Cookie-状态管理的过程\"><a href=\"#Session-管理及-Cookie-状态管理的过程\" class=\"headerlink\" title=\"Session 管理及 Cookie 状态管理的过程\"></a>Session 管理及 Cookie 状态管理的过程</h3><ul>\n<li>步骤 1：<br>客户端把用户 ID 和密码等登录信息放入报文的实体部分，通常是以 POST 方法把请求发送给服务器。而这时，会使用 HTTPS 通信来进行 HTML 表单画面的显示和用户输入数据的发送。</li>\n<li>步骤 2：<br>服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份认证，然后把用户的认证状态与 Session ID 绑定后记录在服务器端。向客户端返回响应时，会在首部字段 Set-Cookie 内写入 Session<br>ID（如 PHPSESSID=028a8c…）。</li>\n<li>步骤 3：<br>客户端接收到从服务器端发来的 Session ID 后，会将其作为 Cookie 保存在本地。下次向服务器发送请求时，浏览器会自动发送 Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。 </li>\n</ul>\n<h3 id=\"HTTP-的瓶颈有哪些\"><a href=\"#HTTP-的瓶颈有哪些\" class=\"headerlink\" title=\"HTTP 的瓶颈有哪些\"></a>HTTP 的瓶颈有哪些</h3><ul>\n<li>一条连接上只可发送一个请求。</li>\n<li>请求只能从客户端开始。客户端不可以接收除响应以外的指令。</li>\n<li>请求 / 响应首部未经压缩就发送。首部信息越多延迟越大。</li>\n<li>发送冗长的首部，每次互相发送相同的首部造成的浪费较多。</li>\n<li>可任意选择数据压缩格式。非强制压缩发送。</li>\n</ul>\n<h3 id=\"什么是-SPDY\"><a href=\"#什么是-SPDY\" class=\"headerlink\" title=\"什么是 SPDY\"></a>什么是 SPDY</h3><p>SPDY 开发目标旨在解决 HTTP 的性能瓶颈，缩短 Web 页面的加载时间。<br>SPDY 没有完全改写 HTTP 协议，而是在 TCP/IP 的应用层与运输层之间通过新加会话层的形式运作。<br>同时，考虑到安全性问题，SPDY 规定通信中使用 SSL。<br>SPDY 以会话层的形式加入，控制对数据的流动，但还是采用 HTTP 建立通信连接。因此，可照常使用 HTTP 的 GET 和 POST 等方法、Cookie 以及 HTTP 报文等。</p>\n<h3 id=\"使用-SPDY-后，HTTP-协议额外获得的功能\"><a href=\"#使用-SPDY-后，HTTP-协议额外获得的功能\" class=\"headerlink\" title=\"使用 SPDY 后，HTTP 协议额外获得的功能\"></a>使用 SPDY 后，HTTP 协议额外获得的功能</h3><ul>\n<li>多路复用流<br>通过单一的 TCP 连接，可以无限制处理多个 HTTP 请求。所有请求的处理都在一条 TCP 连接上完成，因此 TCP 的处理效率得到提高。</li>\n<li>赋予请求优先级<br>SPDY 不仅可以无限制地并发处理请求，还可以给请求逐个分配优先级顺序。这样主要是为了在发送多个请求时，解决因带宽低而导致响应变慢的问题。</li>\n<li>压缩 HTTP 首部<br>压缩 HTTP 请求和响应的首部。这样一来，通信产生的数据包数量和发送的字节数就更少了。</li>\n<li>推送功能<br>支持服务器主动向客户端推送数据的功能。这样，服务器可直接发送数据，而不必等待客户端的请求。</li>\n<li>服务器提示功能<br>服务器可以主动提示客户端请求所需的资源。由于在客户端发现资源之前就可以获知资源的存在，因此在资源已缓存等情况下，可以避免发送不必要的请求。</li>\n</ul>\n<h3 id=\"SPDY-的局限性\"><a href=\"#SPDY-的局限性\" class=\"headerlink\" title=\"SPDY 的局限性\"></a>SPDY 的局限性</h3><p>SPDY 基本上只是将单个域名（ IP 地址）的通信多路复用，所以当一个 Web 网站上使用多个域名下的资源，改善效果就会受到限制。<br>SPDY 的确是一种可有效消除 HTTP 瓶颈的技术，但很多 Web 网站存在的问题并非仅仅是由 HTTP 瓶颈所导致。对 Web 本身的速度提升，还应该从其他可细致钻研的地方入手。</p>\n<h3 id=\"WebSocket-协议的主要特点\"><a href=\"#WebSocket-协议的主要特点\" class=\"headerlink\" title=\"WebSocket 协议的主要特点\"></a>WebSocket 协议的主要特点</h3><ul>\n<li>推送功能<br>支持由服务器向客户端推送数据的推送功能。这样，服务器可直接发送数据，而不必等待客户端的请求。</li>\n<li>减少通信量<br>只要建立起 WebSocket 连接，就希望一直保持连接状态。和 HTTP 相比，不但每次连接时的总开销减少，而且由于 WebSocket 的首部信息很小，通信量也相应减少了。</li>\n</ul>\n<h3 id=\"针对-Web-应用的攻击模式\"><a href=\"#针对-Web-应用的攻击模式\" class=\"headerlink\" title=\"针对 Web 应用的攻击模式\"></a>针对 Web 应用的攻击模式</h3><p><strong>主动攻击</strong><br>主动攻击（active attack）是指攻击者通过直接访问 Web 应用，把攻击代码传入的攻击模式。<br>由于该模式是直接针对服务器上的资源进行攻击，因此攻击者需要能够访问到那些资源。<br>主动攻击模式里具有代表性的攻击是 SQL 注入攻击和 OS 命令注入攻击。</p>\n<p><strong>被动攻击</strong><br>被动攻击（passive attack）是指利用圈套策略执行攻击代码的攻击模式。在被动攻击过程中，攻击者不直接对目标 Web 应用访问发起攻击，而是诱使用户触发已设置好的陷阱。<br>被动攻击模式中具有代表性的攻击是跨站脚本攻击和跨站点请求伪造。</p>\n<h3 id=\"什么是跨站脚本攻击\"><a href=\"#什么是跨站脚本攻击\" class=\"headerlink\" title=\"什么是跨站脚本攻击\"></a>什么是跨站脚本攻击</h3><p>跨站脚本攻击（Cross-Site Scripting，XSS）是指通过存在安全漏洞的Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击，属于被动攻击。<br>动态创建的 HTML 部分有可能隐藏着安全漏洞。就这样，攻击者编写脚本设下陷阱，用户在自己的浏览器上运行时，一<br>不小心就会受到被动攻击。</p>\n<h3 id=\"跨站脚本攻击攻击哪些方面\"><a href=\"#跨站脚本攻击攻击哪些方面\" class=\"headerlink\" title=\"跨站脚本攻击攻击哪些方面\"></a>跨站脚本攻击攻击哪些方面</h3><ul>\n<li>利用虚假输入表单骗取用户个人信息。</li>\n<li>利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</li>\n<li>显示伪造的文章或图片。</li>\n</ul>\n<h3 id=\"什么是-SQL-注入攻击\"><a href=\"#什么是-SQL-注入攻击\" class=\"headerlink\" title=\"什么是 SQL 注入攻击\"></a>什么是 SQL 注入攻击</h3><p>SQL 注入（SQL Injection）是指针对 Web 应用使用的数据库，通过运行非法的 SQL 而产生的攻击。<br>该安全隐患有可能引发极大的威胁，有时会直接导致个人信息及机密信息的泄露。</p>\n<h3 id=\"SQL-注入攻击攻击哪些方面\"><a href=\"#SQL-注入攻击攻击哪些方面\" class=\"headerlink\" title=\"SQL 注入攻击攻击哪些方面\"></a>SQL 注入攻击攻击哪些方面</h3><ul>\n<li>非法查看或篡改数据库内的数据</li>\n<li>规避认证</li>\n<li>执行和数据库服务器业务关联的程序等</li>\n</ul>\n<h3 id=\"什么是跨站点请求伪造\"><a href=\"#什么是跨站点请求伪造\" class=\"headerlink\" title=\"什么是跨站点请求伪造\"></a>什么是跨站点请求伪造</h3><p>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）攻击是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。</p>\n<h3 id=\"跨站点请求伪造攻击哪些方面\"><a href=\"#跨站点请求伪造攻击哪些方面\" class=\"headerlink\" title=\"跨站点请求伪造攻击哪些方面\"></a>跨站点请求伪造攻击哪些方面</h3><ul>\n<li>利用已通过认证的用户权限更新设定信息等</li>\n<li>利用已通过认证的用户权限购买商品</li>\n<li>利用已通过认证的用户权限在留言板上发表言论</li>\n</ul>\n<h3 id=\"什么是-DOS-攻击\"><a href=\"#什么是-DOS-攻击\" class=\"headerlink\" title=\"什么是 DOS 攻击\"></a>什么是 DOS 攻击</h3><p>DoS 攻击（Denial of Service attack）是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。DoS 攻击的对象不仅限于 Web 网站，还包括网络设备及服务器等。<br>主要有以下两种 DoS 攻击方式。<br>大量请求：集中利用访问请求造成资源过载，资源用尽的同时，实际上服务也就呈停止状态。<br>攻击漏洞：通过攻击安全漏洞使服务停止。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"名词解析\"><a href=\"#名词解析\" class=\"headerlink\" title=\"名词解析\"></a>名词解析</h3><ul>\n<li>HTTP: HyperText Transfer Protocol，超文本传输协议</li>\n<li>TCP: Transmission Control Protocol，传输控制协议</li>\n<li>UDP: User Data Protocol，用户数据报协议</li>\n<li>IP: Internet Protocol，网际协议</li>\n<li>FTP: File Transfer Protocol，文件传输协议</li>\n<li>DNS: Domain Name System，域名系统</li>\n<li>URI: Uniform Resource Identifier，统一资源标识符</li>\n<li>URL: Uniform Resource Locator，统一资源定位符</li>\n</ul>","more":"<h3 id=\"TCP-IP-协议共有几层\"><a href=\"#TCP-IP-协议共有几层\" class=\"headerlink\" title=\"TCP/IP 协议共有几层\"></a>TCP/IP 协议共有几层</h3><ul>\n<li>应用层：FTP、DNS、HTTP等</li>\n<li>传输层：TCP、UDP</li>\n<li>网络层：IP</li>\n<li>数据链路层</li>\n</ul>\n<h3 id=\"什么是字节流服务\"><a href=\"#什么是字节流服务\" class=\"headerlink\" title=\"什么是字节流服务\"></a>什么是字节流服务</h3><p>按层次分，TCP 位于传输层，提供可靠的字节流服务。<br>所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。</p>\n<h3 id=\"URI-和-URL-的区别\"><a href=\"#URI-和-URL-的区别\" class=\"headerlink\" title=\"URI 和 URL 的区别\"></a>URI 和 URL 的区别</h3><p>URI 用字符串标识某一互联网资源，而 URL 表示资源的地点（互联网上所处的位置）。可见 URL 是 URI 的子集。<br>假设所有的Html文档都有唯一的编号，记作html:xxxxx，xxxxx是一串数字，即Html文档的身份证号码，这个能唯一标识一个Html文档，那么这个号码就是一个URI。而URL则通过描述是哪个主机上哪个路径上的文件来唯一确定一个资源，也就是定位的方式来实现的URI。</p>\n<h3 id=\"请求报文和响应报文的构成\"><a href=\"#请求报文和响应报文的构成\" class=\"headerlink\" title=\"请求报文和响应报文的构成\"></a>请求报文和响应报文的构成</h3><p>请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。<br>响应报文基本上由协议版本、状态码、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。</p>\n<h3 id=\"持久连接的好处\"><a href=\"#持久连接的好处\" class=\"headerlink\" title=\"持久连接的好处\"></a>持久连接的好处</h3><p>在 HTTP/1.1 中，所有的连接默认都是持久连接。<br>持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。<br>另外，减少开销的那部分时间，使HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相应提高了。</p>\n<h3 id=\"什么是管线化\"><a href=\"#什么是管线化\" class=\"headerlink\" title=\"什么是管线化\"></a>什么是管线化</h3><p>持久连接使得多数请求以管线化（pipelining）方式发送成为可能。<br>从前发送请求后需等待并收到响应，才能发送下一个请求。<br>管线化技术出现后，不用等待响应亦可直接发送下一个请求。<br>这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待响应了。</p>\n<h3 id=\"为什么要使用-Cookie\"><a href=\"#为什么要使用-Cookie\" class=\"headerlink\" title=\"为什么要使用 Cookie\"></a>为什么要使用 Cookie</h3><p>HTTP 是一种不保存状态，即无状态协议。<br>HTTP 协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。也就是说，无法根据之前的状态进行本次的请求处理。<br>无状态协议当然也有它的优点。由于不必保存状态，自然可减少服务器的 CPU 及内存资源的消耗。更快地处理大量事务，确保协议的可伸缩性。<br>为了实现期望的保持状态功能，于是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。</p>\n<h3 id=\"Cookie-是如何实现的\"><a href=\"#Cookie-是如何实现的\" class=\"headerlink\" title=\"Cookie 是如何实现的\"></a>Cookie 是如何实现的</h3><p>Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。<br>Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。<br>服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</p>\n<h3 id=\"编码传输数据的优缺点\"><a href=\"#编码传输数据的优缺点\" class=\"headerlink\" title=\"编码传输数据的优缺点\"></a>编码传输数据的优缺点</h3><p>HTTP 在传输数据时可以按照数据原貌直接传输，但也可以在传输过程中通过编码提升传输速率。<br>通过在传输时编码，能有效地处理大量的访问请求。<br>但是，编码的操作需要计算机来完成，因此会消耗更多的 CPU 等资源。</p>\n<h3 id=\"报文主体和实体主体的区别\"><a href=\"#报文主体和实体主体的区别\" class=\"headerlink\" title=\"报文主体和实体主体的区别\"></a>报文主体和实体主体的区别</h3><p>通常，报文主体等于实体主体。<br>只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。<br>压缩传输时，报文主体为实体主体压缩后的密文。<br>分块传输时，报文主体为实体主体分割后的一小块。<br>多部分对象集合传输时，报文主体包含多个实体主体。</p>\n<h3 id=\"什么是范围请求\"><a href=\"#什么是范围请求\" class=\"headerlink\" title=\"什么是范围请求\"></a>什么是范围请求</h3><p>以前，如果下载过程中遇到网络中断的情况，那就必须重头开始。<br>为了解决上述问题，需要一种可恢复的机制。所谓恢复是指能从之前下载中断处恢复下载。<br>要实现该功能需要指定下载的实体范围。像这样，指定范围发送的请求叫做范围请求（Range Request）。</p>\n<h3 id=\"什么是内容协商机制\"><a href=\"#什么是内容协商机制\" class=\"headerlink\" title=\"什么是内容协商机制\"></a>什么是内容协商机制</h3><p>内容协商技术有以下 3 种类型。</p>\n<ul>\n<li>服务器驱动协商（Server-driven Negotiation）<br>由服务器端进行内容协商。以请求的首部字段为参考，在服务器端自动处理。</li>\n<li>客户端驱动协商（Agent-driven Negotiation）<br>由客户端进行内容协商的方式。用户从浏览器显示的可选项列表中手动选择。还可以利用 JavaScript 脚本在 Web 页面上自动进行上述选择。比如按 OS 的类型或浏览器类型，自行切换成 PC 版页面或手机版页面。</li>\n<li>透明协商（Transparent Negotiation）<br>是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法。</li>\n</ul>\n<h3 id=\"状态码的类别\"><a href=\"#状态码的类别\" class=\"headerlink\" title=\"状态码的类别\"></a>状态码的类别</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>类别</th>\n<th>原因短语</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1XX</td>\n<td>Informational（信息性状态码）</td>\n<td>接收的请求正在处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td>Success（成功状态码）</td>\n<td>请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td>Redirection（重定向状态码）</td>\n<td>需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td>Client Error（客户端错误状态码）</td>\n<td>服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td>Server Error（服务器错误状态码）</td>\n<td>服务器处理请求出错</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用状态码\"><a href=\"#常用状态码\" class=\"headerlink\" title=\"常用状态码\"></a>常用状态码</h3><p><strong>2XX——表明请求被正常处理了</strong><br>1、200 OK：请求已正常处理。<br>2、204 No Content：请求处理成功，但没有任何资源可以返回给客户端，一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。<br>3、206 Partial Content：是对资源某一部分的请求，该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。响应报文中包含由Content-Range指定范围的实体内容。<br><strong>3XX——表明浏览器需要执行某些特殊的处理以正确处理请求</strong><br>4、301 Moved Permanently：永久性重定向，请求的资源已经被分配了新的URI，以后应使用资源现在所指的URI。<br>5、302 Found：临时性重定向。和301相似，但302代表的资源不是永久性移动，只是临时性性质的。换句话说，已移动的资源对应的URI将来还有可能发生改变。<br>6、303 See Other：资源的URI已更新，你是否能临时按新的URI访问。该状态码表示由于请求对应的资源存在着另一个URL，应使用GET方法定向获取请求的资源。303状态码和302状态码有着相同的功能，但303状态码明确表示客户端应当采用GET方法获取资源，这点与302状态码有区别。<br>当301,302,303响应状态码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送。<br>7、304 Not Modified：资源已找到，但未符合条件请求。该状态码表示客户端发送附带条件的请求时（采用GET方法的请求报文中包含If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since中任一首部）服务端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回304.。<br>8、307 Temporary Redirect：临时重定向。与302有相同的含义。<br><strong>4XX——表明客户端是发生错误的原因所在。</strong><br>9、400 Bad Request：服务器端无法理解客户端发送的请求，请求报文中可能存在语法错误。<br>10、401 Unauthorized：该状态码表示发送的请求需要有通过HTTP认证（BASIC认证，DIGEST认证）的认证信息。<br>11、403 Forbidden：不允许访问那个资源。该状态码表明对请求资源的访问被服务器拒绝了。（权限，未授权IP等）<br>12、404 Not Found：服务器上没有请求的资源。路径错误等。<br><strong>5XX——服务器本身发生错误</strong><br>13、500 Internal Server Error：貌似内部资源出故障了。该状态码表明服务器端在执行请求时发生了错误。也有可能是web应用存在bug或某些临时故障。<br>14、503 Service Unavailable：抱歉，我现在正在忙着。该状态码表明服务器暂时处于超负载或正在停机维护，现在无法处理请求。</p>\n<h3 id=\"代理、网关、隧道的特点\"><a href=\"#代理、网关、隧道的特点\" class=\"headerlink\" title=\"代理、网关、隧道的特点\"></a>代理、网关、隧道的特点</h3><p>代理: 代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。每次通过代理服务器转发请求或响应时，都会追加写入via首部信息。因此，在转发时会附加via首部字段以标记经过的主机信息。<br>网关: 网关的工作机制和代理十分相似,而网关能使通信线路上的服务器提供非 HTTP 协议服务。即网关可以将经过的http请求转化为其他协议通信类型。<br>隧道: 隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。隧道本身不会去解析http请求，也就是在传输的时候可以保证数据的原样性。</p>\n<h3 id=\"HTTP-的缺点\"><a href=\"#HTTP-的缺点\" class=\"headerlink\" title=\"HTTP 的缺点\"></a>HTTP 的缺点</h3><ul>\n<li>通信使用明文（不加密），内容可能会被窃听</li>\n<li>不验证通信方的身份，因此有可能遭遇伪装</li>\n<li>无法证明报文的完整性，所以有可能已遭篡改</li>\n</ul>\n<h3 id=\"TCP-IP-是可能被窃听的网络\"><a href=\"#TCP-IP-是可能被窃听的网络\" class=\"headerlink\" title=\"TCP/IP 是可能被窃听的网络\"></a>TCP/IP 是可能被窃听的网络</h3><p>按 TCP/IP 协议族的工作机制，通信内容在所有的通信线路上都有可能遭到窥视。<br>即使已经过加密处理的通信，也会被窥视到通信内容，这点和未加密的通信是相同的。只是说如果通信经过加密，就有可能让人无法破解报文信息的含义，但加密处理后的报文信息本身还是会被看到的。</p>\n<h3 id=\"什么是-HTTPS\"><a href=\"#什么是-HTTPS\" class=\"headerlink\" title=\"什么是 HTTPS\"></a>什么是 HTTPS</h3><p>HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或 TLS（Transport Layer Security，安全层传输协议）的组合使用，加密 HTTP 的通信内容。<br>用 SSL 建立安全通信线路之后，就可以在这条线路上进行 HTTP 通信了。与 SSL 组合使用的 HTTP 被称为 HTTPS（HTTP Secure，超文本传输安全协议）或 HTTP over SSL。<br>HTTPS 并非是一种新协议，HTTP 加上加密处理和认证以及完整性保护后即是 HTTPS。</p>\n<h3 id=\"什么是共享密钥加密\"><a href=\"#什么是共享密钥加密\" class=\"headerlink\" title=\"什么是共享密钥加密\"></a>什么是共享密钥加密</h3><p>加密和解密同用一个密钥的方式称为共享密钥加密（Common key crypto system），也被叫做对称密钥加密。</p>\n<h3 id=\"什么是公开密钥加密\"><a href=\"#什么是公开密钥加密\" class=\"headerlink\" title=\"什么是公开密钥加密\"></a>什么是公开密钥加密</h3><p>公开密钥加密使用一对非对称的密钥。一把叫做私有密钥（private key），另一把叫做公开密钥（public key）。顾名思<br>义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。<br>使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。</p>\n<h3 id=\"共享密钥的缺点\"><a href=\"#共享密钥的缺点\" class=\"headerlink\" title=\"共享密钥的缺点\"></a>共享密钥的缺点</h3><p>在互联网上转发密钥时，如果通信被监听那么密钥就可会落入攻击者之手，同时也就失去了加密的意义。另外还得设法安全地保管接收到的密钥。</p>\n<h3 id=\"公开密钥的缺点\"><a href=\"#公开密钥的缺点\" class=\"headerlink\" title=\"公开密钥的缺点\"></a>公开密钥的缺点</h3><p>公开密钥加密与共享密钥加密相比，其处理速度要慢。<br>无法证明公开密钥本身就是货真价实的公开密钥。比如，正准备和某台服务器建立公开密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或许在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。— 所以需要证书进行判断。</p>\n<h3 id=\"HTTPS-采用什么加密机制\"><a href=\"#HTTPS-采用什么加密机制\" class=\"headerlink\" title=\"HTTPS 采用什么加密机制\"></a>HTTPS 采用什么加密机制</h3><p>HTTPS 采用共享密钥加密和公开密钥加密两者并用的混合加密机制。<br>在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式。</p>\n<h3 id=\"证书的作用\"><a href=\"#证书的作用\" class=\"headerlink\" title=\"证书的作用\"></a>证书的作用</h3><p>接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，客户端便可明确两件事：<br>一，认证服务器的公开密钥的是真实有效的数字证书认证机构。二，服务器的公开密钥是值得信赖的。</p>\n<h3 id=\"SSL-速度慢的原因\"><a href=\"#SSL-速度慢的原因\" class=\"headerlink\" title=\"SSL 速度慢的原因\"></a>SSL 速度慢的原因</h3><p>HTTPS 也存在一些问题，那就是当使用 SSL 时，它的处理速度会变慢。<br>SSL 的慢分两种。一种是指通信慢。另一种是指由于大量消耗 CPU 及内存等资源，导致处理速度变慢。<br>通信慢的原因：除去和 TCP 连接、发送 HTTP 请求 • 响应以外，还必须进行 SSL 通信，因此整体上处理通信量不可避免会增加。<br>处理慢的原因：在服务器和客户端都需要进行加密和解密的运算处理。因此从结果上讲，比起 HTTP 会更多地消耗服务器和客户端的硬件资源，导致负载增强。</p>\n<h3 id=\"为何所有的-Web-网站不一直使用-HTTPS\"><a href=\"#为何所有的-Web-网站不一直使用-HTTPS\" class=\"headerlink\" title=\"为何所有的 Web 网站不一直使用 HTTPS\"></a>为何所有的 Web 网站不一直使用 HTTPS</h3><p>一种原因是 SSL 速度变慢，负载增强，不用是为了节约资源。<br>另一种原因就是购买证书太贵了。</p>\n<h3 id=\"Session-管理及-Cookie-应用\"><a href=\"#Session-管理及-Cookie-应用\" class=\"headerlink\" title=\"Session 管理及 Cookie 应用\"></a>Session 管理及 Cookie 应用</h3><p>但鉴于 HTTP 是无状态协议，之前已认证成功的用户状态无法通过协议层面保存下来。即，无法实现状态管理，因此即使当该用户下一次继续访问，也无法区分他与其他的用户。于是我们会使用 Cookie 来管理 Session，以弥补 HTTP 协议中不存在的状态管理功能。</p>\n<h3 id=\"Session-管理及-Cookie-状态管理的过程\"><a href=\"#Session-管理及-Cookie-状态管理的过程\" class=\"headerlink\" title=\"Session 管理及 Cookie 状态管理的过程\"></a>Session 管理及 Cookie 状态管理的过程</h3><ul>\n<li>步骤 1：<br>客户端把用户 ID 和密码等登录信息放入报文的实体部分，通常是以 POST 方法把请求发送给服务器。而这时，会使用 HTTPS 通信来进行 HTML 表单画面的显示和用户输入数据的发送。</li>\n<li>步骤 2：<br>服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份认证，然后把用户的认证状态与 Session ID 绑定后记录在服务器端。向客户端返回响应时，会在首部字段 Set-Cookie 内写入 Session<br>ID（如 PHPSESSID=028a8c…）。</li>\n<li>步骤 3：<br>客户端接收到从服务器端发来的 Session ID 后，会将其作为 Cookie 保存在本地。下次向服务器发送请求时，浏览器会自动发送 Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。 </li>\n</ul>\n<h3 id=\"HTTP-的瓶颈有哪些\"><a href=\"#HTTP-的瓶颈有哪些\" class=\"headerlink\" title=\"HTTP 的瓶颈有哪些\"></a>HTTP 的瓶颈有哪些</h3><ul>\n<li>一条连接上只可发送一个请求。</li>\n<li>请求只能从客户端开始。客户端不可以接收除响应以外的指令。</li>\n<li>请求 / 响应首部未经压缩就发送。首部信息越多延迟越大。</li>\n<li>发送冗长的首部，每次互相发送相同的首部造成的浪费较多。</li>\n<li>可任意选择数据压缩格式。非强制压缩发送。</li>\n</ul>\n<h3 id=\"什么是-SPDY\"><a href=\"#什么是-SPDY\" class=\"headerlink\" title=\"什么是 SPDY\"></a>什么是 SPDY</h3><p>SPDY 开发目标旨在解决 HTTP 的性能瓶颈，缩短 Web 页面的加载时间。<br>SPDY 没有完全改写 HTTP 协议，而是在 TCP/IP 的应用层与运输层之间通过新加会话层的形式运作。<br>同时，考虑到安全性问题，SPDY 规定通信中使用 SSL。<br>SPDY 以会话层的形式加入，控制对数据的流动，但还是采用 HTTP 建立通信连接。因此，可照常使用 HTTP 的 GET 和 POST 等方法、Cookie 以及 HTTP 报文等。</p>\n<h3 id=\"使用-SPDY-后，HTTP-协议额外获得的功能\"><a href=\"#使用-SPDY-后，HTTP-协议额外获得的功能\" class=\"headerlink\" title=\"使用 SPDY 后，HTTP 协议额外获得的功能\"></a>使用 SPDY 后，HTTP 协议额外获得的功能</h3><ul>\n<li>多路复用流<br>通过单一的 TCP 连接，可以无限制处理多个 HTTP 请求。所有请求的处理都在一条 TCP 连接上完成，因此 TCP 的处理效率得到提高。</li>\n<li>赋予请求优先级<br>SPDY 不仅可以无限制地并发处理请求，还可以给请求逐个分配优先级顺序。这样主要是为了在发送多个请求时，解决因带宽低而导致响应变慢的问题。</li>\n<li>压缩 HTTP 首部<br>压缩 HTTP 请求和响应的首部。这样一来，通信产生的数据包数量和发送的字节数就更少了。</li>\n<li>推送功能<br>支持服务器主动向客户端推送数据的功能。这样，服务器可直接发送数据，而不必等待客户端的请求。</li>\n<li>服务器提示功能<br>服务器可以主动提示客户端请求所需的资源。由于在客户端发现资源之前就可以获知资源的存在，因此在资源已缓存等情况下，可以避免发送不必要的请求。</li>\n</ul>\n<h3 id=\"SPDY-的局限性\"><a href=\"#SPDY-的局限性\" class=\"headerlink\" title=\"SPDY 的局限性\"></a>SPDY 的局限性</h3><p>SPDY 基本上只是将单个域名（ IP 地址）的通信多路复用，所以当一个 Web 网站上使用多个域名下的资源，改善效果就会受到限制。<br>SPDY 的确是一种可有效消除 HTTP 瓶颈的技术，但很多 Web 网站存在的问题并非仅仅是由 HTTP 瓶颈所导致。对 Web 本身的速度提升，还应该从其他可细致钻研的地方入手。</p>\n<h3 id=\"WebSocket-协议的主要特点\"><a href=\"#WebSocket-协议的主要特点\" class=\"headerlink\" title=\"WebSocket 协议的主要特点\"></a>WebSocket 协议的主要特点</h3><ul>\n<li>推送功能<br>支持由服务器向客户端推送数据的推送功能。这样，服务器可直接发送数据，而不必等待客户端的请求。</li>\n<li>减少通信量<br>只要建立起 WebSocket 连接，就希望一直保持连接状态。和 HTTP 相比，不但每次连接时的总开销减少，而且由于 WebSocket 的首部信息很小，通信量也相应减少了。</li>\n</ul>\n<h3 id=\"针对-Web-应用的攻击模式\"><a href=\"#针对-Web-应用的攻击模式\" class=\"headerlink\" title=\"针对 Web 应用的攻击模式\"></a>针对 Web 应用的攻击模式</h3><p><strong>主动攻击</strong><br>主动攻击（active attack）是指攻击者通过直接访问 Web 应用，把攻击代码传入的攻击模式。<br>由于该模式是直接针对服务器上的资源进行攻击，因此攻击者需要能够访问到那些资源。<br>主动攻击模式里具有代表性的攻击是 SQL 注入攻击和 OS 命令注入攻击。</p>\n<p><strong>被动攻击</strong><br>被动攻击（passive attack）是指利用圈套策略执行攻击代码的攻击模式。在被动攻击过程中，攻击者不直接对目标 Web 应用访问发起攻击，而是诱使用户触发已设置好的陷阱。<br>被动攻击模式中具有代表性的攻击是跨站脚本攻击和跨站点请求伪造。</p>\n<h3 id=\"什么是跨站脚本攻击\"><a href=\"#什么是跨站脚本攻击\" class=\"headerlink\" title=\"什么是跨站脚本攻击\"></a>什么是跨站脚本攻击</h3><p>跨站脚本攻击（Cross-Site Scripting，XSS）是指通过存在安全漏洞的Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击，属于被动攻击。<br>动态创建的 HTML 部分有可能隐藏着安全漏洞。就这样，攻击者编写脚本设下陷阱，用户在自己的浏览器上运行时，一<br>不小心就会受到被动攻击。</p>\n<h3 id=\"跨站脚本攻击攻击哪些方面\"><a href=\"#跨站脚本攻击攻击哪些方面\" class=\"headerlink\" title=\"跨站脚本攻击攻击哪些方面\"></a>跨站脚本攻击攻击哪些方面</h3><ul>\n<li>利用虚假输入表单骗取用户个人信息。</li>\n<li>利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</li>\n<li>显示伪造的文章或图片。</li>\n</ul>\n<h3 id=\"什么是-SQL-注入攻击\"><a href=\"#什么是-SQL-注入攻击\" class=\"headerlink\" title=\"什么是 SQL 注入攻击\"></a>什么是 SQL 注入攻击</h3><p>SQL 注入（SQL Injection）是指针对 Web 应用使用的数据库，通过运行非法的 SQL 而产生的攻击。<br>该安全隐患有可能引发极大的威胁，有时会直接导致个人信息及机密信息的泄露。</p>\n<h3 id=\"SQL-注入攻击攻击哪些方面\"><a href=\"#SQL-注入攻击攻击哪些方面\" class=\"headerlink\" title=\"SQL 注入攻击攻击哪些方面\"></a>SQL 注入攻击攻击哪些方面</h3><ul>\n<li>非法查看或篡改数据库内的数据</li>\n<li>规避认证</li>\n<li>执行和数据库服务器业务关联的程序等</li>\n</ul>\n<h3 id=\"什么是跨站点请求伪造\"><a href=\"#什么是跨站点请求伪造\" class=\"headerlink\" title=\"什么是跨站点请求伪造\"></a>什么是跨站点请求伪造</h3><p>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）攻击是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。</p>\n<h3 id=\"跨站点请求伪造攻击哪些方面\"><a href=\"#跨站点请求伪造攻击哪些方面\" class=\"headerlink\" title=\"跨站点请求伪造攻击哪些方面\"></a>跨站点请求伪造攻击哪些方面</h3><ul>\n<li>利用已通过认证的用户权限更新设定信息等</li>\n<li>利用已通过认证的用户权限购买商品</li>\n<li>利用已通过认证的用户权限在留言板上发表言论</li>\n</ul>\n<h3 id=\"什么是-DOS-攻击\"><a href=\"#什么是-DOS-攻击\" class=\"headerlink\" title=\"什么是 DOS 攻击\"></a>什么是 DOS 攻击</h3><p>DoS 攻击（Denial of Service attack）是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。DoS 攻击的对象不仅限于 Web 网站，还包括网络设备及服务器等。<br>主要有以下两种 DoS 攻击方式。<br>大量请求：集中利用访问请求造成资源过载，资源用尽的同时，实际上服务也就呈停止状态。<br>攻击漏洞：通过攻击安全漏洞使服务停止。</p>"},{"title":"vim-命令","date":"2021-03-18T02:23:49.000Z","_content":"\n### 改变编辑窗口长度\n```bash\n:resize line-number\n```\n\n### 改变编辑窗口宽度\n```bash\n:vertical resize number\n```\n\n","source":"_posts/vim-命令.md","raw":"---\ntitle: vim-命令\ndate: 2021-03-18 10:23:49\ntags: 命令操作\n---\n\n### 改变编辑窗口长度\n```bash\n:resize line-number\n```\n\n### 改变编辑窗口宽度\n```bash\n:vertical resize number\n```\n\n","slug":"vim-命令","published":1,"updated":"2021-09-04T09:47:13.422Z","_id":"ckmewel51000027pv7rte8m2t","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"改变编辑窗口长度\"><a href=\"#改变编辑窗口长度\" class=\"headerlink\" title=\"改变编辑窗口长度\"></a>改变编辑窗口长度</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:resize line-number</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"改变编辑窗口宽度\"><a href=\"#改变编辑窗口宽度\" class=\"headerlink\" title=\"改变编辑窗口宽度\"></a>改变编辑窗口宽度</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:vertical resize number</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"改变编辑窗口长度\"><a href=\"#改变编辑窗口长度\" class=\"headerlink\" title=\"改变编辑窗口长度\"></a>改变编辑窗口长度</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:resize line-number</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"改变编辑窗口宽度\"><a href=\"#改变编辑窗口宽度\" class=\"headerlink\" title=\"改变编辑窗口宽度\"></a>改变编辑窗口宽度</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:vertical resize number</span><br></pre></td></tr></table></figure>\n\n"},{"title":"JavaScript-变量和内存","date":"2021-03-18T13:28:23.000Z","_content":"\n### 可以给基本类型变量加属性吗\n可以加，不会报错，不过瞬间就会被删掉，所以下次无法调用。\n\n### 如何理解函数的参数是按值传递的\n把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。\n基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样。\n在向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。\n\n<!-- more -->\n\n### 介绍下instanceof 操作符和 typeof 的区别\ntypeof 操作符是确定一个变量是字符串、数值、布尔值，还是undefined 的最佳工具。\n但在检测引用类型的值时，这个操作符的用处不大。通常，我们并不是想知道某个值是对象，而是想知道它是什么类型的对象。\n如果变量是给定引用类型（根据它的原型链来识别；第6 章将介绍原型链）的实例，那么 instanceof 操作符就会返回true。\n所有引用类型的值都是Object 的实例。因此，在检测一个引用类型值和Object 构造函数时，instanceof 操作符始终会返回true。\n如果使用instanceof 操作符检测基本类型的值，则该操作符始终会返回false，因为基本类型不是对象。\n\n### 关于 var 声明的变量的位置\n使用var 声明的变量会自动被添加到最接近的环境中。在函数内部，最接近的环境就是函数的局部环境；在with 语句中，最接近的环境是函数环境。\n如果初始化变量时没有使用var 声明，该变量会自动被添加到全局环境。\n\n### 垃圾收集的周期\n垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。\n\n### 局部变量的生命周期\n局部变量只在函数执行的过程中存在。而在这个过程中，会为局部变量在栈（或堆）内存上分配相应的空间，以便存储它们的值。然后在函数中使用这些变量，直至函数执行结束。此时，局部变量就没有存在的必要了，因此可以释放它们的内存以供将来使用。\n\n### 垃圾收集的策略\n- 标记清除\n当变量进入环境（例如，在函数中声明一个变量）时，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。不过垃圾收集的时间间隔互有不同。\n- 引用计数\n引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那些引用次数为零的值所占用的内存。\n\n### 什么是循环引用\n循环引用指的是对象A 中包含一个指向对象B 的指针，而对象B 中也包含一个指向对象A 的引用。这种情况两个对象的引用次数都是2。\n在采用标记清除策略的实现中，由于函数执行之后，这两个对象都离开了作用域，因此这种相互引用不是个问题。但在采用引用计数策略的实现中，当函数执行完毕后，objectA 和objectB 还将继续存在，因为它们的引用次数永远不会是0。\n假如这个函数被重复多次调用，就会导致大量内存得不到回收。\n\n### IE8 的循环引用问题\nIE 中有一部分对象并不是原生JavaScript 对象。例如，其BOM 和DOM 中的对象就是使用C++以COM（Component Object Model，组件对象模型）对象的形式实现的，而COM 对象的垃圾收集机制采用的就是引用计数策略。因此，即使IE 的JavaScript 引擎是使用标记清除策略来实现的，但JavaScript 访问的COM 对象依然是基于引用计数策略的。换句话说，只要在IE 中涉及COM 对象，就会存在循环引用的问题。IE9 把BOM 和DOM 对象都转换成了真正的JavaScript 对象。\n\n### 如何避免循环引用问题\n为了避免这样的循环引用问题，最好是在不使用它们的时候手工断开连接，即将不使用的对象置为 null。将变量设置为null 意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次运行时，就会删除这些值并回收它们占用的内存。这个做法叫做解除引用。一般局部变量会在它们离开执行环境时自动被解除引用。对于全局变量globalPerson 而言，则需要我们在不使用它的时候手工为它解除引用。\n\n### 解除引用会立刻回收内存吗\n解除一个值的引用并不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收。\n","source":"_posts/JavaScript-变量和内存.md","raw":"---\ntitle: JavaScript-变量和内存\ndate: 2021-03-18 21:28:23\ntags: JavaScript\n---\n\n### 可以给基本类型变量加属性吗\n可以加，不会报错，不过瞬间就会被删掉，所以下次无法调用。\n\n### 如何理解函数的参数是按值传递的\n把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。\n基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样。\n在向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。\n\n<!-- more -->\n\n### 介绍下instanceof 操作符和 typeof 的区别\ntypeof 操作符是确定一个变量是字符串、数值、布尔值，还是undefined 的最佳工具。\n但在检测引用类型的值时，这个操作符的用处不大。通常，我们并不是想知道某个值是对象，而是想知道它是什么类型的对象。\n如果变量是给定引用类型（根据它的原型链来识别；第6 章将介绍原型链）的实例，那么 instanceof 操作符就会返回true。\n所有引用类型的值都是Object 的实例。因此，在检测一个引用类型值和Object 构造函数时，instanceof 操作符始终会返回true。\n如果使用instanceof 操作符检测基本类型的值，则该操作符始终会返回false，因为基本类型不是对象。\n\n### 关于 var 声明的变量的位置\n使用var 声明的变量会自动被添加到最接近的环境中。在函数内部，最接近的环境就是函数的局部环境；在with 语句中，最接近的环境是函数环境。\n如果初始化变量时没有使用var 声明，该变量会自动被添加到全局环境。\n\n### 垃圾收集的周期\n垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。\n\n### 局部变量的生命周期\n局部变量只在函数执行的过程中存在。而在这个过程中，会为局部变量在栈（或堆）内存上分配相应的空间，以便存储它们的值。然后在函数中使用这些变量，直至函数执行结束。此时，局部变量就没有存在的必要了，因此可以释放它们的内存以供将来使用。\n\n### 垃圾收集的策略\n- 标记清除\n当变量进入环境（例如，在函数中声明一个变量）时，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。不过垃圾收集的时间间隔互有不同。\n- 引用计数\n引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那些引用次数为零的值所占用的内存。\n\n### 什么是循环引用\n循环引用指的是对象A 中包含一个指向对象B 的指针，而对象B 中也包含一个指向对象A 的引用。这种情况两个对象的引用次数都是2。\n在采用标记清除策略的实现中，由于函数执行之后，这两个对象都离开了作用域，因此这种相互引用不是个问题。但在采用引用计数策略的实现中，当函数执行完毕后，objectA 和objectB 还将继续存在，因为它们的引用次数永远不会是0。\n假如这个函数被重复多次调用，就会导致大量内存得不到回收。\n\n### IE8 的循环引用问题\nIE 中有一部分对象并不是原生JavaScript 对象。例如，其BOM 和DOM 中的对象就是使用C++以COM（Component Object Model，组件对象模型）对象的形式实现的，而COM 对象的垃圾收集机制采用的就是引用计数策略。因此，即使IE 的JavaScript 引擎是使用标记清除策略来实现的，但JavaScript 访问的COM 对象依然是基于引用计数策略的。换句话说，只要在IE 中涉及COM 对象，就会存在循环引用的问题。IE9 把BOM 和DOM 对象都转换成了真正的JavaScript 对象。\n\n### 如何避免循环引用问题\n为了避免这样的循环引用问题，最好是在不使用它们的时候手工断开连接，即将不使用的对象置为 null。将变量设置为null 意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次运行时，就会删除这些值并回收它们占用的内存。这个做法叫做解除引用。一般局部变量会在它们离开执行环境时自动被解除引用。对于全局变量globalPerson 而言，则需要我们在不使用它的时候手工为它解除引用。\n\n### 解除引用会立刻回收内存吗\n解除一个值的引用并不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收。\n","slug":"JavaScript-变量和内存","published":1,"updated":"2021-09-04T09:47:13.416Z","_id":"ckmeyncgf000090pv5aa0552d","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"可以给基本类型变量加属性吗\"><a href=\"#可以给基本类型变量加属性吗\" class=\"headerlink\" title=\"可以给基本类型变量加属性吗\"></a>可以给基本类型变量加属性吗</h3><p>可以加，不会报错，不过瞬间就会被删掉，所以下次无法调用。</p>\n<h3 id=\"如何理解函数的参数是按值传递的\"><a href=\"#如何理解函数的参数是按值传递的\" class=\"headerlink\" title=\"如何理解函数的参数是按值传递的\"></a>如何理解函数的参数是按值传递的</h3><p>把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。<br>基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样。<br>在向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"介绍下instanceof-操作符和-typeof-的区别\"><a href=\"#介绍下instanceof-操作符和-typeof-的区别\" class=\"headerlink\" title=\"介绍下instanceof 操作符和 typeof 的区别\"></a>介绍下instanceof 操作符和 typeof 的区别</h3><p>typeof 操作符是确定一个变量是字符串、数值、布尔值，还是undefined 的最佳工具。<br>但在检测引用类型的值时，这个操作符的用处不大。通常，我们并不是想知道某个值是对象，而是想知道它是什么类型的对象。<br>如果变量是给定引用类型（根据它的原型链来识别；第6 章将介绍原型链）的实例，那么 instanceof 操作符就会返回true。<br>所有引用类型的值都是Object 的实例。因此，在检测一个引用类型值和Object 构造函数时，instanceof 操作符始终会返回true。<br>如果使用instanceof 操作符检测基本类型的值，则该操作符始终会返回false，因为基本类型不是对象。</p>\n<h3 id=\"关于-var-声明的变量的位置\"><a href=\"#关于-var-声明的变量的位置\" class=\"headerlink\" title=\"关于 var 声明的变量的位置\"></a>关于 var 声明的变量的位置</h3><p>使用var 声明的变量会自动被添加到最接近的环境中。在函数内部，最接近的环境就是函数的局部环境；在with 语句中，最接近的环境是函数环境。<br>如果初始化变量时没有使用var 声明，该变量会自动被添加到全局环境。</p>\n<h3 id=\"垃圾收集的周期\"><a href=\"#垃圾收集的周期\" class=\"headerlink\" title=\"垃圾收集的周期\"></a>垃圾收集的周期</h3><p>垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。</p>\n<h3 id=\"局部变量的生命周期\"><a href=\"#局部变量的生命周期\" class=\"headerlink\" title=\"局部变量的生命周期\"></a>局部变量的生命周期</h3><p>局部变量只在函数执行的过程中存在。而在这个过程中，会为局部变量在栈（或堆）内存上分配相应的空间，以便存储它们的值。然后在函数中使用这些变量，直至函数执行结束。此时，局部变量就没有存在的必要了，因此可以释放它们的内存以供将来使用。</p>\n<h3 id=\"垃圾收集的策略\"><a href=\"#垃圾收集的策略\" class=\"headerlink\" title=\"垃圾收集的策略\"></a>垃圾收集的策略</h3><ul>\n<li>标记清除<br>当变量进入环境（例如，在函数中声明一个变量）时，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。不过垃圾收集的时间间隔互有不同。</li>\n<li>引用计数<br>引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那些引用次数为零的值所占用的内存。</li>\n</ul>\n<h3 id=\"什么是循环引用\"><a href=\"#什么是循环引用\" class=\"headerlink\" title=\"什么是循环引用\"></a>什么是循环引用</h3><p>循环引用指的是对象A 中包含一个指向对象B 的指针，而对象B 中也包含一个指向对象A 的引用。这种情况两个对象的引用次数都是2。<br>在采用标记清除策略的实现中，由于函数执行之后，这两个对象都离开了作用域，因此这种相互引用不是个问题。但在采用引用计数策略的实现中，当函数执行完毕后，objectA 和objectB 还将继续存在，因为它们的引用次数永远不会是0。<br>假如这个函数被重复多次调用，就会导致大量内存得不到回收。</p>\n<h3 id=\"IE8-的循环引用问题\"><a href=\"#IE8-的循环引用问题\" class=\"headerlink\" title=\"IE8 的循环引用问题\"></a>IE8 的循环引用问题</h3><p>IE 中有一部分对象并不是原生JavaScript 对象。例如，其BOM 和DOM 中的对象就是使用C++以COM（Component Object Model，组件对象模型）对象的形式实现的，而COM 对象的垃圾收集机制采用的就是引用计数策略。因此，即使IE 的JavaScript 引擎是使用标记清除策略来实现的，但JavaScript 访问的COM 对象依然是基于引用计数策略的。换句话说，只要在IE 中涉及COM 对象，就会存在循环引用的问题。IE9 把BOM 和DOM 对象都转换成了真正的JavaScript 对象。</p>\n<h3 id=\"如何避免循环引用问题\"><a href=\"#如何避免循环引用问题\" class=\"headerlink\" title=\"如何避免循环引用问题\"></a>如何避免循环引用问题</h3><p>为了避免这样的循环引用问题，最好是在不使用它们的时候手工断开连接，即将不使用的对象置为 null。将变量设置为null 意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次运行时，就会删除这些值并回收它们占用的内存。这个做法叫做解除引用。一般局部变量会在它们离开执行环境时自动被解除引用。对于全局变量globalPerson 而言，则需要我们在不使用它的时候手工为它解除引用。</p>\n<h3 id=\"解除引用会立刻回收内存吗\"><a href=\"#解除引用会立刻回收内存吗\" class=\"headerlink\" title=\"解除引用会立刻回收内存吗\"></a>解除引用会立刻回收内存吗</h3><p>解除一个值的引用并不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"可以给基本类型变量加属性吗\"><a href=\"#可以给基本类型变量加属性吗\" class=\"headerlink\" title=\"可以给基本类型变量加属性吗\"></a>可以给基本类型变量加属性吗</h3><p>可以加，不会报错，不过瞬间就会被删掉，所以下次无法调用。</p>\n<h3 id=\"如何理解函数的参数是按值传递的\"><a href=\"#如何理解函数的参数是按值传递的\" class=\"headerlink\" title=\"如何理解函数的参数是按值传递的\"></a>如何理解函数的参数是按值传递的</h3><p>把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。<br>基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样。<br>在向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。</p>","more":"<h3 id=\"介绍下instanceof-操作符和-typeof-的区别\"><a href=\"#介绍下instanceof-操作符和-typeof-的区别\" class=\"headerlink\" title=\"介绍下instanceof 操作符和 typeof 的区别\"></a>介绍下instanceof 操作符和 typeof 的区别</h3><p>typeof 操作符是确定一个变量是字符串、数值、布尔值，还是undefined 的最佳工具。<br>但在检测引用类型的值时，这个操作符的用处不大。通常，我们并不是想知道某个值是对象，而是想知道它是什么类型的对象。<br>如果变量是给定引用类型（根据它的原型链来识别；第6 章将介绍原型链）的实例，那么 instanceof 操作符就会返回true。<br>所有引用类型的值都是Object 的实例。因此，在检测一个引用类型值和Object 构造函数时，instanceof 操作符始终会返回true。<br>如果使用instanceof 操作符检测基本类型的值，则该操作符始终会返回false，因为基本类型不是对象。</p>\n<h3 id=\"关于-var-声明的变量的位置\"><a href=\"#关于-var-声明的变量的位置\" class=\"headerlink\" title=\"关于 var 声明的变量的位置\"></a>关于 var 声明的变量的位置</h3><p>使用var 声明的变量会自动被添加到最接近的环境中。在函数内部，最接近的环境就是函数的局部环境；在with 语句中，最接近的环境是函数环境。<br>如果初始化变量时没有使用var 声明，该变量会自动被添加到全局环境。</p>\n<h3 id=\"垃圾收集的周期\"><a href=\"#垃圾收集的周期\" class=\"headerlink\" title=\"垃圾收集的周期\"></a>垃圾收集的周期</h3><p>垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。</p>\n<h3 id=\"局部变量的生命周期\"><a href=\"#局部变量的生命周期\" class=\"headerlink\" title=\"局部变量的生命周期\"></a>局部变量的生命周期</h3><p>局部变量只在函数执行的过程中存在。而在这个过程中，会为局部变量在栈（或堆）内存上分配相应的空间，以便存储它们的值。然后在函数中使用这些变量，直至函数执行结束。此时，局部变量就没有存在的必要了，因此可以释放它们的内存以供将来使用。</p>\n<h3 id=\"垃圾收集的策略\"><a href=\"#垃圾收集的策略\" class=\"headerlink\" title=\"垃圾收集的策略\"></a>垃圾收集的策略</h3><ul>\n<li>标记清除<br>当变量进入环境（例如，在函数中声明一个变量）时，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。不过垃圾收集的时间间隔互有不同。</li>\n<li>引用计数<br>引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那些引用次数为零的值所占用的内存。</li>\n</ul>\n<h3 id=\"什么是循环引用\"><a href=\"#什么是循环引用\" class=\"headerlink\" title=\"什么是循环引用\"></a>什么是循环引用</h3><p>循环引用指的是对象A 中包含一个指向对象B 的指针，而对象B 中也包含一个指向对象A 的引用。这种情况两个对象的引用次数都是2。<br>在采用标记清除策略的实现中，由于函数执行之后，这两个对象都离开了作用域，因此这种相互引用不是个问题。但在采用引用计数策略的实现中，当函数执行完毕后，objectA 和objectB 还将继续存在，因为它们的引用次数永远不会是0。<br>假如这个函数被重复多次调用，就会导致大量内存得不到回收。</p>\n<h3 id=\"IE8-的循环引用问题\"><a href=\"#IE8-的循环引用问题\" class=\"headerlink\" title=\"IE8 的循环引用问题\"></a>IE8 的循环引用问题</h3><p>IE 中有一部分对象并不是原生JavaScript 对象。例如，其BOM 和DOM 中的对象就是使用C++以COM（Component Object Model，组件对象模型）对象的形式实现的，而COM 对象的垃圾收集机制采用的就是引用计数策略。因此，即使IE 的JavaScript 引擎是使用标记清除策略来实现的，但JavaScript 访问的COM 对象依然是基于引用计数策略的。换句话说，只要在IE 中涉及COM 对象，就会存在循环引用的问题。IE9 把BOM 和DOM 对象都转换成了真正的JavaScript 对象。</p>\n<h3 id=\"如何避免循环引用问题\"><a href=\"#如何避免循环引用问题\" class=\"headerlink\" title=\"如何避免循环引用问题\"></a>如何避免循环引用问题</h3><p>为了避免这样的循环引用问题，最好是在不使用它们的时候手工断开连接，即将不使用的对象置为 null。将变量设置为null 意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次运行时，就会删除这些值并回收它们占用的内存。这个做法叫做解除引用。一般局部变量会在它们离开执行环境时自动被解除引用。对于全局变量globalPerson 而言，则需要我们在不使用它的时候手工为它解除引用。</p>\n<h3 id=\"解除引用会立刻回收内存吗\"><a href=\"#解除引用会立刻回收内存吗\" class=\"headerlink\" title=\"解除引用会立刻回收内存吗\"></a>解除引用会立刻回收内存吗</h3><p>解除一个值的引用并不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收。</p>"},{"title":"JavaScript-常用的引用类型","date":"2021-03-19T04:48:53.000Z","_content":"\n### 方括号语法的优点是啥\n方括号语法的主要优点是可以通过变量来访问属性\n```js\nvar person = {name:\"zhang-san\"}\nvar propertyName = \"name\";\nconsole.log(person[propertyName]); // zhang-san\n```\n如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或保留字，也可以使用方括号表示法\n```js\nvar person = {\"my name\":\"zhang-san\"}\nconsole.log(person[\"my name\"]); // zhang-san\n```\n\n<!-- more -->\n\n### 怎么确定某个对象是不是数组\n对于一个网页，或者一个全局作用域而言，使用instanceof 操作符\n```js\nif (value instanceof Array){\n  //对数组执行某些操作\n}\n```\ninstanceof 操作符的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，那实际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的Array 构造函数。如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数。\n为了解决这个问题，ECMAScript 5 新增了Array.isArray()方法\n```js\nif (Array.isArray(value)){\n  //对数组执行某些操作\n}\n```\n\n### alert 为什么可以输出数组\n由于alert()要接收字符串参数，所以它会在后台调用toString()方法，由此会得到与直接调用toString()方法相同的结果。\n\n### 常用数组方法\n#### 基础操作\n```js\nvar colors = new Array();\n\n// 入栈 - push\nvar count = colors.push(\"red\", \"green\"); // 在后面加入，可接收任意数量参数\nconsole.log(count); // 返回数组长度\n\n// 出栈 - pop\nvar item = colors.pop(); // 移除最后一项\nconsole.log(item); // 返回被移除的项\n\n// 入队 - unshift\nvar count = colors.unshift(\"red\", \"green\"); // 在前面加入，可接收任意数量参数\nconsole.log(count); // 返回数组长度\n\n// 出队 - shift\nvar item = colors.shift(); // 移除第一项\nconsole.log(item); // 返回被移除的项\n\n----------------------------\n\nvar values = [3, 1, 4, 5, 2];\n\n// 数组反转 - reverse\nvalues.reverse(); // 数组反转\nconsole.log(values); // [2,5,4,1,3]\n\n// 数组排序 - soft\nvalues.sort(); // 默认从小到大排序\nconsole.log(values); // [1,2,3,4,5]\n\n-----------------------------\nindexOf()和lastIndexOf()。这两个方法都接收两个参数：要查找的项和（可选的）表示查找起点位置的索引\n\nvar numbers = [1,2,3,4,5,4,3,2,1];\n\n// 查找第一次出现的位置\nnumbers.indexOf(4); // 3\nnumbers.indexOf(4, 4); // 5\nnumbers.indexOf(8); // -1\n\n// 查找最后一次出现的位置\nnumbers.lastIndexOf(4); // 5\nnumbers.lastIndexOf(4, 4); // 3\nnumbers.lastIndexOf(8); // -1\n```\n\n#### sort() 是如何进行排序的\n在默认情况下，sort()方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。\n为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值，sort()方法比较的也是字符串，\n数值5 虽然小于10，但在进行字符串比较时，\"10\"则位于\"5\"的前面，如下所示，使用比较函数可以解决此问题：\n```js\nvar values = [0, 1, 5, 10, 15];\nvalues.sort(); // [0,1,10,15,5]\n\nvalues.sort((a,b)=>a-b) // [0, 1, 5, 10, 15]\nvalues.sort((a,b)=>b-a) // [15,10,5,1,0]\n```\n根据某属性排序\n```js\nvar values = [\n    {number : 3},\n    {number : 6},\n    {number : 5}\n    ]\n\nfunction createComparisonFunction(propertyName) {\n  return function(object1, object2){\n    var value1 = object1[propertyName];\n    var value2 = object2[propertyName];\n    return value1 - value2;\n  };\n}\n\nvalues.sort(createComparisonFunction('number'))\n\nconsole.dir(values)\n> Array(3)\n0: {number: 3}\n1: {number: 5}\n2: {number: 6}\nlength: 3\n```\n\n#### concat() 方法实现拷贝和拼接\n其中，concat()方法可以基于当前数组中的所有项创建一个新数组。\n具体来说，这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给concat()方法传递参数的情况下，它只是复制当前数组并返回副本。如果传递给concat()方法的是一或多个数组，则该方法会将这些数组中的每一项都添加到结果数组中。\n```js\nvar colors = [\"red\", \"green\", \"blue\"];\nvar colors2 = colors.concat(); // 拷贝，新开一块内存\nvar colors3 = colors; // 指向同一个内存地址\nvar colors4 = colors.concat(\"yellow\", [\"black\", \"brown\"]); // 可以接收任意数量参数\n```\n\n#### slice() 方法抽取部分数组\n能够基于当前数组中的一或多个项创建一个新数组。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。\n如果有两个参数，该方法返回起始和结束位置之间的项(但不包括结束位置的项)\n如果slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置\n第二个参数如果小于第一个参数，则返回空数组\n\n```js\nvar colors = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"];\nvar colors2 = colors.slice(); // [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"]\nvar colors3 = colors.slice(0); // [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"]\nvar colors4 = colors.slice(-3,-1); // [\"blue\", \"yellow\"]\n```\n\n#### splice()方法用于替换\nsplice()的主要用途是向数组的中部插入项，但使用这种方法的方式则有如下3 种。\n- 删除：可以删除任意数量的项，只需指定2 个参数：要删除的第一项的位置和要删除的项数。例如，splice(0,2)会删除数组中的前两项。\n- 插入：可以向指定位置插入任意数量的项，只需提供3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入第四、第五，以至任意多个项。例如，splice(2,0,\"red\",\"green\")会从当前数组的位置2 开始插入字符串\"red\"和\"green\"。\n- 替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,\"red\",\"green\")会删除当前数组位置2 的项，然后再从位置2 开始插入字符串\"red\"和\"green\"。\n\nsplice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项\n\n#### 常用的迭代方法和归并方法\n下列方法都不会修改数组中的值，只是返回新的数组\n- every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。\n- filter()：对数组中的每一项运行给定函数，返回该函数会返回true 的项组成的数组。\n- forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。\n- map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\n- some()：对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。\n- reduce()：接收4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。适用于累加等操作。\n- reduceRight()：功能与 reduce() 方法相同，不过是从数组的最后一项开始，向前遍历到第一项。\n\n\n### 正则 exec() 方法\n```js\nvar co = \"red,green,blue,yellow,purple\"\nvar a = /r/g\n\na.exec(co)\n> [\"r\", index: 0, input: \"red,green,blue,yellow,purple\", groups: undefined]\na.exec(co)\n> [\"r\", index: 5, input: \"red,green,blue,yellow,purple\", groups: undefined]\na.exec(co)\n> [\"r\", index: 24, input: \"red,green,blue,yellow,purple\", groups: undefined]\na.exec(co)\n> null\n```\n\n### 正则 test() 方法\n它接受一个字符串参数。在模式与该参数匹配的情况下返回true；否则，返回false。在只想知道目标字符串与某个模式是否匹配，但不需要知道其文本内容的情况下，使用这个方法非常方便。因此，test()方法经常被用在if 语句中，如下面的例子所示。\n```js\nvar text = \"000-00-0000\";\nvar pattern = /\\d{3}-\\d{2}-\\d{4}/;\nif (pattern.test(text)){\n  console.log(\"匹配成功\");\n}\n```\n\n### 怎么理解函数实际上是对象\n每个函数都是Function 类型的实例，而且都与其他引用类型一样具有属性和方法。\n```js\nvar funcA = function(){console.log('funcA')};\nfuncA.funcB = function(){console.log('funcB')};\nfuncA.test = 12312;\n\nfuncA() // 'funcA'\nfuncA.test // 12312\nfuncA.funcB() // 'funcB'\n```\n\n### 函数声明和函数表达式的执行时间区别\n解析器在向执行环境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用，至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。\n在代码开始执行之前，解析器就已经通过一个名为函数声明提升（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript 引擎在第一遍会声明函数并将它们放到源代码树的顶部。所以，即使声明函数的代码在调用它的代码后面，JavaScript 引擎也能把函数声明提升到顶部。\n\n### 递归解耦 - callee\n```js\nfunction factorial(num){\n  if (num <=1) {\n    return 1;\n  } else {\n    return num * factorial(num-1)\n  }\n}\n\n------------->\n\nfunction factorial(num){\n  if (num <=1) {\n    return 1;\n  } else {\n    return num * arguments.callee(num-1)\n  }\n}\n```\n重写后的factorial()函数的函数体内，没有再引用函数名factorial。这样，无论引用函数时使用的是什么名字，都可以保证正常完成递归调用。例如：\n```js\nvar trueFactorial = factorial;\n\nfactorial = function(){\n  return 0;\n};\n\nalert(trueFactorial(5)); //120\nalert(factorial(5)); //0\n```\n\n### 调用当前函数的函数的引用 - caller\n这个属性中保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值为null。\n```js\nfunction outer(){\n  inner();\n}\n\nfunction inner(){\n  console.log(inner.caller);\n}\nouter();\n\n-------->\n\n// ƒ outer(){\n//  inner();\n// }\n```\n因为outer()调用了inter()，所以 inner.caller 就指向outer()。为了实现更松散的耦合，也可以通过arguments.callee.caller 来访问相同的信息。\n```js\nfunction outer(){\n  inner();\n}\n\nfunction inner(){\n  alert(arguments.callee.caller);\n}\n\nouter();\n```\n\n### 设置作用域 - apply/call/bind\n每个函数都包含两个非继承而来的方法：apply()和call()。这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this 对象的值。\n首先，apply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组。\ncall()方法与apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于call() 方法而言，第一个参数是this 值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用 call()方法时，传递给函数的参数必须逐个列举出来，如下面的例子所示。\n```js\nfunction sum(num1, num2){\n  return num1 + num2;\n}\n\nfunction callSum1(num1, num2){\n  return sum.apply(this, [num1, num2]); // 传入数组\n}\n\nfunction callSum2(num1, num2){\n  return sum.call(this, num1, num2); // 单个传入\n}\n```\n事实上，传递参数并非apply()和call()真正的用武之地；它们真正强大的地方是能够扩充函数赖以运行的作用域。\n```js\nwindow.color = \"red\";\n\nvar o = { color: \"blue\" };\n\nfunction sayColor(){\n  alert(this.color);\n}\n\nsayColor(); //red\nsayColor.call(this); //red\nsayColor.call(window); //red\nsayColor.call(o); //blue\n```\nECMAScript 5 还定义了一个方法：bind()。这个方法会创建一个函数的实例，其this 值会被绑定到传给bind()函数的值。例如：\n```js\nwindow.color = \"red\";\nvar o = { color: \"blue\" };\n\nfunction sayColor(){\n  alert(this.color);\n}\n\nvar objectSayColor = sayColor.bind(o);\nobjectSayColor(); //blue\n```\n\n### 基本包装类型\n```js\nvar s1 = \"some text\";\nvar s2 = s1.substring(2);\n```\n字符串作为基本类型值，为何向引用类型值一样可以调用方法呢。实际上其中经历了如下过程。\n(1) 创建String 类型的一个实例；\n(2) 在实例上调用指定的方法；\n(3) 销毁这个实例。\n可以将以上三个步骤想象成是执行了下列ECMAScript 代码。\n```js\nvar s1 = new String(\"some text\");\nvar s2 = s1.substring(2);\ns1 = null;\n```\n\n引用类型与基本包装类型的主要区别就是对象的生存期。使用new 操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。这意味着我们不能在运行时为基本类型值添加属性和方法。来看下面的例子：\n```js\nvar s1 = \"some text\";\ns1.color = \"red\";\nalert(s1.color); //undefined\n```\n在此，第二行代码试图为字符串s1 添加一个color 属性。但是，当第三行代码再次访问s1 时，其color 属性不见了。问题的原因就是第二行创建的String 对象在执行第三行代码时已经被销毁了。第三行代码又创建自己的String 对象，而该对象没有color 属性。\n\n### 常用方法\nnumber\n```js\n--- 保留两位小数 ---\nvar num = 10;\nalert(num.toFixed(2)); //\"10.00\"\n10.001.toFixed(2) // \"10.00\"\n10.005.toFixed(2) // \"10.01\"\n```\n\nstring\n```js\n--- 字符串长度 ---\nvar stringValue = \"hello world\";\nalert(stringValue.length); //\"11\"\n\n--- 返回给定位置的字符 ---\nvar stringValue = \"hello world\";\nalert(stringValue.charAt(1)); //\"e\"\n\n--- 指定位置字符的字符编码 ---\nvar stringValue = \"hello world\";\nalert(stringValue.charCodeAt(1)); //输出\"101\"\n\n--- 以索引访问指定位置字符 ---\nvar stringValue = \"hello world\";\nalert(stringValue[1]); //\"e\"\n\n--- 拼接字符串 ---\nvar stringValue = \"hello \";\nvar result = stringValue.concat(\"world\");\nalert(result); //\"hello world\"\nalert(stringValue); //\"hello\"\n\nvar stringValue = \"hello \";\nvar result = stringValue.concat(\"world\", \"!\");\nalert(result); //\"hello world!\"\nalert(stringValue); //\"hello\"\n\n--- \n裁剪字符串的三种方式 slice()、substr()和substring()\n具体来说，slice()和 substring()的第二个参数指定的是子字符串最后一个字符后面的位置。\n而substr()的第二个参数指定的则是返回的字符个数。\n如果没有给这些方法传递第二个参数，则将字符串的长度作为结束位置。\n---\nvar stringValue = \"hello world\";\nalert(stringValue.slice(3)); //\"lo world\"\nalert(stringValue.substring(3)); //\"lo world\"\nalert(stringValue.substr(3)); //\"lo world\"\nalert(stringValue.slice(3, 7)); //\"lo w\"\nalert(stringValue.substring(3,7)); //\"lo w\"\nalert(stringValue.substr(3, 7)); //\"lo worl\"\n\n---\n在传递给这些方法的参数是负值的情况下，它们的行为就不尽相同了。\n其中，slice()方法会将传入的负值与字符串的长度相加。\nsubstr()方法将负的第一个参数加上字符串的长度，而将负的第二个参数转换为0。\n最后，substring()方法会把所有负值参数都转换为0。\n---\nvar stringValue = \"hello world\";\nalert(stringValue.slice(-3)); //\"rld\"\nalert(stringValue.substring(-3)); //\"hello world\"\nalert(stringValue.substr(-3)); //\"rld\"\nalert(stringValue.slice(3, -4)); //\"lo w\"\nalert(stringValue.substring(3, -4)); //\"hel\"\nalert(stringValue.substr(3, -4)); //\"\"（空字符串）\n\n--- 查找字符串位置 ---\nvar stringValue = \"hello world\";\nalert(stringValue.indexOf(\"o\")); //4\nalert(stringValue.lastIndexOf(\"o\")); //7\n\nvar stringValue = \"hello world\";\nalert(stringValue.indexOf(\"o\", 6)); //7\nalert(stringValue.lastIndexOf(\"o\", 6)); //4\n\n--- 去除首尾空格 ---\nvar stringValue = \" hello world \";\nvar trimmedStringValue = stringValue.trim();\nalert(stringValue); //\" hello world \"\nalert(trimmedStringValue); //\"hello world\"\n\n--- 大小写转换 ---\nvar stringValue = \"hello world\";\nalert(stringValue.toLocaleUpperCase()); //\"HELLO WORLD\"\nalert(stringValue.toUpperCase()); //\"HELLO WORLD\"\nalert(stringValue.toLocaleLowerCase()); //\"hello world\"\nalert(stringValue.toLowerCase()); //\"hello world\"\n\n--- 查找模式 字符串位置 ---\nvar text = \"cat, bat, sat, fat\";\nvar pos = text.search(/at/); // 1\nvar pos1 = text.search(/tt/); // -1\n\n--- 字符串替换 ---\nvar text = \"cat, bat, sat, fat\";\nvar result = text.replace(\"at\", \"ond\");\nalert(result); //\"cond, bat, sat, fat\"\nresult = text.replace(/at/g, \"ond\");\naler t(result); //\"cond, bond, sond, fond\"\n\n--- 字符串转数组 ---\n- split()方法可以接受可选的第二个参数，用于指定数组的大小，以便确保返回的数组不会超过既定大小。\nvar colorText = \"red,blue,green,yellow\";\nvar colors1 = colorText.split(\",\"); //[\"red\", \"blue\", \"green\", \"yellow\"]\nvar colors2 = colorText.split(\",\", 2); //[\"red\", \"blue\"]\n\n--- 字符编码转字符串 ---\nalert(String.fromCharCode(104, 101, 108, 108, 111)); //\"hello\"\n```\n\nmath\n```js\n--- 最大和最小值 ---\nvar max = Math.max(3, 54, 32, 16);\nalert(max); //54\nvar min = Math.min(3, 54, 32, 16);\nalert(min); //3\n\n--- 舍入方法 ---\n  Math.ceil()执行向上舍入，即它总是将数值向上舍入为最接近的整数\n  Math.floor()执行向下舍入，即它总是将数值向下舍入为最接近的整数\n  Math.round()执行标准舍入，即它总是将数值四舍五入为最接近的整数\n\n--- 随机数 ---\n  Math.random()方法返回大于等于0 小于1 的一个随机数\n值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)\n1到10之间的数值：var num = Math.floor(Math.random() * 10 + 1);\n```\n","source":"_posts/JavaScript-常用的引用类型.md","raw":"---\ntitle: JavaScript-常用的引用类型\ndate: 2021-03-19 12:48:53\ntags: JavaScript\n---\n\n### 方括号语法的优点是啥\n方括号语法的主要优点是可以通过变量来访问属性\n```js\nvar person = {name:\"zhang-san\"}\nvar propertyName = \"name\";\nconsole.log(person[propertyName]); // zhang-san\n```\n如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或保留字，也可以使用方括号表示法\n```js\nvar person = {\"my name\":\"zhang-san\"}\nconsole.log(person[\"my name\"]); // zhang-san\n```\n\n<!-- more -->\n\n### 怎么确定某个对象是不是数组\n对于一个网页，或者一个全局作用域而言，使用instanceof 操作符\n```js\nif (value instanceof Array){\n  //对数组执行某些操作\n}\n```\ninstanceof 操作符的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，那实际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的Array 构造函数。如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数。\n为了解决这个问题，ECMAScript 5 新增了Array.isArray()方法\n```js\nif (Array.isArray(value)){\n  //对数组执行某些操作\n}\n```\n\n### alert 为什么可以输出数组\n由于alert()要接收字符串参数，所以它会在后台调用toString()方法，由此会得到与直接调用toString()方法相同的结果。\n\n### 常用数组方法\n#### 基础操作\n```js\nvar colors = new Array();\n\n// 入栈 - push\nvar count = colors.push(\"red\", \"green\"); // 在后面加入，可接收任意数量参数\nconsole.log(count); // 返回数组长度\n\n// 出栈 - pop\nvar item = colors.pop(); // 移除最后一项\nconsole.log(item); // 返回被移除的项\n\n// 入队 - unshift\nvar count = colors.unshift(\"red\", \"green\"); // 在前面加入，可接收任意数量参数\nconsole.log(count); // 返回数组长度\n\n// 出队 - shift\nvar item = colors.shift(); // 移除第一项\nconsole.log(item); // 返回被移除的项\n\n----------------------------\n\nvar values = [3, 1, 4, 5, 2];\n\n// 数组反转 - reverse\nvalues.reverse(); // 数组反转\nconsole.log(values); // [2,5,4,1,3]\n\n// 数组排序 - soft\nvalues.sort(); // 默认从小到大排序\nconsole.log(values); // [1,2,3,4,5]\n\n-----------------------------\nindexOf()和lastIndexOf()。这两个方法都接收两个参数：要查找的项和（可选的）表示查找起点位置的索引\n\nvar numbers = [1,2,3,4,5,4,3,2,1];\n\n// 查找第一次出现的位置\nnumbers.indexOf(4); // 3\nnumbers.indexOf(4, 4); // 5\nnumbers.indexOf(8); // -1\n\n// 查找最后一次出现的位置\nnumbers.lastIndexOf(4); // 5\nnumbers.lastIndexOf(4, 4); // 3\nnumbers.lastIndexOf(8); // -1\n```\n\n#### sort() 是如何进行排序的\n在默认情况下，sort()方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。\n为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值，sort()方法比较的也是字符串，\n数值5 虽然小于10，但在进行字符串比较时，\"10\"则位于\"5\"的前面，如下所示，使用比较函数可以解决此问题：\n```js\nvar values = [0, 1, 5, 10, 15];\nvalues.sort(); // [0,1,10,15,5]\n\nvalues.sort((a,b)=>a-b) // [0, 1, 5, 10, 15]\nvalues.sort((a,b)=>b-a) // [15,10,5,1,0]\n```\n根据某属性排序\n```js\nvar values = [\n    {number : 3},\n    {number : 6},\n    {number : 5}\n    ]\n\nfunction createComparisonFunction(propertyName) {\n  return function(object1, object2){\n    var value1 = object1[propertyName];\n    var value2 = object2[propertyName];\n    return value1 - value2;\n  };\n}\n\nvalues.sort(createComparisonFunction('number'))\n\nconsole.dir(values)\n> Array(3)\n0: {number: 3}\n1: {number: 5}\n2: {number: 6}\nlength: 3\n```\n\n#### concat() 方法实现拷贝和拼接\n其中，concat()方法可以基于当前数组中的所有项创建一个新数组。\n具体来说，这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给concat()方法传递参数的情况下，它只是复制当前数组并返回副本。如果传递给concat()方法的是一或多个数组，则该方法会将这些数组中的每一项都添加到结果数组中。\n```js\nvar colors = [\"red\", \"green\", \"blue\"];\nvar colors2 = colors.concat(); // 拷贝，新开一块内存\nvar colors3 = colors; // 指向同一个内存地址\nvar colors4 = colors.concat(\"yellow\", [\"black\", \"brown\"]); // 可以接收任意数量参数\n```\n\n#### slice() 方法抽取部分数组\n能够基于当前数组中的一或多个项创建一个新数组。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。\n如果有两个参数，该方法返回起始和结束位置之间的项(但不包括结束位置的项)\n如果slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置\n第二个参数如果小于第一个参数，则返回空数组\n\n```js\nvar colors = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"];\nvar colors2 = colors.slice(); // [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"]\nvar colors3 = colors.slice(0); // [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"]\nvar colors4 = colors.slice(-3,-1); // [\"blue\", \"yellow\"]\n```\n\n#### splice()方法用于替换\nsplice()的主要用途是向数组的中部插入项，但使用这种方法的方式则有如下3 种。\n- 删除：可以删除任意数量的项，只需指定2 个参数：要删除的第一项的位置和要删除的项数。例如，splice(0,2)会删除数组中的前两项。\n- 插入：可以向指定位置插入任意数量的项，只需提供3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入第四、第五，以至任意多个项。例如，splice(2,0,\"red\",\"green\")会从当前数组的位置2 开始插入字符串\"red\"和\"green\"。\n- 替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,\"red\",\"green\")会删除当前数组位置2 的项，然后再从位置2 开始插入字符串\"red\"和\"green\"。\n\nsplice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项\n\n#### 常用的迭代方法和归并方法\n下列方法都不会修改数组中的值，只是返回新的数组\n- every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。\n- filter()：对数组中的每一项运行给定函数，返回该函数会返回true 的项组成的数组。\n- forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。\n- map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\n- some()：对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。\n- reduce()：接收4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。适用于累加等操作。\n- reduceRight()：功能与 reduce() 方法相同，不过是从数组的最后一项开始，向前遍历到第一项。\n\n\n### 正则 exec() 方法\n```js\nvar co = \"red,green,blue,yellow,purple\"\nvar a = /r/g\n\na.exec(co)\n> [\"r\", index: 0, input: \"red,green,blue,yellow,purple\", groups: undefined]\na.exec(co)\n> [\"r\", index: 5, input: \"red,green,blue,yellow,purple\", groups: undefined]\na.exec(co)\n> [\"r\", index: 24, input: \"red,green,blue,yellow,purple\", groups: undefined]\na.exec(co)\n> null\n```\n\n### 正则 test() 方法\n它接受一个字符串参数。在模式与该参数匹配的情况下返回true；否则，返回false。在只想知道目标字符串与某个模式是否匹配，但不需要知道其文本内容的情况下，使用这个方法非常方便。因此，test()方法经常被用在if 语句中，如下面的例子所示。\n```js\nvar text = \"000-00-0000\";\nvar pattern = /\\d{3}-\\d{2}-\\d{4}/;\nif (pattern.test(text)){\n  console.log(\"匹配成功\");\n}\n```\n\n### 怎么理解函数实际上是对象\n每个函数都是Function 类型的实例，而且都与其他引用类型一样具有属性和方法。\n```js\nvar funcA = function(){console.log('funcA')};\nfuncA.funcB = function(){console.log('funcB')};\nfuncA.test = 12312;\n\nfuncA() // 'funcA'\nfuncA.test // 12312\nfuncA.funcB() // 'funcB'\n```\n\n### 函数声明和函数表达式的执行时间区别\n解析器在向执行环境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用，至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。\n在代码开始执行之前，解析器就已经通过一个名为函数声明提升（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript 引擎在第一遍会声明函数并将它们放到源代码树的顶部。所以，即使声明函数的代码在调用它的代码后面，JavaScript 引擎也能把函数声明提升到顶部。\n\n### 递归解耦 - callee\n```js\nfunction factorial(num){\n  if (num <=1) {\n    return 1;\n  } else {\n    return num * factorial(num-1)\n  }\n}\n\n------------->\n\nfunction factorial(num){\n  if (num <=1) {\n    return 1;\n  } else {\n    return num * arguments.callee(num-1)\n  }\n}\n```\n重写后的factorial()函数的函数体内，没有再引用函数名factorial。这样，无论引用函数时使用的是什么名字，都可以保证正常完成递归调用。例如：\n```js\nvar trueFactorial = factorial;\n\nfactorial = function(){\n  return 0;\n};\n\nalert(trueFactorial(5)); //120\nalert(factorial(5)); //0\n```\n\n### 调用当前函数的函数的引用 - caller\n这个属性中保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值为null。\n```js\nfunction outer(){\n  inner();\n}\n\nfunction inner(){\n  console.log(inner.caller);\n}\nouter();\n\n-------->\n\n// ƒ outer(){\n//  inner();\n// }\n```\n因为outer()调用了inter()，所以 inner.caller 就指向outer()。为了实现更松散的耦合，也可以通过arguments.callee.caller 来访问相同的信息。\n```js\nfunction outer(){\n  inner();\n}\n\nfunction inner(){\n  alert(arguments.callee.caller);\n}\n\nouter();\n```\n\n### 设置作用域 - apply/call/bind\n每个函数都包含两个非继承而来的方法：apply()和call()。这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this 对象的值。\n首先，apply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组。\ncall()方法与apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于call() 方法而言，第一个参数是this 值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用 call()方法时，传递给函数的参数必须逐个列举出来，如下面的例子所示。\n```js\nfunction sum(num1, num2){\n  return num1 + num2;\n}\n\nfunction callSum1(num1, num2){\n  return sum.apply(this, [num1, num2]); // 传入数组\n}\n\nfunction callSum2(num1, num2){\n  return sum.call(this, num1, num2); // 单个传入\n}\n```\n事实上，传递参数并非apply()和call()真正的用武之地；它们真正强大的地方是能够扩充函数赖以运行的作用域。\n```js\nwindow.color = \"red\";\n\nvar o = { color: \"blue\" };\n\nfunction sayColor(){\n  alert(this.color);\n}\n\nsayColor(); //red\nsayColor.call(this); //red\nsayColor.call(window); //red\nsayColor.call(o); //blue\n```\nECMAScript 5 还定义了一个方法：bind()。这个方法会创建一个函数的实例，其this 值会被绑定到传给bind()函数的值。例如：\n```js\nwindow.color = \"red\";\nvar o = { color: \"blue\" };\n\nfunction sayColor(){\n  alert(this.color);\n}\n\nvar objectSayColor = sayColor.bind(o);\nobjectSayColor(); //blue\n```\n\n### 基本包装类型\n```js\nvar s1 = \"some text\";\nvar s2 = s1.substring(2);\n```\n字符串作为基本类型值，为何向引用类型值一样可以调用方法呢。实际上其中经历了如下过程。\n(1) 创建String 类型的一个实例；\n(2) 在实例上调用指定的方法；\n(3) 销毁这个实例。\n可以将以上三个步骤想象成是执行了下列ECMAScript 代码。\n```js\nvar s1 = new String(\"some text\");\nvar s2 = s1.substring(2);\ns1 = null;\n```\n\n引用类型与基本包装类型的主要区别就是对象的生存期。使用new 操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。这意味着我们不能在运行时为基本类型值添加属性和方法。来看下面的例子：\n```js\nvar s1 = \"some text\";\ns1.color = \"red\";\nalert(s1.color); //undefined\n```\n在此，第二行代码试图为字符串s1 添加一个color 属性。但是，当第三行代码再次访问s1 时，其color 属性不见了。问题的原因就是第二行创建的String 对象在执行第三行代码时已经被销毁了。第三行代码又创建自己的String 对象，而该对象没有color 属性。\n\n### 常用方法\nnumber\n```js\n--- 保留两位小数 ---\nvar num = 10;\nalert(num.toFixed(2)); //\"10.00\"\n10.001.toFixed(2) // \"10.00\"\n10.005.toFixed(2) // \"10.01\"\n```\n\nstring\n```js\n--- 字符串长度 ---\nvar stringValue = \"hello world\";\nalert(stringValue.length); //\"11\"\n\n--- 返回给定位置的字符 ---\nvar stringValue = \"hello world\";\nalert(stringValue.charAt(1)); //\"e\"\n\n--- 指定位置字符的字符编码 ---\nvar stringValue = \"hello world\";\nalert(stringValue.charCodeAt(1)); //输出\"101\"\n\n--- 以索引访问指定位置字符 ---\nvar stringValue = \"hello world\";\nalert(stringValue[1]); //\"e\"\n\n--- 拼接字符串 ---\nvar stringValue = \"hello \";\nvar result = stringValue.concat(\"world\");\nalert(result); //\"hello world\"\nalert(stringValue); //\"hello\"\n\nvar stringValue = \"hello \";\nvar result = stringValue.concat(\"world\", \"!\");\nalert(result); //\"hello world!\"\nalert(stringValue); //\"hello\"\n\n--- \n裁剪字符串的三种方式 slice()、substr()和substring()\n具体来说，slice()和 substring()的第二个参数指定的是子字符串最后一个字符后面的位置。\n而substr()的第二个参数指定的则是返回的字符个数。\n如果没有给这些方法传递第二个参数，则将字符串的长度作为结束位置。\n---\nvar stringValue = \"hello world\";\nalert(stringValue.slice(3)); //\"lo world\"\nalert(stringValue.substring(3)); //\"lo world\"\nalert(stringValue.substr(3)); //\"lo world\"\nalert(stringValue.slice(3, 7)); //\"lo w\"\nalert(stringValue.substring(3,7)); //\"lo w\"\nalert(stringValue.substr(3, 7)); //\"lo worl\"\n\n---\n在传递给这些方法的参数是负值的情况下，它们的行为就不尽相同了。\n其中，slice()方法会将传入的负值与字符串的长度相加。\nsubstr()方法将负的第一个参数加上字符串的长度，而将负的第二个参数转换为0。\n最后，substring()方法会把所有负值参数都转换为0。\n---\nvar stringValue = \"hello world\";\nalert(stringValue.slice(-3)); //\"rld\"\nalert(stringValue.substring(-3)); //\"hello world\"\nalert(stringValue.substr(-3)); //\"rld\"\nalert(stringValue.slice(3, -4)); //\"lo w\"\nalert(stringValue.substring(3, -4)); //\"hel\"\nalert(stringValue.substr(3, -4)); //\"\"（空字符串）\n\n--- 查找字符串位置 ---\nvar stringValue = \"hello world\";\nalert(stringValue.indexOf(\"o\")); //4\nalert(stringValue.lastIndexOf(\"o\")); //7\n\nvar stringValue = \"hello world\";\nalert(stringValue.indexOf(\"o\", 6)); //7\nalert(stringValue.lastIndexOf(\"o\", 6)); //4\n\n--- 去除首尾空格 ---\nvar stringValue = \" hello world \";\nvar trimmedStringValue = stringValue.trim();\nalert(stringValue); //\" hello world \"\nalert(trimmedStringValue); //\"hello world\"\n\n--- 大小写转换 ---\nvar stringValue = \"hello world\";\nalert(stringValue.toLocaleUpperCase()); //\"HELLO WORLD\"\nalert(stringValue.toUpperCase()); //\"HELLO WORLD\"\nalert(stringValue.toLocaleLowerCase()); //\"hello world\"\nalert(stringValue.toLowerCase()); //\"hello world\"\n\n--- 查找模式 字符串位置 ---\nvar text = \"cat, bat, sat, fat\";\nvar pos = text.search(/at/); // 1\nvar pos1 = text.search(/tt/); // -1\n\n--- 字符串替换 ---\nvar text = \"cat, bat, sat, fat\";\nvar result = text.replace(\"at\", \"ond\");\nalert(result); //\"cond, bat, sat, fat\"\nresult = text.replace(/at/g, \"ond\");\naler t(result); //\"cond, bond, sond, fond\"\n\n--- 字符串转数组 ---\n- split()方法可以接受可选的第二个参数，用于指定数组的大小，以便确保返回的数组不会超过既定大小。\nvar colorText = \"red,blue,green,yellow\";\nvar colors1 = colorText.split(\",\"); //[\"red\", \"blue\", \"green\", \"yellow\"]\nvar colors2 = colorText.split(\",\", 2); //[\"red\", \"blue\"]\n\n--- 字符编码转字符串 ---\nalert(String.fromCharCode(104, 101, 108, 108, 111)); //\"hello\"\n```\n\nmath\n```js\n--- 最大和最小值 ---\nvar max = Math.max(3, 54, 32, 16);\nalert(max); //54\nvar min = Math.min(3, 54, 32, 16);\nalert(min); //3\n\n--- 舍入方法 ---\n  Math.ceil()执行向上舍入，即它总是将数值向上舍入为最接近的整数\n  Math.floor()执行向下舍入，即它总是将数值向下舍入为最接近的整数\n  Math.round()执行标准舍入，即它总是将数值四舍五入为最接近的整数\n\n--- 随机数 ---\n  Math.random()方法返回大于等于0 小于1 的一个随机数\n值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)\n1到10之间的数值：var num = Math.floor(Math.random() * 10 + 1);\n```\n","slug":"JavaScript-常用的引用类型","published":1,"updated":"2021-09-04T09:47:13.417Z","_id":"ckmikb9bw0000tgpvbiu0dwaa","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"方括号语法的优点是啥\"><a href=\"#方括号语法的优点是啥\" class=\"headerlink\" title=\"方括号语法的优点是啥\"></a>方括号语法的优点是啥</h3><p>方括号语法的主要优点是可以通过变量来访问属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;zhang-san&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> propertyName = <span class=\"string\">&quot;name&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person[propertyName]); <span class=\"comment\">// zhang-san</span></span><br></pre></td></tr></table></figure>\n<p>如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或保留字，也可以使用方括号表示法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;<span class=\"string\">&quot;my name&quot;</span>:<span class=\"string\">&quot;zhang-san&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person[<span class=\"string\">&quot;my name&quot;</span>]); <span class=\"comment\">// zhang-san</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"怎么确定某个对象是不是数组\"><a href=\"#怎么确定某个对象是不是数组\" class=\"headerlink\" title=\"怎么确定某个对象是不是数组\"></a>怎么确定某个对象是不是数组</h3><p>对于一个网页，或者一个全局作用域而言，使用instanceof 操作符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//对数组执行某些操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>instanceof 操作符的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，那实际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的Array 构造函数。如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数。<br>为了解决这个问题，ECMAScript 5 新增了Array.isArray()方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value))&#123;</span><br><span class=\"line\">  <span class=\"comment\">//对数组执行某些操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"alert-为什么可以输出数组\"><a href=\"#alert-为什么可以输出数组\" class=\"headerlink\" title=\"alert 为什么可以输出数组\"></a>alert 为什么可以输出数组</h3><p>由于alert()要接收字符串参数，所以它会在后台调用toString()方法，由此会得到与直接调用toString()方法相同的结果。</p>\n<h3 id=\"常用数组方法\"><a href=\"#常用数组方法\" class=\"headerlink\" title=\"常用数组方法\"></a>常用数组方法</h3><h4 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入栈 - push</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> count = colors.push(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>); <span class=\"comment\">// 在后面加入，可接收任意数量参数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// 返回数组长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出栈 - pop</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = colors.pop(); <span class=\"comment\">// 移除最后一项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// 返回被移除的项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队 - unshift</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> count = colors.unshift(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>); <span class=\"comment\">// 在前面加入，可接收任意数量参数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// 返回数组长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队 - shift</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = colors.shift(); <span class=\"comment\">// 移除第一项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// 返回被移除的项</span></span><br><span class=\"line\"></span><br><span class=\"line\">----------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组反转 - reverse</span></span><br><span class=\"line\">values.reverse(); <span class=\"comment\">// 数组反转</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// [2,5,4,1,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组排序 - soft</span></span><br><span class=\"line\">values.sort(); <span class=\"comment\">// 默认从小到大排序</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// [1,2,3,4,5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------</span><br><span class=\"line\">indexOf()和lastIndexOf()。这两个方法都接收两个参数：要查找的项和（可选的）表示查找起点位置的索引</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找第一次出现的位置</span></span><br><span class=\"line\">numbers.indexOf(<span class=\"number\">4</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">numbers.indexOf(<span class=\"number\">4</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\">numbers.indexOf(<span class=\"number\">8</span>); <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找最后一次出现的位置</span></span><br><span class=\"line\">numbers.lastIndexOf(<span class=\"number\">4</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\">numbers.lastIndexOf(<span class=\"number\">4</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">numbers.lastIndexOf(<span class=\"number\">8</span>); <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sort-是如何进行排序的\"><a href=\"#sort-是如何进行排序的\" class=\"headerlink\" title=\"sort() 是如何进行排序的\"></a>sort() 是如何进行排序的</h4><p>在默认情况下，sort()方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。<br>为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值，sort()方法比较的也是字符串，<br>数值5 虽然小于10，但在进行字符串比较时，”10”则位于”5”的前面，如下所示，使用比较函数可以解决此问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\">values.sort(); <span class=\"comment\">// [0,1,10,15,5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">values.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b) <span class=\"comment\">// [0, 1, 5, 10, 15]</span></span><br><span class=\"line\">values.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>b-a) <span class=\"comment\">// [15,10,5,1,0]</span></span><br></pre></td></tr></table></figure>\n<p>根据某属性排序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">number</span> : <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">number</span> : <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">number</span> : <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1, object2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value1 = object1[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value2 = object2[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value1 - value2;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">values.sort(createComparisonFunction(<span class=\"string\">&#x27;number&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(values)</span><br><span class=\"line\">&gt; <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">0</span>: &#123;<span class=\"attr\">number</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"number\">1</span>: &#123;<span class=\"attr\">number</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"number\">2</span>: &#123;<span class=\"attr\">number</span>: <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">length: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"concat-方法实现拷贝和拼接\"><a href=\"#concat-方法实现拷贝和拼接\" class=\"headerlink\" title=\"concat() 方法实现拷贝和拼接\"></a>concat() 方法实现拷贝和拼接</h4><p>其中，concat()方法可以基于当前数组中的所有项创建一个新数组。<br>具体来说，这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给concat()方法传递参数的情况下，它只是复制当前数组并返回副本。如果传递给concat()方法的是一或多个数组，则该方法会将这些数组中的每一项都添加到结果数组中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> colors2 = colors.concat(); <span class=\"comment\">// 拷贝，新开一块内存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colors3 = colors; <span class=\"comment\">// 指向同一个内存地址</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colors4 = colors.concat(<span class=\"string\">&quot;yellow&quot;</span>, [<span class=\"string\">&quot;black&quot;</span>, <span class=\"string\">&quot;brown&quot;</span>]); <span class=\"comment\">// 可以接收任意数量参数</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"slice-方法抽取部分数组\"><a href=\"#slice-方法抽取部分数组\" class=\"headerlink\" title=\"slice() 方法抽取部分数组\"></a>slice() 方法抽取部分数组</h4><p>能够基于当前数组中的一或多个项创建一个新数组。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。<br>如果有两个参数，该方法返回起始和结束位置之间的项(但不包括结束位置的项)<br>如果slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置<br>第二个参数如果小于第一个参数，则返回空数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;purple&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> colors2 = colors.slice(); <span class=\"comment\">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colors3 = colors.slice(<span class=\"number\">0</span>); <span class=\"comment\">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colors4 = colors.slice(-<span class=\"number\">3</span>,-<span class=\"number\">1</span>); <span class=\"comment\">// [&quot;blue&quot;, &quot;yellow&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"splice-方法用于替换\"><a href=\"#splice-方法用于替换\" class=\"headerlink\" title=\"splice()方法用于替换\"></a>splice()方法用于替换</h4><p>splice()的主要用途是向数组的中部插入项，但使用这种方法的方式则有如下3 种。</p>\n<ul>\n<li>删除：可以删除任意数量的项，只需指定2 个参数：要删除的第一项的位置和要删除的项数。例如，splice(0,2)会删除数组中的前两项。</li>\n<li>插入：可以向指定位置插入任意数量的项，只需提供3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入第四、第五，以至任意多个项。例如，splice(2,0,”red”,”green”)会从当前数组的位置2 开始插入字符串”red”和”green”。</li>\n<li>替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,”red”,”green”)会删除当前数组位置2 的项，然后再从位置2 开始插入字符串”red”和”green”。</li>\n</ul>\n<p>splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项</p>\n<h4 id=\"常用的迭代方法和归并方法\"><a href=\"#常用的迭代方法和归并方法\" class=\"headerlink\" title=\"常用的迭代方法和归并方法\"></a>常用的迭代方法和归并方法</h4><p>下列方法都不会修改数组中的值，只是返回新的数组</p>\n<ul>\n<li>every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。</li>\n<li>filter()：对数组中的每一项运行给定函数，返回该函数会返回true 的项组成的数组。</li>\n<li>forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。</li>\n<li>map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>\n<li>some()：对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。</li>\n<li>reduce()：接收4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。适用于累加等操作。</li>\n<li>reduceRight()：功能与 reduce() 方法相同，不过是从数组的最后一项开始，向前遍历到第一项。</li>\n</ul>\n<h3 id=\"正则-exec-方法\"><a href=\"#正则-exec-方法\" class=\"headerlink\" title=\"正则 exec() 方法\"></a>正则 exec() 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"string\">&quot;red,green,blue,yellow,purple&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"regexp\">/r/g</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.exec(co)</span><br><span class=\"line\">&gt; [<span class=\"string\">&quot;r&quot;</span>, <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">input</span>: <span class=\"string\">&quot;red,green,blue,yellow,purple&quot;</span>, <span class=\"attr\">groups</span>: <span class=\"literal\">undefined</span>]</span><br><span class=\"line\">a.exec(co)</span><br><span class=\"line\">&gt; [<span class=\"string\">&quot;r&quot;</span>, <span class=\"attr\">index</span>: <span class=\"number\">5</span>, <span class=\"attr\">input</span>: <span class=\"string\">&quot;red,green,blue,yellow,purple&quot;</span>, <span class=\"attr\">groups</span>: <span class=\"literal\">undefined</span>]</span><br><span class=\"line\">a.exec(co)</span><br><span class=\"line\">&gt; [<span class=\"string\">&quot;r&quot;</span>, <span class=\"attr\">index</span>: <span class=\"number\">24</span>, <span class=\"attr\">input</span>: <span class=\"string\">&quot;red,green,blue,yellow,purple&quot;</span>, <span class=\"attr\">groups</span>: <span class=\"literal\">undefined</span>]</span><br><span class=\"line\">a.exec(co)</span><br><span class=\"line\">&gt; <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正则-test-方法\"><a href=\"#正则-test-方法\" class=\"headerlink\" title=\"正则 test() 方法\"></a>正则 test() 方法</h3><p>它接受一个字符串参数。在模式与该参数匹配的情况下返回true；否则，返回false。在只想知道目标字符串与某个模式是否匹配，但不需要知道其文本内容的情况下，使用这个方法非常方便。因此，test()方法经常被用在if 语句中，如下面的例子所示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">&quot;000-00-0000&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;4&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (pattern.test(text))&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;匹配成功&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"怎么理解函数实际上是对象\"><a href=\"#怎么理解函数实际上是对象\" class=\"headerlink\" title=\"怎么理解函数实际上是对象\"></a>怎么理解函数实际上是对象</h3><p>每个函数都是Function 类型的实例，而且都与其他引用类型一样具有属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> funcA = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;funcA&#x27;</span>)&#125;;</span><br><span class=\"line\">funcA.funcB = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;funcB&#x27;</span>)&#125;;</span><br><span class=\"line\">funcA.test = <span class=\"number\">12312</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">funcA() <span class=\"comment\">// &#x27;funcA&#x27;</span></span><br><span class=\"line\">funcA.test <span class=\"comment\">// 12312</span></span><br><span class=\"line\">funcA.funcB() <span class=\"comment\">// &#x27;funcB&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数声明和函数表达式的执行时间区别\"><a href=\"#函数声明和函数表达式的执行时间区别\" class=\"headerlink\" title=\"函数声明和函数表达式的执行时间区别\"></a>函数声明和函数表达式的执行时间区别</h3><p>解析器在向执行环境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用，至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。<br>在代码开始执行之前，解析器就已经通过一个名为函数声明提升（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript 引擎在第一遍会声明函数并将它们放到源代码树的顶部。所以，即使声明函数的代码在调用它的代码后面，JavaScript 引擎也能把函数声明提升到顶部。</p>\n<h3 id=\"递归解耦-callee\"><a href=\"#递归解耦-callee\" class=\"headerlink\" title=\"递归解耦 - callee\"></a>递归解耦 - callee</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;=<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * factorial(num-<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-------------&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;=<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num-<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重写后的factorial()函数的函数体内，没有再引用函数名factorial。这样，无论引用函数时使用的是什么名字，都可以保证正常完成递归调用。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> trueFactorial = factorial;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(trueFactorial(<span class=\"number\">5</span>)); <span class=\"comment\">//120</span></span><br><span class=\"line\">alert(factorial(<span class=\"number\">5</span>)); <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用当前函数的函数的引用-caller\"><a href=\"#调用当前函数的函数的引用-caller\" class=\"headerlink\" title=\"调用当前函数的函数的引用 - caller\"></a>调用当前函数的函数的引用 - caller</h3><p>这个属性中保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值为null。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  inner();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(inner.caller);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outer();</span><br><span class=\"line\"></span><br><span class=\"line\">--------&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ƒ outer()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  inner();</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<p>因为outer()调用了inter()，所以 inner.caller 就指向outer()。为了实现更松散的耦合，也可以通过arguments.callee.caller 来访问相同的信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  inner();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"built_in\">arguments</span>.callee.caller);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">outer();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置作用域-apply-call-bind\"><a href=\"#设置作用域-apply-call-bind\" class=\"headerlink\" title=\"设置作用域 - apply/call/bind\"></a>设置作用域 - apply/call/bind</h3><p>每个函数都包含两个非继承而来的方法：apply()和call()。这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this 对象的值。<br>首先，apply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组。<br>call()方法与apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于call() 方法而言，第一个参数是this 值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用 call()方法时，传递给函数的参数必须逐个列举出来，如下面的例子所示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum1</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum.apply(<span class=\"built_in\">this</span>, [num1, num2]); <span class=\"comment\">// 传入数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum2</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum.call(<span class=\"built_in\">this</span>, num1, num2); <span class=\"comment\">// 单个传入</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实上，传递参数并非apply()和call()真正的用武之地；它们真正强大的地方是能够扩充函数赖以运行的作用域。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.color = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayColor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"built_in\">this</span>.color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sayColor(); <span class=\"comment\">//red</span></span><br><span class=\"line\">sayColor.call(<span class=\"built_in\">this</span>); <span class=\"comment\">//red</span></span><br><span class=\"line\">sayColor.call(<span class=\"built_in\">window</span>); <span class=\"comment\">//red</span></span><br><span class=\"line\">sayColor.call(o); <span class=\"comment\">//blue</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript 5 还定义了一个方法：bind()。这个方法会创建一个函数的实例，其this 值会被绑定到传给bind()函数的值。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.color = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayColor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"built_in\">this</span>.color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectSayColor = sayColor.bind(o);</span><br><span class=\"line\">objectSayColor(); <span class=\"comment\">//blue</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">&quot;some text&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = s1.substring(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>字符串作为基本类型值，为何向引用类型值一样可以调用方法呢。实际上其中经历了如下过程。<br>(1) 创建String 类型的一个实例；<br>(2) 在实例上调用指定的方法；<br>(3) 销毁这个实例。<br>可以将以上三个步骤想象成是执行了下列ECMAScript 代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;some text&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = s1.substring(<span class=\"number\">2</span>);</span><br><span class=\"line\">s1 = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<p>引用类型与基本包装类型的主要区别就是对象的生存期。使用new 操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。这意味着我们不能在运行时为基本类型值添加属性和方法。来看下面的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">&quot;some text&quot;</span>;</span><br><span class=\"line\">s1.color = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">alert(s1.color); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>在此，第二行代码试图为字符串s1 添加一个color 属性。但是，当第三行代码再次访问s1 时，其color 属性不见了。问题的原因就是第二行创建的String 对象在执行第三行代码时已经被销毁了。第三行代码又创建自己的String 对象，而该对象没有color 属性。</p>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><p>number</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 保留两位小数 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(num.toFixed(<span class=\"number\">2</span>)); <span class=\"comment\">//&quot;10.00&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.001</span>.toFixed(<span class=\"number\">2</span>) <span class=\"comment\">// &quot;10.00&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.005</span>.toFixed(<span class=\"number\">2</span>) <span class=\"comment\">// &quot;10.01&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>string</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 字符串长度 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.length); <span class=\"comment\">//&quot;11&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 返回给定位置的字符 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.charAt(<span class=\"number\">1</span>)); <span class=\"comment\">//&quot;e&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 指定位置字符的字符编码 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.charCodeAt(<span class=\"number\">1</span>)); <span class=\"comment\">//输出&quot;101&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 以索引访问指定位置字符 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue[<span class=\"number\">1</span>]); <span class=\"comment\">//&quot;e&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 拼接字符串 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = stringValue.concat(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">alert(result); <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\">alert(stringValue); <span class=\"comment\">//&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = stringValue.concat(<span class=\"string\">&quot;world&quot;</span>, <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">alert(result); <span class=\"comment\">//&quot;hello world!&quot;</span></span><br><span class=\"line\">alert(stringValue); <span class=\"comment\">//&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- </span><br><span class=\"line\">裁剪字符串的三种方式 slice()、substr()和substring()</span><br><span class=\"line\">具体来说，slice()和 substring()的第二个参数指定的是子字符串最后一个字符后面的位置。</span><br><span class=\"line\">而substr()的第二个参数指定的则是返回的字符个数。</span><br><span class=\"line\">如果没有给这些方法传递第二个参数，则将字符串的长度作为结束位置。</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.slice(<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;lo world&quot;</span></span><br><span class=\"line\">alert(stringValue.substring(<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;lo world&quot;</span></span><br><span class=\"line\">alert(stringValue.substr(<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;lo world&quot;</span></span><br><span class=\"line\">alert(stringValue.slice(<span class=\"number\">3</span>, <span class=\"number\">7</span>)); <span class=\"comment\">//&quot;lo w&quot;</span></span><br><span class=\"line\">alert(stringValue.substring(<span class=\"number\">3</span>,<span class=\"number\">7</span>)); <span class=\"comment\">//&quot;lo w&quot;</span></span><br><span class=\"line\">alert(stringValue.substr(<span class=\"number\">3</span>, <span class=\"number\">7</span>)); <span class=\"comment\">//&quot;lo worl&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">在传递给这些方法的参数是负值的情况下，它们的行为就不尽相同了。</span><br><span class=\"line\">其中，slice()方法会将传入的负值与字符串的长度相加。</span><br><span class=\"line\">substr()方法将负的第一个参数加上字符串的长度，而将负的第二个参数转换为<span class=\"number\">0</span>。</span><br><span class=\"line\">最后，substring()方法会把所有负值参数都转换为<span class=\"number\">0</span>。</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.slice(-<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;rld&quot;</span></span><br><span class=\"line\">alert(stringValue.substring(-<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\">alert(stringValue.substr(-<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;rld&quot;</span></span><br><span class=\"line\">alert(stringValue.slice(<span class=\"number\">3</span>, -<span class=\"number\">4</span>)); <span class=\"comment\">//&quot;lo w&quot;</span></span><br><span class=\"line\">alert(stringValue.substring(<span class=\"number\">3</span>, -<span class=\"number\">4</span>)); <span class=\"comment\">//&quot;hel&quot;</span></span><br><span class=\"line\">alert(stringValue.substr(<span class=\"number\">3</span>, -<span class=\"number\">4</span>)); <span class=\"comment\">//&quot;&quot;（空字符串）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 查找字符串位置 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.indexOf(<span class=\"string\">&quot;o&quot;</span>)); <span class=\"comment\">//4</span></span><br><span class=\"line\">alert(stringValue.lastIndexOf(<span class=\"string\">&quot;o&quot;</span>)); <span class=\"comment\">//7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.indexOf(<span class=\"string\">&quot;o&quot;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">//7</span></span><br><span class=\"line\">alert(stringValue.lastIndexOf(<span class=\"string\">&quot;o&quot;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 去除首尾空格 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot; hello world &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> trimmedStringValue = stringValue.trim();</span><br><span class=\"line\">alert(stringValue); <span class=\"comment\">//&quot; hello world &quot;</span></span><br><span class=\"line\">alert(trimmedStringValue); <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 大小写转换 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.toLocaleUpperCase()); <span class=\"comment\">//&quot;HELLO WORLD&quot;</span></span><br><span class=\"line\">alert(stringValue.toUpperCase()); <span class=\"comment\">//&quot;HELLO WORLD&quot;</span></span><br><span class=\"line\">alert(stringValue.toLocaleLowerCase()); <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\">alert(stringValue.toLowerCase()); <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 查找模式 字符串位置 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pos = text.search(<span class=\"regexp\">/at/</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pos1 = text.search(<span class=\"regexp\">/tt/</span>); <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 字符串替换 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = text.replace(<span class=\"string\">&quot;at&quot;</span>, <span class=\"string\">&quot;ond&quot;</span>);</span><br><span class=\"line\">alert(result); <span class=\"comment\">//&quot;cond, bat, sat, fat&quot;</span></span><br><span class=\"line\">result = text.replace(<span class=\"regexp\">/at/g</span>, <span class=\"string\">&quot;ond&quot;</span>);</span><br><span class=\"line\">aler t(result); <span class=\"comment\">//&quot;cond, bond, sond, fond&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 字符串转数组 ---</span><br><span class=\"line\">- split()方法可以接受可选的第二个参数，用于指定数组的大小，以便确保返回的数组不会超过既定大小。</span><br><span class=\"line\"><span class=\"keyword\">var</span> colorText = <span class=\"string\">&quot;red,blue,green,yellow&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> colors1 = colorText.split(<span class=\"string\">&quot;,&quot;</span>); <span class=\"comment\">//[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colors2 = colorText.split(<span class=\"string\">&quot;,&quot;</span>, <span class=\"number\">2</span>); <span class=\"comment\">//[&quot;red&quot;, &quot;blue&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 字符编码转字符串 ---</span><br><span class=\"line\">alert(<span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>)); <span class=\"comment\">//&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>math</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 最大和最小值 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max(<span class=\"number\">3</span>, <span class=\"number\">54</span>, <span class=\"number\">32</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">alert(max); <span class=\"comment\">//54</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> min = <span class=\"built_in\">Math</span>.min(<span class=\"number\">3</span>, <span class=\"number\">54</span>, <span class=\"number\">32</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">alert(min); <span class=\"comment\">//3</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 舍入方法 ---</span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.ceil()执行向上舍入，即它总是将数值向上舍入为最接近的整数</span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.floor()执行向下舍入，即它总是将数值向下舍入为最接近的整数</span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.round()执行标准舍入，即它总是将数值四舍五入为最接近的整数</span><br><span class=\"line\"></span><br><span class=\"line\">--- 随机数 ---</span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.random()方法返回大于等于<span class=\"number\">0</span> 小于<span class=\"number\">1</span> 的一个随机数</span><br><span class=\"line\">值 = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * 可能值的总数 + 第一个可能的值)</span><br><span class=\"line\"><span class=\"number\">1</span>到<span class=\"number\">10</span>之间的数值：<span class=\"keyword\">var</span> num = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span> + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"方括号语法的优点是啥\"><a href=\"#方括号语法的优点是啥\" class=\"headerlink\" title=\"方括号语法的优点是啥\"></a>方括号语法的优点是啥</h3><p>方括号语法的主要优点是可以通过变量来访问属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;zhang-san&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> propertyName = <span class=\"string\">&quot;name&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person[propertyName]); <span class=\"comment\">// zhang-san</span></span><br></pre></td></tr></table></figure>\n<p>如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或保留字，也可以使用方括号表示法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;<span class=\"string\">&quot;my name&quot;</span>:<span class=\"string\">&quot;zhang-san&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person[<span class=\"string\">&quot;my name&quot;</span>]); <span class=\"comment\">// zhang-san</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"怎么确定某个对象是不是数组\"><a href=\"#怎么确定某个对象是不是数组\" class=\"headerlink\" title=\"怎么确定某个对象是不是数组\"></a>怎么确定某个对象是不是数组</h3><p>对于一个网页，或者一个全局作用域而言，使用instanceof 操作符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//对数组执行某些操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>instanceof 操作符的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，那实际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的Array 构造函数。如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数。<br>为了解决这个问题，ECMAScript 5 新增了Array.isArray()方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value))&#123;</span><br><span class=\"line\">  <span class=\"comment\">//对数组执行某些操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"alert-为什么可以输出数组\"><a href=\"#alert-为什么可以输出数组\" class=\"headerlink\" title=\"alert 为什么可以输出数组\"></a>alert 为什么可以输出数组</h3><p>由于alert()要接收字符串参数，所以它会在后台调用toString()方法，由此会得到与直接调用toString()方法相同的结果。</p>\n<h3 id=\"常用数组方法\"><a href=\"#常用数组方法\" class=\"headerlink\" title=\"常用数组方法\"></a>常用数组方法</h3><h4 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入栈 - push</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> count = colors.push(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>); <span class=\"comment\">// 在后面加入，可接收任意数量参数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// 返回数组长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出栈 - pop</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = colors.pop(); <span class=\"comment\">// 移除最后一项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// 返回被移除的项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队 - unshift</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> count = colors.unshift(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>); <span class=\"comment\">// 在前面加入，可接收任意数量参数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// 返回数组长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队 - shift</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> item = colors.shift(); <span class=\"comment\">// 移除第一项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// 返回被移除的项</span></span><br><span class=\"line\"></span><br><span class=\"line\">----------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组反转 - reverse</span></span><br><span class=\"line\">values.reverse(); <span class=\"comment\">// 数组反转</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// [2,5,4,1,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组排序 - soft</span></span><br><span class=\"line\">values.sort(); <span class=\"comment\">// 默认从小到大排序</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// [1,2,3,4,5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------</span><br><span class=\"line\">indexOf()和lastIndexOf()。这两个方法都接收两个参数：要查找的项和（可选的）表示查找起点位置的索引</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找第一次出现的位置</span></span><br><span class=\"line\">numbers.indexOf(<span class=\"number\">4</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">numbers.indexOf(<span class=\"number\">4</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\">numbers.indexOf(<span class=\"number\">8</span>); <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找最后一次出现的位置</span></span><br><span class=\"line\">numbers.lastIndexOf(<span class=\"number\">4</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\">numbers.lastIndexOf(<span class=\"number\">4</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">numbers.lastIndexOf(<span class=\"number\">8</span>); <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sort-是如何进行排序的\"><a href=\"#sort-是如何进行排序的\" class=\"headerlink\" title=\"sort() 是如何进行排序的\"></a>sort() 是如何进行排序的</h4><p>在默认情况下，sort()方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。<br>为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值，sort()方法比较的也是字符串，<br>数值5 虽然小于10，但在进行字符串比较时，”10”则位于”5”的前面，如下所示，使用比较函数可以解决此问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\">values.sort(); <span class=\"comment\">// [0,1,10,15,5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">values.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b) <span class=\"comment\">// [0, 1, 5, 10, 15]</span></span><br><span class=\"line\">values.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>b-a) <span class=\"comment\">// [15,10,5,1,0]</span></span><br></pre></td></tr></table></figure>\n<p>根据某属性排序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">number</span> : <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">number</span> : <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">number</span> : <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1, object2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value1 = object1[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value2 = object2[propertyName];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value1 - value2;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">values.sort(createComparisonFunction(<span class=\"string\">&#x27;number&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(values)</span><br><span class=\"line\">&gt; <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">0</span>: &#123;<span class=\"attr\">number</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"number\">1</span>: &#123;<span class=\"attr\">number</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"number\">2</span>: &#123;<span class=\"attr\">number</span>: <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">length: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"concat-方法实现拷贝和拼接\"><a href=\"#concat-方法实现拷贝和拼接\" class=\"headerlink\" title=\"concat() 方法实现拷贝和拼接\"></a>concat() 方法实现拷贝和拼接</h4><p>其中，concat()方法可以基于当前数组中的所有项创建一个新数组。<br>具体来说，这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给concat()方法传递参数的情况下，它只是复制当前数组并返回副本。如果传递给concat()方法的是一或多个数组，则该方法会将这些数组中的每一项都添加到结果数组中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> colors2 = colors.concat(); <span class=\"comment\">// 拷贝，新开一块内存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colors3 = colors; <span class=\"comment\">// 指向同一个内存地址</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colors4 = colors.concat(<span class=\"string\">&quot;yellow&quot;</span>, [<span class=\"string\">&quot;black&quot;</span>, <span class=\"string\">&quot;brown&quot;</span>]); <span class=\"comment\">// 可以接收任意数量参数</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"slice-方法抽取部分数组\"><a href=\"#slice-方法抽取部分数组\" class=\"headerlink\" title=\"slice() 方法抽取部分数组\"></a>slice() 方法抽取部分数组</h4><p>能够基于当前数组中的一或多个项创建一个新数组。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。<br>如果有两个参数，该方法返回起始和结束位置之间的项(但不包括结束位置的项)<br>如果slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置<br>第二个参数如果小于第一个参数，则返回空数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>, <span class=\"string\">&quot;purple&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> colors2 = colors.slice(); <span class=\"comment\">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colors3 = colors.slice(<span class=\"number\">0</span>); <span class=\"comment\">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colors4 = colors.slice(-<span class=\"number\">3</span>,-<span class=\"number\">1</span>); <span class=\"comment\">// [&quot;blue&quot;, &quot;yellow&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"splice-方法用于替换\"><a href=\"#splice-方法用于替换\" class=\"headerlink\" title=\"splice()方法用于替换\"></a>splice()方法用于替换</h4><p>splice()的主要用途是向数组的中部插入项，但使用这种方法的方式则有如下3 种。</p>\n<ul>\n<li>删除：可以删除任意数量的项，只需指定2 个参数：要删除的第一项的位置和要删除的项数。例如，splice(0,2)会删除数组中的前两项。</li>\n<li>插入：可以向指定位置插入任意数量的项，只需提供3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入第四、第五，以至任意多个项。例如，splice(2,0,”red”,”green”)会从当前数组的位置2 开始插入字符串”red”和”green”。</li>\n<li>替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,”red”,”green”)会删除当前数组位置2 的项，然后再从位置2 开始插入字符串”red”和”green”。</li>\n</ul>\n<p>splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项</p>\n<h4 id=\"常用的迭代方法和归并方法\"><a href=\"#常用的迭代方法和归并方法\" class=\"headerlink\" title=\"常用的迭代方法和归并方法\"></a>常用的迭代方法和归并方法</h4><p>下列方法都不会修改数组中的值，只是返回新的数组</p>\n<ul>\n<li>every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。</li>\n<li>filter()：对数组中的每一项运行给定函数，返回该函数会返回true 的项组成的数组。</li>\n<li>forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。</li>\n<li>map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>\n<li>some()：对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。</li>\n<li>reduce()：接收4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。适用于累加等操作。</li>\n<li>reduceRight()：功能与 reduce() 方法相同，不过是从数组的最后一项开始，向前遍历到第一项。</li>\n</ul>\n<h3 id=\"正则-exec-方法\"><a href=\"#正则-exec-方法\" class=\"headerlink\" title=\"正则 exec() 方法\"></a>正则 exec() 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"string\">&quot;red,green,blue,yellow,purple&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"regexp\">/r/g</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.exec(co)</span><br><span class=\"line\">&gt; [<span class=\"string\">&quot;r&quot;</span>, <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">input</span>: <span class=\"string\">&quot;red,green,blue,yellow,purple&quot;</span>, <span class=\"attr\">groups</span>: <span class=\"literal\">undefined</span>]</span><br><span class=\"line\">a.exec(co)</span><br><span class=\"line\">&gt; [<span class=\"string\">&quot;r&quot;</span>, <span class=\"attr\">index</span>: <span class=\"number\">5</span>, <span class=\"attr\">input</span>: <span class=\"string\">&quot;red,green,blue,yellow,purple&quot;</span>, <span class=\"attr\">groups</span>: <span class=\"literal\">undefined</span>]</span><br><span class=\"line\">a.exec(co)</span><br><span class=\"line\">&gt; [<span class=\"string\">&quot;r&quot;</span>, <span class=\"attr\">index</span>: <span class=\"number\">24</span>, <span class=\"attr\">input</span>: <span class=\"string\">&quot;red,green,blue,yellow,purple&quot;</span>, <span class=\"attr\">groups</span>: <span class=\"literal\">undefined</span>]</span><br><span class=\"line\">a.exec(co)</span><br><span class=\"line\">&gt; <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正则-test-方法\"><a href=\"#正则-test-方法\" class=\"headerlink\" title=\"正则 test() 方法\"></a>正则 test() 方法</h3><p>它接受一个字符串参数。在模式与该参数匹配的情况下返回true；否则，返回false。在只想知道目标字符串与某个模式是否匹配，但不需要知道其文本内容的情况下，使用这个方法非常方便。因此，test()方法经常被用在if 语句中，如下面的例子所示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">&quot;000-00-0000&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;4&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (pattern.test(text))&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;匹配成功&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"怎么理解函数实际上是对象\"><a href=\"#怎么理解函数实际上是对象\" class=\"headerlink\" title=\"怎么理解函数实际上是对象\"></a>怎么理解函数实际上是对象</h3><p>每个函数都是Function 类型的实例，而且都与其他引用类型一样具有属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> funcA = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;funcA&#x27;</span>)&#125;;</span><br><span class=\"line\">funcA.funcB = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;funcB&#x27;</span>)&#125;;</span><br><span class=\"line\">funcA.test = <span class=\"number\">12312</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">funcA() <span class=\"comment\">// &#x27;funcA&#x27;</span></span><br><span class=\"line\">funcA.test <span class=\"comment\">// 12312</span></span><br><span class=\"line\">funcA.funcB() <span class=\"comment\">// &#x27;funcB&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数声明和函数表达式的执行时间区别\"><a href=\"#函数声明和函数表达式的执行时间区别\" class=\"headerlink\" title=\"函数声明和函数表达式的执行时间区别\"></a>函数声明和函数表达式的执行时间区别</h3><p>解析器在向执行环境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用，至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。<br>在代码开始执行之前，解析器就已经通过一个名为函数声明提升（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript 引擎在第一遍会声明函数并将它们放到源代码树的顶部。所以，即使声明函数的代码在调用它的代码后面，JavaScript 引擎也能把函数声明提升到顶部。</p>\n<h3 id=\"递归解耦-callee\"><a href=\"#递归解耦-callee\" class=\"headerlink\" title=\"递归解耦 - callee\"></a>递归解耦 - callee</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;=<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * factorial(num-<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-------------&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;=<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num-<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重写后的factorial()函数的函数体内，没有再引用函数名factorial。这样，无论引用函数时使用的是什么名字，都可以保证正常完成递归调用。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> trueFactorial = factorial;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(trueFactorial(<span class=\"number\">5</span>)); <span class=\"comment\">//120</span></span><br><span class=\"line\">alert(factorial(<span class=\"number\">5</span>)); <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用当前函数的函数的引用-caller\"><a href=\"#调用当前函数的函数的引用-caller\" class=\"headerlink\" title=\"调用当前函数的函数的引用 - caller\"></a>调用当前函数的函数的引用 - caller</h3><p>这个属性中保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值为null。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  inner();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(inner.caller);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outer();</span><br><span class=\"line\"></span><br><span class=\"line\">--------&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ƒ outer()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  inner();</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<p>因为outer()调用了inter()，所以 inner.caller 就指向outer()。为了实现更松散的耦合，也可以通过arguments.callee.caller 来访问相同的信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  inner();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"built_in\">arguments</span>.callee.caller);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">outer();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置作用域-apply-call-bind\"><a href=\"#设置作用域-apply-call-bind\" class=\"headerlink\" title=\"设置作用域 - apply/call/bind\"></a>设置作用域 - apply/call/bind</h3><p>每个函数都包含两个非继承而来的方法：apply()和call()。这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this 对象的值。<br>首先，apply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组。<br>call()方法与apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于call() 方法而言，第一个参数是this 值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用 call()方法时，传递给函数的参数必须逐个列举出来，如下面的例子所示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum1</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum.apply(<span class=\"built_in\">this</span>, [num1, num2]); <span class=\"comment\">// 传入数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum2</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum.call(<span class=\"built_in\">this</span>, num1, num2); <span class=\"comment\">// 单个传入</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实上，传递参数并非apply()和call()真正的用武之地；它们真正强大的地方是能够扩充函数赖以运行的作用域。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.color = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayColor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"built_in\">this</span>.color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sayColor(); <span class=\"comment\">//red</span></span><br><span class=\"line\">sayColor.call(<span class=\"built_in\">this</span>); <span class=\"comment\">//red</span></span><br><span class=\"line\">sayColor.call(<span class=\"built_in\">window</span>); <span class=\"comment\">//red</span></span><br><span class=\"line\">sayColor.call(o); <span class=\"comment\">//blue</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript 5 还定义了一个方法：bind()。这个方法会创建一个函数的实例，其this 值会被绑定到传给bind()函数的值。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.color = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;blue&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayColor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"built_in\">this</span>.color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectSayColor = sayColor.bind(o);</span><br><span class=\"line\">objectSayColor(); <span class=\"comment\">//blue</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">&quot;some text&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = s1.substring(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>字符串作为基本类型值，为何向引用类型值一样可以调用方法呢。实际上其中经历了如下过程。<br>(1) 创建String 类型的一个实例；<br>(2) 在实例上调用指定的方法；<br>(3) 销毁这个实例。<br>可以将以上三个步骤想象成是执行了下列ECMAScript 代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;some text&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = s1.substring(<span class=\"number\">2</span>);</span><br><span class=\"line\">s1 = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<p>引用类型与基本包装类型的主要区别就是对象的生存期。使用new 操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。这意味着我们不能在运行时为基本类型值添加属性和方法。来看下面的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">&quot;some text&quot;</span>;</span><br><span class=\"line\">s1.color = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">alert(s1.color); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>在此，第二行代码试图为字符串s1 添加一个color 属性。但是，当第三行代码再次访问s1 时，其color 属性不见了。问题的原因就是第二行创建的String 对象在执行第三行代码时已经被销毁了。第三行代码又创建自己的String 对象，而该对象没有color 属性。</p>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><p>number</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 保留两位小数 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(num.toFixed(<span class=\"number\">2</span>)); <span class=\"comment\">//&quot;10.00&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.001</span>.toFixed(<span class=\"number\">2</span>) <span class=\"comment\">// &quot;10.00&quot;</span></span><br><span class=\"line\"><span class=\"number\">10.005</span>.toFixed(<span class=\"number\">2</span>) <span class=\"comment\">// &quot;10.01&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>string</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 字符串长度 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.length); <span class=\"comment\">//&quot;11&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 返回给定位置的字符 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.charAt(<span class=\"number\">1</span>)); <span class=\"comment\">//&quot;e&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 指定位置字符的字符编码 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.charCodeAt(<span class=\"number\">1</span>)); <span class=\"comment\">//输出&quot;101&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 以索引访问指定位置字符 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue[<span class=\"number\">1</span>]); <span class=\"comment\">//&quot;e&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 拼接字符串 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = stringValue.concat(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">alert(result); <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\">alert(stringValue); <span class=\"comment\">//&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = stringValue.concat(<span class=\"string\">&quot;world&quot;</span>, <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">alert(result); <span class=\"comment\">//&quot;hello world!&quot;</span></span><br><span class=\"line\">alert(stringValue); <span class=\"comment\">//&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- </span><br><span class=\"line\">裁剪字符串的三种方式 slice()、substr()和substring()</span><br><span class=\"line\">具体来说，slice()和 substring()的第二个参数指定的是子字符串最后一个字符后面的位置。</span><br><span class=\"line\">而substr()的第二个参数指定的则是返回的字符个数。</span><br><span class=\"line\">如果没有给这些方法传递第二个参数，则将字符串的长度作为结束位置。</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.slice(<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;lo world&quot;</span></span><br><span class=\"line\">alert(stringValue.substring(<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;lo world&quot;</span></span><br><span class=\"line\">alert(stringValue.substr(<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;lo world&quot;</span></span><br><span class=\"line\">alert(stringValue.slice(<span class=\"number\">3</span>, <span class=\"number\">7</span>)); <span class=\"comment\">//&quot;lo w&quot;</span></span><br><span class=\"line\">alert(stringValue.substring(<span class=\"number\">3</span>,<span class=\"number\">7</span>)); <span class=\"comment\">//&quot;lo w&quot;</span></span><br><span class=\"line\">alert(stringValue.substr(<span class=\"number\">3</span>, <span class=\"number\">7</span>)); <span class=\"comment\">//&quot;lo worl&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">在传递给这些方法的参数是负值的情况下，它们的行为就不尽相同了。</span><br><span class=\"line\">其中，slice()方法会将传入的负值与字符串的长度相加。</span><br><span class=\"line\">substr()方法将负的第一个参数加上字符串的长度，而将负的第二个参数转换为<span class=\"number\">0</span>。</span><br><span class=\"line\">最后，substring()方法会把所有负值参数都转换为<span class=\"number\">0</span>。</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.slice(-<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;rld&quot;</span></span><br><span class=\"line\">alert(stringValue.substring(-<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\">alert(stringValue.substr(-<span class=\"number\">3</span>)); <span class=\"comment\">//&quot;rld&quot;</span></span><br><span class=\"line\">alert(stringValue.slice(<span class=\"number\">3</span>, -<span class=\"number\">4</span>)); <span class=\"comment\">//&quot;lo w&quot;</span></span><br><span class=\"line\">alert(stringValue.substring(<span class=\"number\">3</span>, -<span class=\"number\">4</span>)); <span class=\"comment\">//&quot;hel&quot;</span></span><br><span class=\"line\">alert(stringValue.substr(<span class=\"number\">3</span>, -<span class=\"number\">4</span>)); <span class=\"comment\">//&quot;&quot;（空字符串）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 查找字符串位置 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.indexOf(<span class=\"string\">&quot;o&quot;</span>)); <span class=\"comment\">//4</span></span><br><span class=\"line\">alert(stringValue.lastIndexOf(<span class=\"string\">&quot;o&quot;</span>)); <span class=\"comment\">//7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.indexOf(<span class=\"string\">&quot;o&quot;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">//7</span></span><br><span class=\"line\">alert(stringValue.lastIndexOf(<span class=\"string\">&quot;o&quot;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 去除首尾空格 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot; hello world &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> trimmedStringValue = stringValue.trim();</span><br><span class=\"line\">alert(stringValue); <span class=\"comment\">//&quot; hello world &quot;</span></span><br><span class=\"line\">alert(trimmedStringValue); <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 大小写转换 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">alert(stringValue.toLocaleUpperCase()); <span class=\"comment\">//&quot;HELLO WORLD&quot;</span></span><br><span class=\"line\">alert(stringValue.toUpperCase()); <span class=\"comment\">//&quot;HELLO WORLD&quot;</span></span><br><span class=\"line\">alert(stringValue.toLocaleLowerCase()); <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\">alert(stringValue.toLowerCase()); <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 查找模式 字符串位置 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pos = text.search(<span class=\"regexp\">/at/</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pos1 = text.search(<span class=\"regexp\">/tt/</span>); <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 字符串替换 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = text.replace(<span class=\"string\">&quot;at&quot;</span>, <span class=\"string\">&quot;ond&quot;</span>);</span><br><span class=\"line\">alert(result); <span class=\"comment\">//&quot;cond, bat, sat, fat&quot;</span></span><br><span class=\"line\">result = text.replace(<span class=\"regexp\">/at/g</span>, <span class=\"string\">&quot;ond&quot;</span>);</span><br><span class=\"line\">aler t(result); <span class=\"comment\">//&quot;cond, bond, sond, fond&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 字符串转数组 ---</span><br><span class=\"line\">- split()方法可以接受可选的第二个参数，用于指定数组的大小，以便确保返回的数组不会超过既定大小。</span><br><span class=\"line\"><span class=\"keyword\">var</span> colorText = <span class=\"string\">&quot;red,blue,green,yellow&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> colors1 = colorText.split(<span class=\"string\">&quot;,&quot;</span>); <span class=\"comment\">//[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colors2 = colorText.split(<span class=\"string\">&quot;,&quot;</span>, <span class=\"number\">2</span>); <span class=\"comment\">//[&quot;red&quot;, &quot;blue&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 字符编码转字符串 ---</span><br><span class=\"line\">alert(<span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>)); <span class=\"comment\">//&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>math</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 最大和最小值 ---</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max(<span class=\"number\">3</span>, <span class=\"number\">54</span>, <span class=\"number\">32</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">alert(max); <span class=\"comment\">//54</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> min = <span class=\"built_in\">Math</span>.min(<span class=\"number\">3</span>, <span class=\"number\">54</span>, <span class=\"number\">32</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">alert(min); <span class=\"comment\">//3</span></span><br><span class=\"line\"></span><br><span class=\"line\">--- 舍入方法 ---</span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.ceil()执行向上舍入，即它总是将数值向上舍入为最接近的整数</span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.floor()执行向下舍入，即它总是将数值向下舍入为最接近的整数</span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.round()执行标准舍入，即它总是将数值四舍五入为最接近的整数</span><br><span class=\"line\"></span><br><span class=\"line\">--- 随机数 ---</span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.random()方法返回大于等于<span class=\"number\">0</span> 小于<span class=\"number\">1</span> 的一个随机数</span><br><span class=\"line\">值 = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * 可能值的总数 + 第一个可能的值)</span><br><span class=\"line\"><span class=\"number\">1</span>到<span class=\"number\">10</span>之间的数值：<span class=\"keyword\">var</span> num = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span> + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>"},{"title":"leetcode-两数之和","date":"2021-03-29T07:08:44.000Z","_content":"\n## 题目\n给定一个整数数组 `nums` 和一个整数目标值 `target`，请你在该数组中找出和为目标值 的那两个整数，并返回它们的数组下标。\n\n你可以按任意顺序返回答案。\n\n示例：\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/two-sum\n\n<!-- more -->\n\n## 题解\n### 暴力枚举\n```js\n/**\n * @param {number[]} nums\n * @param {number} target\n */\nvar twoSum = function(nums, target) {\n  for(let i = 0; i < nums.length; i++){\n    for(let j = i + 1; j < nums.length; j++){\n      if(nums[i] + nums[j] == target){\n        return [i,j]\n      }\n    }\n  }\n}\n```\n\n### 哈希表\n我们创建一个哈希表，对于每一个 `x`，我们首先查询哈希表中是否存在 `target - x`，然后将 `x` 插入到哈希表中，即可保证不会让 `x` 和自己匹配。\n\n```js\nvar twoSum = function(nums, target) {\n  var hashtable = [];\n  for(let i = 0; i < nums.length; i++){\n    if(typeof hashtable[target - nums[i]] == \"number\"){\n      return [i,hashtable[target - nums[i]]]\n    }\n    hashtable[nums[i]] = i;\n  }\n}\n```\n","source":"_posts/leetcode-两数之和.md","raw":"---\ntitle: leetcode-两数之和\ndate: 2021-03-29 15:08:44\ntags: leetcode\n---\n\n## 题目\n给定一个整数数组 `nums` 和一个整数目标值 `target`，请你在该数组中找出和为目标值 的那两个整数，并返回它们的数组下标。\n\n你可以按任意顺序返回答案。\n\n示例：\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/two-sum\n\n<!-- more -->\n\n## 题解\n### 暴力枚举\n```js\n/**\n * @param {number[]} nums\n * @param {number} target\n */\nvar twoSum = function(nums, target) {\n  for(let i = 0; i < nums.length; i++){\n    for(let j = i + 1; j < nums.length; j++){\n      if(nums[i] + nums[j] == target){\n        return [i,j]\n      }\n    }\n  }\n}\n```\n\n### 哈希表\n我们创建一个哈希表，对于每一个 `x`，我们首先查询哈希表中是否存在 `target - x`，然后将 `x` 插入到哈希表中，即可保证不会让 `x` 和自己匹配。\n\n```js\nvar twoSum = function(nums, target) {\n  var hashtable = [];\n  for(let i = 0; i < nums.length; i++){\n    if(typeof hashtable[target - nums[i]] == \"number\"){\n      return [i,hashtable[target - nums[i]]]\n    }\n    hashtable[nums[i]] = i;\n  }\n}\n```\n","slug":"leetcode-两数之和","published":1,"updated":"2021-09-04T09:47:13.420Z","_id":"ckmu98m3900006fpvbl6e3t4g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出和为目标值 的那两个整数，并返回它们的数组下标。</p>\n<p>你可以按任意顺序返回答案。</p>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class=\"line\">输出：[0,1]</span><br><span class=\"line\">解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/two-sum\">https://leetcode-cn.com/problems/two-sum</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><h3 id=\"暴力枚举\"><a href=\"#暴力枚举\" class=\"headerlink\" title=\"暴力枚举\"></a>暴力枚举</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [i,j]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3><p>我们创建一个哈希表，对于每一个 <code>x</code>，我们首先查询哈希表中是否存在 <code>target - x</code>，然后将 <code>x</code> 插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hashtable = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> hashtable[target - nums[i]] == <span class=\"string\">&quot;number&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [i,hashtable[target - nums[i]]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hashtable[nums[i]] = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出和为目标值 的那两个整数，并返回它们的数组下标。</p>\n<p>你可以按任意顺序返回答案。</p>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class=\"line\">输出：[0,1]</span><br><span class=\"line\">解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/two-sum\">https://leetcode-cn.com/problems/two-sum</a></p>","more":"<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><h3 id=\"暴力枚举\"><a href=\"#暴力枚举\" class=\"headerlink\" title=\"暴力枚举\"></a>暴力枚举</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [i,j]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3><p>我们创建一个哈希表，对于每一个 <code>x</code>，我们首先查询哈希表中是否存在 <code>target - x</code>，然后将 <code>x</code> 插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hashtable = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> hashtable[target - nums[i]] == <span class=\"string\">&quot;number&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [i,hashtable[target - nums[i]]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hashtable[nums[i]] = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode-两数逐位相加","date":"2021-03-29T09:10:22.000Z","_content":"\n## 题目\n给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储一位数字。\n请你将两个数相加，并以相同形式返回一个表示和的链表。\n\n## 示例\n```\n输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n\n输入：l1 = [0], l2 = [0]\n输出：[0]\n\n输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n```\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/add-two-numbers\n\n<!-- more -->\n\n## 题解\n由于输入的两个链表都是逆序存储数字的位数的，因此两个链表中同一位置的数字可以直接相加。\n我们同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加。\n具体而言，如果当前两个链表处相应位置的数字和为 n1+n2+carry 。\n如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个 00 。\n\n```js\n/**\n * 将两数组逐位相加\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n * @param {*} l1 \n * @param {*} l2 \n */\naddTwoNumbers = function(l1, l2) {\n  // head:结果，tail:中间值\n  let head = null, tail = null;\n  let carry = 0;\n\n  while(l1 || l2){\n    const n1 = l1 ? l1.val : 0;\n    const n2 = l2 ? l2.val : 0;\n    const sum = n1 + n2 + carry;\n    const num = sum % 10;\n    carry = Math.floor(sum / 10);\n    \n    if(!head){\n      head = tail = new ListNode(num);\n    }else{\n      tail.next = new ListNode(num);\n      tail = tail.next;\n    }\n\n    if(l1){\n      l1 = l1.next;\n    }\n    if(l2){\n      l2 = l2.next;\n    }\n  }\n\n  if(carry > 0){\n    tail.next = new ListNode(carry);\n  }\n\n  return head;\n};\n```\n","source":"_posts/leetcode-两数逐位相加.md","raw":"---\ntitle: leetcode-两数逐位相加\ndate: 2021-03-29 17:10:22\ntags: leetcode\n---\n\n## 题目\n给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储一位数字。\n请你将两个数相加，并以相同形式返回一个表示和的链表。\n\n## 示例\n```\n输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n\n输入：l1 = [0], l2 = [0]\n输出：[0]\n\n输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n```\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/add-two-numbers\n\n<!-- more -->\n\n## 题解\n由于输入的两个链表都是逆序存储数字的位数的，因此两个链表中同一位置的数字可以直接相加。\n我们同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加。\n具体而言，如果当前两个链表处相应位置的数字和为 n1+n2+carry 。\n如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个 00 。\n\n```js\n/**\n * 将两数组逐位相加\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n * @param {*} l1 \n * @param {*} l2 \n */\naddTwoNumbers = function(l1, l2) {\n  // head:结果，tail:中间值\n  let head = null, tail = null;\n  let carry = 0;\n\n  while(l1 || l2){\n    const n1 = l1 ? l1.val : 0;\n    const n2 = l2 ? l2.val : 0;\n    const sum = n1 + n2 + carry;\n    const num = sum % 10;\n    carry = Math.floor(sum / 10);\n    \n    if(!head){\n      head = tail = new ListNode(num);\n    }else{\n      tail.next = new ListNode(num);\n      tail = tail.next;\n    }\n\n    if(l1){\n      l1 = l1.next;\n    }\n    if(l2){\n      l2 = l2.next;\n    }\n  }\n\n  if(carry > 0){\n    tail.next = new ListNode(carry);\n  }\n\n  return head;\n};\n```\n","slug":"leetcode-两数逐位相加","published":1,"updated":"2021-09-04T09:47:13.420Z","_id":"ckmue3fkk0000fxpv3w5h7dol","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储一位数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]</span><br><span class=\"line\">输出：[7,0,8]</span><br><span class=\"line\">解释：342 + 465 &#x3D; 807.</span><br><span class=\"line\"></span><br><span class=\"line\">输入：l1 &#x3D; [0], l2 &#x3D; [0]</span><br><span class=\"line\">输出：[0]</span><br><span class=\"line\"></span><br><span class=\"line\">输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]</span><br><span class=\"line\">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/add-two-numbers\">https://leetcode-cn.com/problems/add-two-numbers</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>由于输入的两个链表都是逆序存储数字的位数的，因此两个链表中同一位置的数字可以直接相加。<br>我们同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加。<br>具体而言，如果当前两个链表处相应位置的数字和为 n1+n2+carry 。<br>如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个 00 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将两数组逐位相加</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = (next===undefined ? null : next)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>l1 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>l2 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">addTwoNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// head:结果，tail:中间值</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> head = <span class=\"literal\">null</span>, tail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l1 || l2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n1 = l1 ? l1.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n2 = l2 ? l2.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sum = n1 + n2 + carry;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = sum % <span class=\"number\">10</span>;</span><br><span class=\"line\">    carry = <span class=\"built_in\">Math</span>.floor(sum / <span class=\"number\">10</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head)&#123;</span><br><span class=\"line\">      head = tail = <span class=\"keyword\">new</span> ListNode(num);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      tail.next = <span class=\"keyword\">new</span> ListNode(num);</span><br><span class=\"line\">      tail = tail.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1)&#123;</span><br><span class=\"line\">      l1 = l1.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l2)&#123;</span><br><span class=\"line\">      l2 = l2.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(carry &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    tail.next = <span class=\"keyword\">new</span> ListNode(carry);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储一位数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]</span><br><span class=\"line\">输出：[7,0,8]</span><br><span class=\"line\">解释：342 + 465 &#x3D; 807.</span><br><span class=\"line\"></span><br><span class=\"line\">输入：l1 &#x3D; [0], l2 &#x3D; [0]</span><br><span class=\"line\">输出：[0]</span><br><span class=\"line\"></span><br><span class=\"line\">输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]</span><br><span class=\"line\">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/add-two-numbers\">https://leetcode-cn.com/problems/add-two-numbers</a></p>","more":"<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>由于输入的两个链表都是逆序存储数字的位数的，因此两个链表中同一位置的数字可以直接相加。<br>我们同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加。<br>具体而言，如果当前两个链表处相应位置的数字和为 n1+n2+carry 。<br>如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个 00 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将两数组逐位相加</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = (next===undefined ? null : next)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>l1 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>l2 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">addTwoNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// head:结果，tail:中间值</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> head = <span class=\"literal\">null</span>, tail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l1 || l2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n1 = l1 ? l1.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n2 = l2 ? l2.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sum = n1 + n2 + carry;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = sum % <span class=\"number\">10</span>;</span><br><span class=\"line\">    carry = <span class=\"built_in\">Math</span>.floor(sum / <span class=\"number\">10</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head)&#123;</span><br><span class=\"line\">      head = tail = <span class=\"keyword\">new</span> ListNode(num);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      tail.next = <span class=\"keyword\">new</span> ListNode(num);</span><br><span class=\"line\">      tail = tail.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l1)&#123;</span><br><span class=\"line\">      l1 = l1.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l2)&#123;</span><br><span class=\"line\">      l2 = l2.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(carry &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    tail.next = <span class=\"keyword\">new</span> ListNode(carry);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode-最大无重复子串长度","date":"2021-03-29T09:41:52.000Z","_content":"\n## 题目\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n \n示例 1:\n```\n输入: s = \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n\n输入: s = \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n\n输入: s = \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters\n\n<!-- more -->\n\n## 题解\n方法：滑动窗口\n\n我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界,在每一步的操作中，我们会将左指针向右移动一格，表示我们开始枚举下一个字符作为起始位置，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。\n在移动结束后，这个子串就对应着 以左指针开始的，不包含重复字符的最长子串。我们记录下这个子串的长度；在枚举结束后，我们找到的最长的子串的长度即为答案。\n\n```js\nlengthOfLongestSubstring = function(s) {\n  const n = s.length;\n  if(n < 2) return n;\n    \n  let longestSubstring = s[0];\n\n  // 设置左右指针\n  let lk = 0,rk = 1;\n  let longestLength = 0;\n\n  for (let lk = 0; lk < n; ++lk) {\n    // 没重复的\n    while(rk < n && longestSubstring.indexOf(s[rk]) == -1){\n      longestSubstring += s[rk];\n      rk++;\n    }\n        \n    longestLength = Math.max(longestLength, rk - lk);\n\n    // 找到重复的存储字符串中的位置\n    var index = s.indexOf(s[rk],lk);\n        \n    // 添加进来重复的这个值\n    longestSubstring += s[rk];\n    rk++;\n\n    // 截取新的字符串\n    if(index != -1) longestSubstring = s.substring(index + 1,rk);\n\n    // 更新起始点\n    if(index > lk) lk = index;\n\n    // 满足退出条件\n    if(rk >= n) return longestLength;\n  }\n  return longestLength;\n};\n```\n","source":"_posts/leetcode-最大无重复子串长度.md","raw":"---\ntitle: leetcode-最大无重复子串长度\ndate: 2021-03-29 17:41:52\ntags: leetcode\n---\n\n## 题目\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n \n示例 1:\n```\n输入: s = \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n\n输入: s = \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n\n输入: s = \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters\n\n<!-- more -->\n\n## 题解\n方法：滑动窗口\n\n我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界,在每一步的操作中，我们会将左指针向右移动一格，表示我们开始枚举下一个字符作为起始位置，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。\n在移动结束后，这个子串就对应着 以左指针开始的，不包含重复字符的最长子串。我们记录下这个子串的长度；在枚举结束后，我们找到的最长的子串的长度即为答案。\n\n```js\nlengthOfLongestSubstring = function(s) {\n  const n = s.length;\n  if(n < 2) return n;\n    \n  let longestSubstring = s[0];\n\n  // 设置左右指针\n  let lk = 0,rk = 1;\n  let longestLength = 0;\n\n  for (let lk = 0; lk < n; ++lk) {\n    // 没重复的\n    while(rk < n && longestSubstring.indexOf(s[rk]) == -1){\n      longestSubstring += s[rk];\n      rk++;\n    }\n        \n    longestLength = Math.max(longestLength, rk - lk);\n\n    // 找到重复的存储字符串中的位置\n    var index = s.indexOf(s[rk],lk);\n        \n    // 添加进来重复的这个值\n    longestSubstring += s[rk];\n    rk++;\n\n    // 截取新的字符串\n    if(index != -1) longestSubstring = s.substring(index + 1,rk);\n\n    // 更新起始点\n    if(index > lk) lk = index;\n\n    // 满足退出条件\n    if(rk >= n) return longestLength;\n  }\n  return longestLength;\n};\n```\n","slug":"leetcode-最大无重复子串长度","published":1,"updated":"2021-09-04T09:47:13.421Z","_id":"ckmujqkf30000q7pvccwxfisq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。<br> <br>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s &#x3D; &quot;abcabcbb&quot;</span><br><span class=\"line\">输出: 3 </span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br><span class=\"line\"></span><br><span class=\"line\">输入: s &#x3D; &quot;bbbbb&quot;</span><br><span class=\"line\">输出: 1</span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br><span class=\"line\"></span><br><span class=\"line\">输入: s &#x3D; &quot;pwwkew&quot;</span><br><span class=\"line\">输出: 3</span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class=\"line\">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters\">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>方法：滑动窗口</p>\n<p>我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界,在每一步的操作中，我们会将左指针向右移动一格，表示我们开始枚举下一个字符作为起始位置，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。<br>在移动结束后，这个子串就对应着 以左指针开始的，不包含重复字符的最长子串。我们记录下这个子串的长度；在枚举结束后，我们找到的最长的子串的长度即为答案。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lengthOfLongestSubstring = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = s.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">let</span> longestSubstring = s[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置左右指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> lk = <span class=\"number\">0</span>,rk = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> longestLength = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> lk = <span class=\"number\">0</span>; lk &lt; n; ++lk) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 没重复的</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rk &lt; n &amp;&amp; longestSubstring.indexOf(s[rk]) == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      longestSubstring += s[rk];</span><br><span class=\"line\">      rk++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    longestLength = <span class=\"built_in\">Math</span>.max(longestLength, rk - lk);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找到重复的存储字符串中的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = s.indexOf(s[rk],lk);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 添加进来重复的这个值</span></span><br><span class=\"line\">    longestSubstring += s[rk];</span><br><span class=\"line\">    rk++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 截取新的字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index != -<span class=\"number\">1</span>) longestSubstring = s.substring(index + <span class=\"number\">1</span>,rk);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新起始点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &gt; lk) lk = index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 满足退出条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rk &gt;= n) <span class=\"keyword\">return</span> longestLength;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> longestLength;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。<br> <br>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s &#x3D; &quot;abcabcbb&quot;</span><br><span class=\"line\">输出: 3 </span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br><span class=\"line\"></span><br><span class=\"line\">输入: s &#x3D; &quot;bbbbb&quot;</span><br><span class=\"line\">输出: 1</span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br><span class=\"line\"></span><br><span class=\"line\">输入: s &#x3D; &quot;pwwkew&quot;</span><br><span class=\"line\">输出: 3</span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class=\"line\">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters\">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a></p>","more":"<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>方法：滑动窗口</p>\n<p>我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界,在每一步的操作中，我们会将左指针向右移动一格，表示我们开始枚举下一个字符作为起始位置，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。<br>在移动结束后，这个子串就对应着 以左指针开始的，不包含重复字符的最长子串。我们记录下这个子串的长度；在枚举结束后，我们找到的最长的子串的长度即为答案。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lengthOfLongestSubstring = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = s.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">let</span> longestSubstring = s[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置左右指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> lk = <span class=\"number\">0</span>,rk = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> longestLength = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> lk = <span class=\"number\">0</span>; lk &lt; n; ++lk) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 没重复的</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(rk &lt; n &amp;&amp; longestSubstring.indexOf(s[rk]) == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      longestSubstring += s[rk];</span><br><span class=\"line\">      rk++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    longestLength = <span class=\"built_in\">Math</span>.max(longestLength, rk - lk);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找到重复的存储字符串中的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = s.indexOf(s[rk],lk);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 添加进来重复的这个值</span></span><br><span class=\"line\">    longestSubstring += s[rk];</span><br><span class=\"line\">    rk++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 截取新的字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index != -<span class=\"number\">1</span>) longestSubstring = s.substring(index + <span class=\"number\">1</span>,rk);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新起始点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &gt; lk) lk = index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 满足退出条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rk &gt;= n) <span class=\"keyword\">return</span> longestLength;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> longestLength;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode-最大回文子串","date":"2021-03-30T08:49:14.000Z","_content":"\n## 题目\n求字符串的最长回文子串\n\n## 示例\n```\n输入: \"babad\"\n输出: \"bab\"\n注意: \"aba\" 也是一个有效答案\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/longest-palindromic-substring\n<!-- more -->\n\n## 题解\n### 暴力解法\n```js\n/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n  let len = s.length;\n  if(len < 2) return s;\n  \n  // 最大长度\n  let maxLen = 1;\n  \n  // 获取第一个值\n  let res = s.substring(0,1);\n  \n  // 枚举所有长度大于等于 2 的子串\n  for(let i = 0; i < len - 1; i++){\n    for(let j = i + 1; j < len; j++){\n      \n      // 如果是回文串\n      if(valid(s,i,j)){\n        \n        // 如果回文串长度大于已存储长度\n        if((j + 1) - i > maxLen)\n        {\n          res = s.substring(i,j+1);\n          maxLen = res.length;\n        }\n      }\n    }\n  }\n\n  return res;\n};\n  \n\n// 计算字符串节点内是不是回文串\nlet valid = function(s,left,right){\n  \n  // 验证子串 s[left,right] 是不是回文串\n  while(left < right){\n    if(s.charAt(left) != s.charAt(right))\n    {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  \n  return true;\n}\n```\n\n### 动态规划\n从回文串的定义展开讨论：\n- 如果一个字符串的头尾两个字符都不相等，那么这个字符串一定不是回文串；\n- 如果一个字符串的头尾两个字符相等，才有必要继续判断下去。\n- 如果里面的子串是回文，整体就是回文串；\n- 如果里面的子串不是回文串，整体就不是回文串。\n\n```js\nvar longestPalindrome = function(s) {\n  let len = s.length;\n  let ans = \"\";\n  \n  // 初始化一个二维矩阵\n  var arr = new Array(len).fill().map(() => new Array(len).fill(false));\n\n  // 字符串长度\n  for(let del = 0; del < len; del++){\n    \n    // 字符串起点位置\n    for(let i = 0; i < len - del; i++){\n      \n      // 字符串终点位置\n      let j = i + del;\n \n      // 如果只有一个字符，属于回文\n      if(del == 0){ arr[i][j] = true}\n\n      // 如果只有两个字符，则它们相等为回文\n      else if(del == 1) { arr[i][j] = s.charAt(i) == s.charAt(j)}\n      \n      // 如果有多个字符，则它们相等 并且 它们里面的两个相等，为回文\n      // 它们内部的字符为 起点后一位到终点前一位 [i+1][j-1]\n      // 计算过程是根据子串长度从小到大计算的，它们在之前被计算过\n      else { arr[i][j] = s.charAt(i) == s.charAt(j) && arr[i+1][j-1] }\n      \n      // 如果当前子串是回文字符串\n      if(arr[i][j] && del >= ans.length){\n        ans = s.substring(i,j + 1)\n      }\n    }\n  }\n  return ans;\n}\n```\n\n### 中心扩散\n中心扩散法的思路是：遍历每一个索引，以这个索引为中心，利用“回文串”中心对称的特点，往两边扩散，看最多能扩散多远。\n我们可以设计一个方法，兼容以上两种情况：\n1、如果传入重合的索引编码，进行中心扩散，此时得到的回文子串的长度是奇数；\n2、如果传入相邻的索引编码，进行中心扩散，此时得到的回文子串的长度是偶数。\n\n```js\nconst longestPalindrome = function(s) {\n  let len = s.length;\n  if(len < 2) return s;\n  \n  let start = 0, end = 0;\n  for(let i = 0; i < len; i++){\n    // 一个字符为中心的回文子串\n    let len1 = expandAroundCenter(s,i,i);\n    \n    // 两个相同字符为中心的回文子串\n    let len2 = expandAroundCenter(s,i,i+1);\n    \n    let longest = Math.max(len1,len2);\n    \n    // 如果当前回文字符串长度为史上最长，则更新最大回文字符串两端位置\n    if(longest > end - start){\n      \n      // 简化思路\n      // let isOdd = longest % 2 == 1;\n      \n      // start = i - (isOdd ? (longest - 1) / 2 : (longest - 2) / 2);\n      start = i - Math.floor((longest - 1) / 2);\n      \n      // end = i + (isOdd ? (longest - 1) / 2 : longest / 2)\n      end = i + Math.floor(longest / 2);\n    }\n  }\n  \n  return s.substring(start,end+1)\n}\n\n// 向两边扩散 判断是否是回文字符串\nconst expandAroundCenter = function(s,left,right){\n  while(left >= 0 &&\n        right <= s.length &&\n        s.charAt(left) == s.charAt(right)){\n    left--;\n    right++;\n  }\n  \n  // 当跳出 while 循环时，s.charAt(left) != s.charAt(right)\n  // 所以回文字符串长度为 (right - 1 + 1) - (left + 1),如下 \n  return --right + 1 - ++left;\n}\n```\n","source":"_posts/leetcode-最大回文子串.md","raw":"---\ntitle: leetcode-最大回文子串\ndate: 2021-03-30 16:49:14\ntags: leetcode\n---\n\n## 题目\n求字符串的最长回文子串\n\n## 示例\n```\n输入: \"babad\"\n输出: \"bab\"\n注意: \"aba\" 也是一个有效答案\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/longest-palindromic-substring\n<!-- more -->\n\n## 题解\n### 暴力解法\n```js\n/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n  let len = s.length;\n  if(len < 2) return s;\n  \n  // 最大长度\n  let maxLen = 1;\n  \n  // 获取第一个值\n  let res = s.substring(0,1);\n  \n  // 枚举所有长度大于等于 2 的子串\n  for(let i = 0; i < len - 1; i++){\n    for(let j = i + 1; j < len; j++){\n      \n      // 如果是回文串\n      if(valid(s,i,j)){\n        \n        // 如果回文串长度大于已存储长度\n        if((j + 1) - i > maxLen)\n        {\n          res = s.substring(i,j+1);\n          maxLen = res.length;\n        }\n      }\n    }\n  }\n\n  return res;\n};\n  \n\n// 计算字符串节点内是不是回文串\nlet valid = function(s,left,right){\n  \n  // 验证子串 s[left,right] 是不是回文串\n  while(left < right){\n    if(s.charAt(left) != s.charAt(right))\n    {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  \n  return true;\n}\n```\n\n### 动态规划\n从回文串的定义展开讨论：\n- 如果一个字符串的头尾两个字符都不相等，那么这个字符串一定不是回文串；\n- 如果一个字符串的头尾两个字符相等，才有必要继续判断下去。\n- 如果里面的子串是回文，整体就是回文串；\n- 如果里面的子串不是回文串，整体就不是回文串。\n\n```js\nvar longestPalindrome = function(s) {\n  let len = s.length;\n  let ans = \"\";\n  \n  // 初始化一个二维矩阵\n  var arr = new Array(len).fill().map(() => new Array(len).fill(false));\n\n  // 字符串长度\n  for(let del = 0; del < len; del++){\n    \n    // 字符串起点位置\n    for(let i = 0; i < len - del; i++){\n      \n      // 字符串终点位置\n      let j = i + del;\n \n      // 如果只有一个字符，属于回文\n      if(del == 0){ arr[i][j] = true}\n\n      // 如果只有两个字符，则它们相等为回文\n      else if(del == 1) { arr[i][j] = s.charAt(i) == s.charAt(j)}\n      \n      // 如果有多个字符，则它们相等 并且 它们里面的两个相等，为回文\n      // 它们内部的字符为 起点后一位到终点前一位 [i+1][j-1]\n      // 计算过程是根据子串长度从小到大计算的，它们在之前被计算过\n      else { arr[i][j] = s.charAt(i) == s.charAt(j) && arr[i+1][j-1] }\n      \n      // 如果当前子串是回文字符串\n      if(arr[i][j] && del >= ans.length){\n        ans = s.substring(i,j + 1)\n      }\n    }\n  }\n  return ans;\n}\n```\n\n### 中心扩散\n中心扩散法的思路是：遍历每一个索引，以这个索引为中心，利用“回文串”中心对称的特点，往两边扩散，看最多能扩散多远。\n我们可以设计一个方法，兼容以上两种情况：\n1、如果传入重合的索引编码，进行中心扩散，此时得到的回文子串的长度是奇数；\n2、如果传入相邻的索引编码，进行中心扩散，此时得到的回文子串的长度是偶数。\n\n```js\nconst longestPalindrome = function(s) {\n  let len = s.length;\n  if(len < 2) return s;\n  \n  let start = 0, end = 0;\n  for(let i = 0; i < len; i++){\n    // 一个字符为中心的回文子串\n    let len1 = expandAroundCenter(s,i,i);\n    \n    // 两个相同字符为中心的回文子串\n    let len2 = expandAroundCenter(s,i,i+1);\n    \n    let longest = Math.max(len1,len2);\n    \n    // 如果当前回文字符串长度为史上最长，则更新最大回文字符串两端位置\n    if(longest > end - start){\n      \n      // 简化思路\n      // let isOdd = longest % 2 == 1;\n      \n      // start = i - (isOdd ? (longest - 1) / 2 : (longest - 2) / 2);\n      start = i - Math.floor((longest - 1) / 2);\n      \n      // end = i + (isOdd ? (longest - 1) / 2 : longest / 2)\n      end = i + Math.floor(longest / 2);\n    }\n  }\n  \n  return s.substring(start,end+1)\n}\n\n// 向两边扩散 判断是否是回文字符串\nconst expandAroundCenter = function(s,left,right){\n  while(left >= 0 &&\n        right <= s.length &&\n        s.charAt(left) == s.charAt(right)){\n    left--;\n    right++;\n  }\n  \n  // 当跳出 while 循环时，s.charAt(left) != s.charAt(right)\n  // 所以回文字符串长度为 (right - 1 + 1) - (left + 1),如下 \n  return --right + 1 - ++left;\n}\n```\n","slug":"leetcode-最大回文子串","published":1,"updated":"2021-09-04T09:47:13.420Z","_id":"ckmvs95yz0000wipv2df65u24","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>求字符串的最长回文子串</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;babad&quot;</span><br><span class=\"line\">输出: &quot;bab&quot;</span><br><span class=\"line\">注意: &quot;aba&quot; 也是一个有效答案</span><br></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring\">https://leetcode-cn.com/problems/longest-palindromic-substring</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><h3 id=\"暴力解法\"><a href=\"#暴力解法\" class=\"headerlink\" title=\"暴力解法\"></a>暴力解法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> longestPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(len &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 最大长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxLen = <span class=\"number\">1</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 获取第一个值</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = s.substring(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 枚举所有长度大于等于 2 的子串</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 如果是回文串</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(valid(s,i,j))&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果回文串长度大于已存储长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((j + <span class=\"number\">1</span>) - i &gt; maxLen)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          res = s.substring(i,j+<span class=\"number\">1</span>);</span><br><span class=\"line\">          maxLen = res.length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算字符串节点内是不是回文串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> valid = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s,left,right</span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 验证子串 s[left,right] 是不是回文串</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.charAt(left) != s.charAt(right))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    left++;</span><br><span class=\"line\">    right--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h3><p>从回文串的定义展开讨论：</p>\n<ul>\n<li>如果一个字符串的头尾两个字符都不相等，那么这个字符串一定不是回文串；</li>\n<li>如果一个字符串的头尾两个字符相等，才有必要继续判断下去。</li>\n<li>如果里面的子串是回文，整体就是回文串；</li>\n<li>如果里面的子串不是回文串，整体就不是回文串。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> longestPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 初始化一个二维矩阵</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len).fill().map(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len).fill(<span class=\"literal\">false</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 字符串长度</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> del = <span class=\"number\">0</span>; del &lt; len; del++)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 字符串起点位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - del; i++)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 字符串终点位置</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> j = i + del;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 如果只有一个字符，属于回文</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(del == <span class=\"number\">0</span>)&#123; arr[i][j] = <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果只有两个字符，则它们相等为回文</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(del == <span class=\"number\">1</span>) &#123; arr[i][j] = s.charAt(i) == s.charAt(j)&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 如果有多个字符，则它们相等 并且 它们里面的两个相等，为回文</span></span><br><span class=\"line\">      <span class=\"comment\">// 它们内部的字符为 起点后一位到终点前一位 [i+1][j-1]</span></span><br><span class=\"line\">      <span class=\"comment\">// 计算过程是根据子串长度从小到大计算的，它们在之前被计算过</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123; arr[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; arr[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 如果当前子串是回文字符串</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr[i][j] &amp;&amp; del &gt;= ans.length)&#123;</span><br><span class=\"line\">        ans = s.substring(i,j + <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中心扩散\"><a href=\"#中心扩散\" class=\"headerlink\" title=\"中心扩散\"></a>中心扩散</h3><p>中心扩散法的思路是：遍历每一个索引，以这个索引为中心，利用“回文串”中心对称的特点，往两边扩散，看最多能扩散多远。<br>我们可以设计一个方法，兼容以上两种情况：<br>1、如果传入重合的索引编码，进行中心扩散，此时得到的回文子串的长度是奇数；<br>2、如果传入相邻的索引编码，进行中心扩散，此时得到的回文子串的长度是偶数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> longestPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(len &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一个字符为中心的回文子串</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> len1 = expandAroundCenter(s,i,i);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 两个相同字符为中心的回文子串</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> len2 = expandAroundCenter(s,i,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> longest = <span class=\"built_in\">Math</span>.max(len1,len2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果当前回文字符串长度为史上最长，则更新最大回文字符串两端位置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(longest &gt; end - start)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 简化思路</span></span><br><span class=\"line\">      <span class=\"comment\">// let isOdd = longest % 2 == 1;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// start = i - (isOdd ? (longest - 1) / 2 : (longest - 2) / 2);</span></span><br><span class=\"line\">      start = i - <span class=\"built_in\">Math</span>.floor((longest - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// end = i + (isOdd ? (longest - 1) / 2 : longest / 2)</span></span><br><span class=\"line\">      end = i + <span class=\"built_in\">Math</span>.floor(longest / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.substring(start,end+<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向两边扩散 判断是否是回文字符串</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> expandAroundCenter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s,left,right</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(left &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        right &lt;= s.length &amp;&amp;</span><br><span class=\"line\">        s.charAt(left) == s.charAt(right))&#123;</span><br><span class=\"line\">    left--;</span><br><span class=\"line\">    right++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 当跳出 while 循环时，s.charAt(left) != s.charAt(right)</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以回文字符串长度为 (right - 1 + 1) - (left + 1),如下 </span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> --right + <span class=\"number\">1</span> - ++left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>求字符串的最长回文子串</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;babad&quot;</span><br><span class=\"line\">输出: &quot;bab&quot;</span><br><span class=\"line\">注意: &quot;aba&quot; 也是一个有效答案</span><br></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring\">https://leetcode-cn.com/problems/longest-palindromic-substring</a></p>","more":"<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><h3 id=\"暴力解法\"><a href=\"#暴力解法\" class=\"headerlink\" title=\"暴力解法\"></a>暴力解法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> longestPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(len &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 最大长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxLen = <span class=\"number\">1</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 获取第一个值</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = s.substring(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 枚举所有长度大于等于 2 的子串</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 如果是回文串</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(valid(s,i,j))&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果回文串长度大于已存储长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((j + <span class=\"number\">1</span>) - i &gt; maxLen)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          res = s.substring(i,j+<span class=\"number\">1</span>);</span><br><span class=\"line\">          maxLen = res.length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算字符串节点内是不是回文串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> valid = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s,left,right</span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 验证子串 s[left,right] 是不是回文串</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.charAt(left) != s.charAt(right))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    left++;</span><br><span class=\"line\">    right--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h3><p>从回文串的定义展开讨论：</p>\n<ul>\n<li>如果一个字符串的头尾两个字符都不相等，那么这个字符串一定不是回文串；</li>\n<li>如果一个字符串的头尾两个字符相等，才有必要继续判断下去。</li>\n<li>如果里面的子串是回文，整体就是回文串；</li>\n<li>如果里面的子串不是回文串，整体就不是回文串。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> longestPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 初始化一个二维矩阵</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len).fill().map(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len).fill(<span class=\"literal\">false</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 字符串长度</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> del = <span class=\"number\">0</span>; del &lt; len; del++)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 字符串起点位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - del; i++)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 字符串终点位置</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> j = i + del;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 如果只有一个字符，属于回文</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(del == <span class=\"number\">0</span>)&#123; arr[i][j] = <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果只有两个字符，则它们相等为回文</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(del == <span class=\"number\">1</span>) &#123; arr[i][j] = s.charAt(i) == s.charAt(j)&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 如果有多个字符，则它们相等 并且 它们里面的两个相等，为回文</span></span><br><span class=\"line\">      <span class=\"comment\">// 它们内部的字符为 起点后一位到终点前一位 [i+1][j-1]</span></span><br><span class=\"line\">      <span class=\"comment\">// 计算过程是根据子串长度从小到大计算的，它们在之前被计算过</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123; arr[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; arr[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 如果当前子串是回文字符串</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr[i][j] &amp;&amp; del &gt;= ans.length)&#123;</span><br><span class=\"line\">        ans = s.substring(i,j + <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中心扩散\"><a href=\"#中心扩散\" class=\"headerlink\" title=\"中心扩散\"></a>中心扩散</h3><p>中心扩散法的思路是：遍历每一个索引，以这个索引为中心，利用“回文串”中心对称的特点，往两边扩散，看最多能扩散多远。<br>我们可以设计一个方法，兼容以上两种情况：<br>1、如果传入重合的索引编码，进行中心扩散，此时得到的回文子串的长度是奇数；<br>2、如果传入相邻的索引编码，进行中心扩散，此时得到的回文子串的长度是偶数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> longestPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = s.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(len &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一个字符为中心的回文子串</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> len1 = expandAroundCenter(s,i,i);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 两个相同字符为中心的回文子串</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> len2 = expandAroundCenter(s,i,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> longest = <span class=\"built_in\">Math</span>.max(len1,len2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果当前回文字符串长度为史上最长，则更新最大回文字符串两端位置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(longest &gt; end - start)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 简化思路</span></span><br><span class=\"line\">      <span class=\"comment\">// let isOdd = longest % 2 == 1;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// start = i - (isOdd ? (longest - 1) / 2 : (longest - 2) / 2);</span></span><br><span class=\"line\">      start = i - <span class=\"built_in\">Math</span>.floor((longest - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// end = i + (isOdd ? (longest - 1) / 2 : longest / 2)</span></span><br><span class=\"line\">      end = i + <span class=\"built_in\">Math</span>.floor(longest / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.substring(start,end+<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向两边扩散 判断是否是回文字符串</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> expandAroundCenter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s,left,right</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(left &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        right &lt;= s.length &amp;&amp;</span><br><span class=\"line\">        s.charAt(left) == s.charAt(right))&#123;</span><br><span class=\"line\">    left--;</span><br><span class=\"line\">    right++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 当跳出 while 循环时，s.charAt(left) != s.charAt(right)</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以回文字符串长度为 (right - 1 + 1) - (left + 1),如下 </span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> --right + <span class=\"number\">1</span> - ++left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode-Z字形变换","date":"2021-04-02T12:18:38.000Z","_content":"\n## 题目\n将一个给定字符串 `s` 根据给定的行数 `numRows` ，以从上往下、从左到右进行 `Z` 字形排列。\n\n## 示例\n```\n输入：s = \"PAYPALISHIRING\", numRows = 4\n输出：\"PINALSIGYAHRPI\"\n解释：\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zigzag-conversion\n\n<!-- more -->\n\n## 题解\n### 按行数组拆分计算\n```js\n/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n  if(numRows == 1 || numRows >= s.length) return s;\n\n  let arr = new Array(numRows).fill('');\n  let index = 0;\n  let goingDown = true;\n  for(let c of s){\n      arr[index] += c;\n      index += goingDown ? 1 : -1;\n      if(index === numRows - 1) goingDown = false;\n      if(index === 0) goingDown = true;\n  }\n  return arr.join('');\n};\n```\n\n### 一个个计算\n```js\n/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n  if(numRows == 1 || numRows >= s.length) return s;\n  \n  let ans = '';\n  var space = 2 * numRows - 2;\n\n  // 第 i 行\n  for(let i = 0; i < numRows; i++){\n\n      // 每行中的值，是跳过中间部分的值\n      for(let j = 0; i+j < s.length;j+=space){\n          if(i == 0) {\n               ans += s[j];\n          } else if(i == numRows - 1) {\n              ans += s[j + numRows - 1]\n          } else{\n              if(s[j + i]) ans += s[j + i];\n              if(s[j + space - i]) ans += s[j + space - i];\n          }\n      }\n  }\n\n  return ans;\n};\n```\n","source":"_posts/leetcode-Z字形变换.md","raw":"---\ntitle: leetcode-Z字形变换\ndate: 2021-04-02 20:18:38\ntags: leetcode\n---\n\n## 题目\n将一个给定字符串 `s` 根据给定的行数 `numRows` ，以从上往下、从左到右进行 `Z` 字形排列。\n\n## 示例\n```\n输入：s = \"PAYPALISHIRING\", numRows = 4\n输出：\"PINALSIGYAHRPI\"\n解释：\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zigzag-conversion\n\n<!-- more -->\n\n## 题解\n### 按行数组拆分计算\n```js\n/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n  if(numRows == 1 || numRows >= s.length) return s;\n\n  let arr = new Array(numRows).fill('');\n  let index = 0;\n  let goingDown = true;\n  for(let c of s){\n      arr[index] += c;\n      index += goingDown ? 1 : -1;\n      if(index === numRows - 1) goingDown = false;\n      if(index === 0) goingDown = true;\n  }\n  return arr.join('');\n};\n```\n\n### 一个个计算\n```js\n/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n  if(numRows == 1 || numRows >= s.length) return s;\n  \n  let ans = '';\n  var space = 2 * numRows - 2;\n\n  // 第 i 行\n  for(let i = 0; i < numRows; i++){\n\n      // 每行中的值，是跳过中间部分的值\n      for(let j = 0; i+j < s.length;j+=space){\n          if(i == 0) {\n               ans += s[j];\n          } else if(i == numRows - 1) {\n              ans += s[j + numRows - 1]\n          } else{\n              if(s[j + i]) ans += s[j + i];\n              if(s[j + space - i]) ans += s[j + space - i];\n          }\n      }\n  }\n\n  return ans;\n};\n```\n","slug":"leetcode-Z字形变换","published":1,"updated":"2021-09-04T09:47:13.419Z","_id":"ckn0bet220000e8pv6vxdb6ue","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 <code>Z</code> 字形排列。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 4</span><br><span class=\"line\">输出：&quot;PINALSIGYAHRPI&quot;</span><br><span class=\"line\">解释：</span><br><span class=\"line\">P     I    N</span><br><span class=\"line\">A   L S  I G</span><br><span class=\"line\">Y A   H R</span><br><span class=\"line\">P     I</span><br></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zigzag-conversion\">https://leetcode-cn.com/problems/zigzag-conversion</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><h3 id=\"按行数组拆分计算\"><a href=\"#按行数组拆分计算\" class=\"headerlink\" title=\"按行数组拆分计算\"></a>按行数组拆分计算</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numRows</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, numRows</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(numRows == <span class=\"number\">1</span> || numRows &gt;= s.length) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(numRows).fill(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> goingDown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> c <span class=\"keyword\">of</span> s)&#123;</span><br><span class=\"line\">      arr[index] += c;</span><br><span class=\"line\">      index += goingDown ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(index === numRows - <span class=\"number\">1</span>) goingDown = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(index === <span class=\"number\">0</span>) goingDown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一个个计算\"><a href=\"#一个个计算\" class=\"headerlink\" title=\"一个个计算\"></a>一个个计算</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numRows</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, numRows</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(numRows == <span class=\"number\">1</span> || numRows &gt;= s.length) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> space = <span class=\"number\">2</span> * numRows - <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 第 i 行</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 每行中的值，是跳过中间部分的值</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; i+j &lt; s.length;j+=space)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               ans += s[j];</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == numRows - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              ans += s[j + numRows - <span class=\"number\">1</span>]</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(s[j + i]) ans += s[j + i];</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(s[j + space - i]) ans += s[j + space - i];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 <code>Z</code> 字形排列。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 4</span><br><span class=\"line\">输出：&quot;PINALSIGYAHRPI&quot;</span><br><span class=\"line\">解释：</span><br><span class=\"line\">P     I    N</span><br><span class=\"line\">A   L S  I G</span><br><span class=\"line\">Y A   H R</span><br><span class=\"line\">P     I</span><br></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zigzag-conversion\">https://leetcode-cn.com/problems/zigzag-conversion</a></p>","more":"<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><h3 id=\"按行数组拆分计算\"><a href=\"#按行数组拆分计算\" class=\"headerlink\" title=\"按行数组拆分计算\"></a>按行数组拆分计算</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numRows</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, numRows</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(numRows == <span class=\"number\">1</span> || numRows &gt;= s.length) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(numRows).fill(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> goingDown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> c <span class=\"keyword\">of</span> s)&#123;</span><br><span class=\"line\">      arr[index] += c;</span><br><span class=\"line\">      index += goingDown ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(index === numRows - <span class=\"number\">1</span>) goingDown = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(index === <span class=\"number\">0</span>) goingDown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一个个计算\"><a href=\"#一个个计算\" class=\"headerlink\" title=\"一个个计算\"></a>一个个计算</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">numRows</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, numRows</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(numRows == <span class=\"number\">1</span> || numRows &gt;= s.length) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> space = <span class=\"number\">2</span> * numRows - <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 第 i 行</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; numRows; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 每行中的值，是跳过中间部分的值</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; i+j &lt; s.length;j+=space)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               ans += s[j];</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == numRows - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              ans += s[j + numRows - <span class=\"number\">1</span>]</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(s[j + i]) ans += s[j + i];</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(s[j + space - i]) ans += s[j + space - i];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode-盛最多水的容器","date":"2021-04-02T13:47:08.000Z","_content":"\n## 题目\n给你 `n` 个非负整数 `a1，a2，...，an`，每个数代表坐标中的一个点 `(i, ai)` 。在坐标内画 `n` 条垂直线，垂直线 `i` 的两个端点分别为 `(i, ai)` 和 `(i, 0)` 。找出其中的两条线，使得它们与 `x` 轴共同构成的容器可以容纳最多的水。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/container-with-most-water\n\n<!-- more -->\n\n## 题解\n### 方法：双指针\n示例为：\n\n```\n\n[1, 8, 6, 2, 5, 4, 8, 3, 7]\n ^                       ^\n```\n在初始时，左右指针分别指向数组的左右两端，它们可以容纳的水量为 `min(1, 7) * 8=8`。\n\n此时我们需要移动一个指针。移动哪一个呢？直觉告诉我们，应该移动对应数字较小的那个指针（即此时的左指针）。这是因为，由于容纳的水量是由\n```\n两个指针指向的数字中较小值 * 指针之间的距离\n```\n\n决定的。如果我们移动数字较大的那个指针，那么前者`「两个指针指向的数字中较小值」`不会增加，后者`「指针之间的距离」`会减小，那么这个乘积会减小。因此，我们移动数字较大的那个指针是不合理的。因此，我们移动 `数字较小的那个指针`。\n\n所以，我们将左指针向右移动：\n```\n\n[1, 8, 6, 2, 5, 4, 8, 3, 7]\n    ^                    ^\n```\n此时可以容纳的水量为 `min(8, 7) * 7 = 49`。由于右指针对应的数字较小，我们移动右指针：\n```\n\n[1, 8, 6, 2, 5, 4, 8, 3, 7]\n    ^                 ^\n```\n此时可以容纳的水量为 `min(8, 3) * 6 = 18`。由于右指针对应的数字较小，我们移动右指针：\n```\n\n[1, 8, 6, 2, 5, 4, 8, 3, 7]\n    ^              ^\n```\n此时可以容纳的水量为 `min(8, 8) * 5 = 40`。两指针对应的数字相同，我们可以任意移动一个，例如左指针：\n\n```\n\n[1, 8, 6, 2, 5, 4, 8, 3, 7]\n       ^           ^\n```\n此时可以容纳的水量为 `min(6, 8) * 4 = 24`。由于左指针对应的数字较小，我们移动左指针，并且可以发现，在这之后左指针对应的数字总是较小，因此我们会一直移动左指针，直到两个指针重合。\n\n在我们移动指针的过程中，计算到的最多可以容纳的数量为 4949，即为最终的答案。\n\n```js\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n  let left = 0, right = height.length - 1;\n  let ans = 0;\n\n  while(left < right){\n      let area = Math.min(height[left],height[right]) * (right - left);\n      ans = Math.max(ans,area);\n      if(height[left] < height[right]){\n          left++;\n      }else{\n          right--;\n      }\n  }\n\n  return ans;\n};\n```\n","source":"_posts/leetcode-盛最多水的容器.md","raw":"---\ntitle: leetcode-盛最多水的容器\ndate: 2021-04-02 21:47:08\ntags: leetcode\n---\n\n## 题目\n给你 `n` 个非负整数 `a1，a2，...，an`，每个数代表坐标中的一个点 `(i, ai)` 。在坐标内画 `n` 条垂直线，垂直线 `i` 的两个端点分别为 `(i, ai)` 和 `(i, 0)` 。找出其中的两条线，使得它们与 `x` 轴共同构成的容器可以容纳最多的水。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/container-with-most-water\n\n<!-- more -->\n\n## 题解\n### 方法：双指针\n示例为：\n\n```\n\n[1, 8, 6, 2, 5, 4, 8, 3, 7]\n ^                       ^\n```\n在初始时，左右指针分别指向数组的左右两端，它们可以容纳的水量为 `min(1, 7) * 8=8`。\n\n此时我们需要移动一个指针。移动哪一个呢？直觉告诉我们，应该移动对应数字较小的那个指针（即此时的左指针）。这是因为，由于容纳的水量是由\n```\n两个指针指向的数字中较小值 * 指针之间的距离\n```\n\n决定的。如果我们移动数字较大的那个指针，那么前者`「两个指针指向的数字中较小值」`不会增加，后者`「指针之间的距离」`会减小，那么这个乘积会减小。因此，我们移动数字较大的那个指针是不合理的。因此，我们移动 `数字较小的那个指针`。\n\n所以，我们将左指针向右移动：\n```\n\n[1, 8, 6, 2, 5, 4, 8, 3, 7]\n    ^                    ^\n```\n此时可以容纳的水量为 `min(8, 7) * 7 = 49`。由于右指针对应的数字较小，我们移动右指针：\n```\n\n[1, 8, 6, 2, 5, 4, 8, 3, 7]\n    ^                 ^\n```\n此时可以容纳的水量为 `min(8, 3) * 6 = 18`。由于右指针对应的数字较小，我们移动右指针：\n```\n\n[1, 8, 6, 2, 5, 4, 8, 3, 7]\n    ^              ^\n```\n此时可以容纳的水量为 `min(8, 8) * 5 = 40`。两指针对应的数字相同，我们可以任意移动一个，例如左指针：\n\n```\n\n[1, 8, 6, 2, 5, 4, 8, 3, 7]\n       ^           ^\n```\n此时可以容纳的水量为 `min(6, 8) * 4 = 24`。由于左指针对应的数字较小，我们移动左指针，并且可以发现，在这之后左指针对应的数字总是较小，因此我们会一直移动左指针，直到两个指针重合。\n\n在我们移动指针的过程中，计算到的最多可以容纳的数量为 4949，即为最终的答案。\n\n```js\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n  let left = 0, right = height.length - 1;\n  let ans = 0;\n\n  while(left < right){\n      let area = Math.min(height[left],height[right]) * (right - left);\n      ans = Math.max(ans,area);\n      if(height[left] < height[right]){\n          left++;\n      }else{\n          right--;\n      }\n  }\n\n  return ans;\n};\n```\n","slug":"leetcode-盛最多水的容器","published":1,"updated":"2021-09-04T09:47:13.421Z","_id":"ckn0djpgk0000iqpvages6qw5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你 <code>n</code> 个非负整数 <code>a1，a2，...，an</code>，每个数代表坐标中的一个点 <code>(i, ai)</code> 。在坐标内画 <code>n</code> 条垂直线，垂直线 <code>i</code> 的两个端点分别为 <code>(i, ai)</code> 和 <code>(i, 0)</code> 。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/container-with-most-water\">https://leetcode-cn.com/problems/container-with-most-water</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><h3 id=\"方法：双指针\"><a href=\"#方法：双指针\" class=\"headerlink\" title=\"方法：双指针\"></a>方法：双指针</h3><p>示例为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[1, 8, 6, 2, 5, 4, 8, 3, 7]</span><br><span class=\"line\"> ^                       ^</span><br></pre></td></tr></table></figure>\n<p>在初始时，左右指针分别指向数组的左右两端，它们可以容纳的水量为 <code>min(1, 7) * 8=8</code>。</p>\n<p>此时我们需要移动一个指针。移动哪一个呢？直觉告诉我们，应该移动对应数字较小的那个指针（即此时的左指针）。这是因为，由于容纳的水量是由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个指针指向的数字中较小值 * 指针之间的距离</span><br></pre></td></tr></table></figure>\n\n<p>决定的。如果我们移动数字较大的那个指针，那么前者<code>「两个指针指向的数字中较小值」</code>不会增加，后者<code>「指针之间的距离」</code>会减小，那么这个乘积会减小。因此，我们移动数字较大的那个指针是不合理的。因此，我们移动 <code>数字较小的那个指针</code>。</p>\n<p>所以，我们将左指针向右移动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[1, 8, 6, 2, 5, 4, 8, 3, 7]</span><br><span class=\"line\">    ^                    ^</span><br></pre></td></tr></table></figure>\n<p>此时可以容纳的水量为 <code>min(8, 7) * 7 = 49</code>。由于右指针对应的数字较小，我们移动右指针：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[1, 8, 6, 2, 5, 4, 8, 3, 7]</span><br><span class=\"line\">    ^                 ^</span><br></pre></td></tr></table></figure>\n<p>此时可以容纳的水量为 <code>min(8, 3) * 6 = 18</code>。由于右指针对应的数字较小，我们移动右指针：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[1, 8, 6, 2, 5, 4, 8, 3, 7]</span><br><span class=\"line\">    ^              ^</span><br></pre></td></tr></table></figure>\n<p>此时可以容纳的水量为 <code>min(8, 8) * 5 = 40</code>。两指针对应的数字相同，我们可以任意移动一个，例如左指针：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[1, 8, 6, 2, 5, 4, 8, 3, 7]</span><br><span class=\"line\">       ^           ^</span><br></pre></td></tr></table></figure>\n<p>此时可以容纳的水量为 <code>min(6, 8) * 4 = 24</code>。由于左指针对应的数字较小，我们移动左指针，并且可以发现，在这之后左指针对应的数字总是较小，因此我们会一直移动左指针，直到两个指针重合。</p>\n<p>在我们移动指针的过程中，计算到的最多可以容纳的数量为 4949，即为最终的答案。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">height</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxArea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">height</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>, right = height.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> area = <span class=\"built_in\">Math</span>.min(height[left],height[right]) * (right - left);</span><br><span class=\"line\">      ans = <span class=\"built_in\">Math</span>.max(ans,area);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(height[left] &lt; height[right])&#123;</span><br><span class=\"line\">          left++;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          right--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你 <code>n</code> 个非负整数 <code>a1，a2，...，an</code>，每个数代表坐标中的一个点 <code>(i, ai)</code> 。在坐标内画 <code>n</code> 条垂直线，垂直线 <code>i</code> 的两个端点分别为 <code>(i, ai)</code> 和 <code>(i, 0)</code> 。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/container-with-most-water\">https://leetcode-cn.com/problems/container-with-most-water</a></p>","more":"<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><h3 id=\"方法：双指针\"><a href=\"#方法：双指针\" class=\"headerlink\" title=\"方法：双指针\"></a>方法：双指针</h3><p>示例为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[1, 8, 6, 2, 5, 4, 8, 3, 7]</span><br><span class=\"line\"> ^                       ^</span><br></pre></td></tr></table></figure>\n<p>在初始时，左右指针分别指向数组的左右两端，它们可以容纳的水量为 <code>min(1, 7) * 8=8</code>。</p>\n<p>此时我们需要移动一个指针。移动哪一个呢？直觉告诉我们，应该移动对应数字较小的那个指针（即此时的左指针）。这是因为，由于容纳的水量是由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个指针指向的数字中较小值 * 指针之间的距离</span><br></pre></td></tr></table></figure>\n\n<p>决定的。如果我们移动数字较大的那个指针，那么前者<code>「两个指针指向的数字中较小值」</code>不会增加，后者<code>「指针之间的距离」</code>会减小，那么这个乘积会减小。因此，我们移动数字较大的那个指针是不合理的。因此，我们移动 <code>数字较小的那个指针</code>。</p>\n<p>所以，我们将左指针向右移动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[1, 8, 6, 2, 5, 4, 8, 3, 7]</span><br><span class=\"line\">    ^                    ^</span><br></pre></td></tr></table></figure>\n<p>此时可以容纳的水量为 <code>min(8, 7) * 7 = 49</code>。由于右指针对应的数字较小，我们移动右指针：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[1, 8, 6, 2, 5, 4, 8, 3, 7]</span><br><span class=\"line\">    ^                 ^</span><br></pre></td></tr></table></figure>\n<p>此时可以容纳的水量为 <code>min(8, 3) * 6 = 18</code>。由于右指针对应的数字较小，我们移动右指针：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[1, 8, 6, 2, 5, 4, 8, 3, 7]</span><br><span class=\"line\">    ^              ^</span><br></pre></td></tr></table></figure>\n<p>此时可以容纳的水量为 <code>min(8, 8) * 5 = 40</code>。两指针对应的数字相同，我们可以任意移动一个，例如左指针：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[1, 8, 6, 2, 5, 4, 8, 3, 7]</span><br><span class=\"line\">       ^           ^</span><br></pre></td></tr></table></figure>\n<p>此时可以容纳的水量为 <code>min(6, 8) * 4 = 24</code>。由于左指针对应的数字较小，我们移动左指针，并且可以发现，在这之后左指针对应的数字总是较小，因此我们会一直移动左指针，直到两个指针重合。</p>\n<p>在我们移动指针的过程中，计算到的最多可以容纳的数量为 4949，即为最终的答案。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">height</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxArea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">height</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>, right = height.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> area = <span class=\"built_in\">Math</span>.min(height[left],height[right]) * (right - left);</span><br><span class=\"line\">      ans = <span class=\"built_in\">Math</span>.max(ans,area);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(height[left] &lt; height[right])&#123;</span><br><span class=\"line\">          left++;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          right--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript-对象和继承","date":"2021-04-07T13:31:06.000Z","_content":"\n### 数据属性\n- Configurable：表示能否通过delete 删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认为true。\n- Enumerable：表示能否通过for-in 循环返回属性。默认为true。\n- Writable：表示能否修改属性的值。默认为true。\n- Value：包含这个属性的数据值。默认为undefined。\n\n默认情况,如下所示，person.name 的 value 为 test-name,默认可遍历，可修改，可删除。\n```js\nvar person = {\n  name: \"test-name\"\n};\n```\n\n### 设置属性的特性\n#### Object.defineProperty()方法\n这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中，描述符（descriptor）对象的属性必须是：configurable、enumerable、writable 和value。设置其中的一或多个值，可以修改对应的特性值。以设置不可修改为例：\n```js\nvar person = {};\nObject.defineProperty(person, \"name\", {\n  writable: false,\n  value: \"Nicholas\"\n});\nalert(person.name); //\"Nicholas\"\nperson.name = \"Greg\";\nalert(person.name); //\"Nicholas\"\n```\n\n### 访问器属性的特性\n- Configurable：表示能否通过delete 删除属性，能否修改属性的特性，或者能否把属性修改为数据属性。默认为true。\n- Enumerable：表示能否通过for-in 循环返回属性，默认为true。\n- Get：在读取属性时调用的函数。默认值为undefined。\n- Set：在写入属性时调用的函数。默认值为undefined。\n\n### 定义访问器属性\n#### Object.defineProperty()方法\n```js\nvar book = {\n  // 下划线是一种常用的记号，用于表示只能通过对象方法访问的属性  \n  _year: 2004,\n  edition: 1\n};\n\nObject.defineProperty(book, \"year\", {\n  get: function(){\n    return this._year;\n  },\n  set: function(newValue){\n    if (newValue > 2004) {\n      this._year = newValue;\n      this.edition += newValue - 2004;\n    }\n  }\n});\n\nbook.year = 2005;\nalert(book.edition); //2\n```\n\n### 定义多个属性\n#### Object.defineProperties()方法\n利用这个方法可以通过描述符一次定义多个属性。这个方法接收两个对象参数：第一个对象是要添加和修改其属性的对象，第二个对象的属性与第一个对象中要添加或修改的属性一一对应。例如：\n```js\nvar book = {};\nObject.defineProperties(book, {\n  _year: {\n    value: 2004\n  },\n  \n  edition: {\n    value: 1\n  },\n\n  year: {\n    get: function(){\n      return this._year;\n    },\n\n    set: function(newValue){\n      if (newValue > 2004) {\n        this._year = newValue;\n        this.edition += newValue - 2004;\n      }\n    } \n  }\n});\n```\n\n### 查看属性的特性\n#### Object.getOwnPropertyDescriptor()方法\n这个方法接收两个参数：属性所在的对象和要读取其描述符的属性名称。返回值是一个对象，如果是访问器属性，这个对象的属性有configurable、enumerable、get 和set；如果是数据属性，这个对象的属性有configurable、enumerable、writable 和value。例如：\n```js\nvar book = {};\n\nObject.defineProperties(book, {\n  _year: {\n    value: 2004\n  },\n\n  edition: {\n    value: 1\n  },\n\n  year: {\n    get: function(){\n      return this._year;\n    },\n\n    set: function(newValue){\n      if (newValue > 2004) {\n        this._year = newValue;\n        this.edition += newValue - 2004;\n      }\n    }\n  }\n});\n\nvar descriptor = Object.getOwnPropertyDescriptor(book, \"_year\");\n// {value: 2004, writable: false, enumerable: false, configurable: false}\nalert(descriptor.value); //2004\nalert(descriptor.configurable); //false\nalert(typeof descriptor.get); //\"undefined\"\n\nvar descriptor = Object.getOwnPropertyDescriptor(book, \"year\");\n// {enumerable: false, configurable: false, get: ƒ, set: ƒ}\nalert(descriptor.value); //undefined\nalert(descriptor.enumerable); //false\nalert(typeof descriptor.get); //\"function\"\n```\n","source":"_posts/JavaScript-对象和继承.md","raw":"---\ntitle: JavaScript-对象和继承\ndate: 2021-04-07 21:31:06\ntags: JavaScript\n---\n\n### 数据属性\n- Configurable：表示能否通过delete 删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认为true。\n- Enumerable：表示能否通过for-in 循环返回属性。默认为true。\n- Writable：表示能否修改属性的值。默认为true。\n- Value：包含这个属性的数据值。默认为undefined。\n\n默认情况,如下所示，person.name 的 value 为 test-name,默认可遍历，可修改，可删除。\n```js\nvar person = {\n  name: \"test-name\"\n};\n```\n\n### 设置属性的特性\n#### Object.defineProperty()方法\n这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中，描述符（descriptor）对象的属性必须是：configurable、enumerable、writable 和value。设置其中的一或多个值，可以修改对应的特性值。以设置不可修改为例：\n```js\nvar person = {};\nObject.defineProperty(person, \"name\", {\n  writable: false,\n  value: \"Nicholas\"\n});\nalert(person.name); //\"Nicholas\"\nperson.name = \"Greg\";\nalert(person.name); //\"Nicholas\"\n```\n\n### 访问器属性的特性\n- Configurable：表示能否通过delete 删除属性，能否修改属性的特性，或者能否把属性修改为数据属性。默认为true。\n- Enumerable：表示能否通过for-in 循环返回属性，默认为true。\n- Get：在读取属性时调用的函数。默认值为undefined。\n- Set：在写入属性时调用的函数。默认值为undefined。\n\n### 定义访问器属性\n#### Object.defineProperty()方法\n```js\nvar book = {\n  // 下划线是一种常用的记号，用于表示只能通过对象方法访问的属性  \n  _year: 2004,\n  edition: 1\n};\n\nObject.defineProperty(book, \"year\", {\n  get: function(){\n    return this._year;\n  },\n  set: function(newValue){\n    if (newValue > 2004) {\n      this._year = newValue;\n      this.edition += newValue - 2004;\n    }\n  }\n});\n\nbook.year = 2005;\nalert(book.edition); //2\n```\n\n### 定义多个属性\n#### Object.defineProperties()方法\n利用这个方法可以通过描述符一次定义多个属性。这个方法接收两个对象参数：第一个对象是要添加和修改其属性的对象，第二个对象的属性与第一个对象中要添加或修改的属性一一对应。例如：\n```js\nvar book = {};\nObject.defineProperties(book, {\n  _year: {\n    value: 2004\n  },\n  \n  edition: {\n    value: 1\n  },\n\n  year: {\n    get: function(){\n      return this._year;\n    },\n\n    set: function(newValue){\n      if (newValue > 2004) {\n        this._year = newValue;\n        this.edition += newValue - 2004;\n      }\n    } \n  }\n});\n```\n\n### 查看属性的特性\n#### Object.getOwnPropertyDescriptor()方法\n这个方法接收两个参数：属性所在的对象和要读取其描述符的属性名称。返回值是一个对象，如果是访问器属性，这个对象的属性有configurable、enumerable、get 和set；如果是数据属性，这个对象的属性有configurable、enumerable、writable 和value。例如：\n```js\nvar book = {};\n\nObject.defineProperties(book, {\n  _year: {\n    value: 2004\n  },\n\n  edition: {\n    value: 1\n  },\n\n  year: {\n    get: function(){\n      return this._year;\n    },\n\n    set: function(newValue){\n      if (newValue > 2004) {\n        this._year = newValue;\n        this.edition += newValue - 2004;\n      }\n    }\n  }\n});\n\nvar descriptor = Object.getOwnPropertyDescriptor(book, \"_year\");\n// {value: 2004, writable: false, enumerable: false, configurable: false}\nalert(descriptor.value); //2004\nalert(descriptor.configurable); //false\nalert(typeof descriptor.get); //\"undefined\"\n\nvar descriptor = Object.getOwnPropertyDescriptor(book, \"year\");\n// {enumerable: false, configurable: false, get: ƒ, set: ƒ}\nalert(descriptor.value); //undefined\nalert(descriptor.enumerable); //false\nalert(typeof descriptor.get); //\"function\"\n```\n","slug":"JavaScript-对象和继承","published":1,"updated":"2021-09-04T09:47:13.417Z","_id":"ckn7ivd9i0000shpv7fbw9fr7","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h3><ul>\n<li>Configurable：表示能否通过delete 删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认为true。</li>\n<li>Enumerable：表示能否通过for-in 循环返回属性。默认为true。</li>\n<li>Writable：表示能否修改属性的值。默认为true。</li>\n<li>Value：包含这个属性的数据值。默认为undefined。</li>\n</ul>\n<p>默认情况,如下所示，person.name 的 value 为 test-name,默认可遍历，可修改，可删除。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;test-name&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置属性的特性\"><a href=\"#设置属性的特性\" class=\"headerlink\" title=\"设置属性的特性\"></a>设置属性的特性</h3><h4 id=\"Object-defineProperty-方法\"><a href=\"#Object-defineProperty-方法\" class=\"headerlink\" title=\"Object.defineProperty()方法\"></a>Object.defineProperty()方法</h4><p>这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中，描述符（descriptor）对象的属性必须是：configurable、enumerable、writable 和value。设置其中的一或多个值，可以修改对应的特性值。以设置不可修改为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">&quot;name&quot;</span>, &#123;</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&quot;Nicholas&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(person.name); <span class=\"comment\">//&quot;Nicholas&quot;</span></span><br><span class=\"line\">person.name = <span class=\"string\">&quot;Greg&quot;</span>;</span><br><span class=\"line\">alert(person.name); <span class=\"comment\">//&quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问器属性的特性\"><a href=\"#访问器属性的特性\" class=\"headerlink\" title=\"访问器属性的特性\"></a>访问器属性的特性</h3><ul>\n<li>Configurable：表示能否通过delete 删除属性，能否修改属性的特性，或者能否把属性修改为数据属性。默认为true。</li>\n<li>Enumerable：表示能否通过for-in 循环返回属性，默认为true。</li>\n<li>Get：在读取属性时调用的函数。默认值为undefined。</li>\n<li>Set：在写入属性时调用的函数。默认值为undefined。</li>\n</ul>\n<h3 id=\"定义访问器属性\"><a href=\"#定义访问器属性\" class=\"headerlink\" title=\"定义访问器属性\"></a>定义访问器属性</h3><h4 id=\"Object-defineProperty-方法-1\"><a href=\"#Object-defineProperty-方法-1\" class=\"headerlink\" title=\"Object.defineProperty()方法\"></a>Object.defineProperty()方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 下划线是一种常用的记号，用于表示只能通过对象方法访问的属性  </span></span><br><span class=\"line\">  _year: <span class=\"number\">2004</span>,</span><br><span class=\"line\">  edition: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(book, <span class=\"string\">&quot;year&quot;</span>, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._year;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">2004</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._year = newValue;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.edition += newValue - <span class=\"number\">2004</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">book.year = <span class=\"number\">2005</span>;</span><br><span class=\"line\">alert(book.edition); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义多个属性\"><a href=\"#定义多个属性\" class=\"headerlink\" title=\"定义多个属性\"></a>定义多个属性</h3><h4 id=\"Object-defineProperties-方法\"><a href=\"#Object-defineProperties-方法\" class=\"headerlink\" title=\"Object.defineProperties()方法\"></a>Object.defineProperties()方法</h4><p>利用这个方法可以通过描述符一次定义多个属性。这个方法接收两个对象参数：第一个对象是要添加和修改其属性的对象，第二个对象的属性与第一个对象中要添加或修改的属性一一对应。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(book, &#123;</span><br><span class=\"line\">  _year: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">2004</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  edition: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  year: &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._year;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">2004</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>._year = newValue;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.edition += newValue - <span class=\"number\">2004</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看属性的特性\"><a href=\"#查看属性的特性\" class=\"headerlink\" title=\"查看属性的特性\"></a>查看属性的特性</h3><h4 id=\"Object-getOwnPropertyDescriptor-方法\"><a href=\"#Object-getOwnPropertyDescriptor-方法\" class=\"headerlink\" title=\"Object.getOwnPropertyDescriptor()方法\"></a>Object.getOwnPropertyDescriptor()方法</h4><p>这个方法接收两个参数：属性所在的对象和要读取其描述符的属性名称。返回值是一个对象，如果是访问器属性，这个对象的属性有configurable、enumerable、get 和set；如果是数据属性，这个对象的属性有configurable、enumerable、writable 和value。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(book, &#123;</span><br><span class=\"line\">  _year: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">2004</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  edition: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  year: &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._year;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">2004</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>._year = newValue;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.edition += newValue - <span class=\"number\">2004</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(book, <span class=\"string\">&quot;_year&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;value: 2004, writable: false, enumerable: false, configurable: false&#125;</span></span><br><span class=\"line\">alert(descriptor.value); <span class=\"comment\">//2004</span></span><br><span class=\"line\">alert(descriptor.configurable); <span class=\"comment\">//false</span></span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> descriptor.get); <span class=\"comment\">//&quot;undefined&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(book, <span class=\"string\">&quot;year&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;enumerable: false, configurable: false, get: ƒ, set: ƒ&#125;</span></span><br><span class=\"line\">alert(descriptor.value); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">alert(descriptor.enumerable); <span class=\"comment\">//false</span></span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> descriptor.get); <span class=\"comment\">//&quot;function&quot;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h3><ul>\n<li>Configurable：表示能否通过delete 删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认为true。</li>\n<li>Enumerable：表示能否通过for-in 循环返回属性。默认为true。</li>\n<li>Writable：表示能否修改属性的值。默认为true。</li>\n<li>Value：包含这个属性的数据值。默认为undefined。</li>\n</ul>\n<p>默认情况,如下所示，person.name 的 value 为 test-name,默认可遍历，可修改，可删除。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;test-name&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置属性的特性\"><a href=\"#设置属性的特性\" class=\"headerlink\" title=\"设置属性的特性\"></a>设置属性的特性</h3><h4 id=\"Object-defineProperty-方法\"><a href=\"#Object-defineProperty-方法\" class=\"headerlink\" title=\"Object.defineProperty()方法\"></a>Object.defineProperty()方法</h4><p>这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中，描述符（descriptor）对象的属性必须是：configurable、enumerable、writable 和value。设置其中的一或多个值，可以修改对应的特性值。以设置不可修改为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">&quot;name&quot;</span>, &#123;</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&quot;Nicholas&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">alert(person.name); <span class=\"comment\">//&quot;Nicholas&quot;</span></span><br><span class=\"line\">person.name = <span class=\"string\">&quot;Greg&quot;</span>;</span><br><span class=\"line\">alert(person.name); <span class=\"comment\">//&quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问器属性的特性\"><a href=\"#访问器属性的特性\" class=\"headerlink\" title=\"访问器属性的特性\"></a>访问器属性的特性</h3><ul>\n<li>Configurable：表示能否通过delete 删除属性，能否修改属性的特性，或者能否把属性修改为数据属性。默认为true。</li>\n<li>Enumerable：表示能否通过for-in 循环返回属性，默认为true。</li>\n<li>Get：在读取属性时调用的函数。默认值为undefined。</li>\n<li>Set：在写入属性时调用的函数。默认值为undefined。</li>\n</ul>\n<h3 id=\"定义访问器属性\"><a href=\"#定义访问器属性\" class=\"headerlink\" title=\"定义访问器属性\"></a>定义访问器属性</h3><h4 id=\"Object-defineProperty-方法-1\"><a href=\"#Object-defineProperty-方法-1\" class=\"headerlink\" title=\"Object.defineProperty()方法\"></a>Object.defineProperty()方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 下划线是一种常用的记号，用于表示只能通过对象方法访问的属性  </span></span><br><span class=\"line\">  _year: <span class=\"number\">2004</span>,</span><br><span class=\"line\">  edition: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(book, <span class=\"string\">&quot;year&quot;</span>, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._year;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">2004</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._year = newValue;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.edition += newValue - <span class=\"number\">2004</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">book.year = <span class=\"number\">2005</span>;</span><br><span class=\"line\">alert(book.edition); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义多个属性\"><a href=\"#定义多个属性\" class=\"headerlink\" title=\"定义多个属性\"></a>定义多个属性</h3><h4 id=\"Object-defineProperties-方法\"><a href=\"#Object-defineProperties-方法\" class=\"headerlink\" title=\"Object.defineProperties()方法\"></a>Object.defineProperties()方法</h4><p>利用这个方法可以通过描述符一次定义多个属性。这个方法接收两个对象参数：第一个对象是要添加和修改其属性的对象，第二个对象的属性与第一个对象中要添加或修改的属性一一对应。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(book, &#123;</span><br><span class=\"line\">  _year: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">2004</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  edition: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  year: &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._year;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">2004</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>._year = newValue;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.edition += newValue - <span class=\"number\">2004</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看属性的特性\"><a href=\"#查看属性的特性\" class=\"headerlink\" title=\"查看属性的特性\"></a>查看属性的特性</h3><h4 id=\"Object-getOwnPropertyDescriptor-方法\"><a href=\"#Object-getOwnPropertyDescriptor-方法\" class=\"headerlink\" title=\"Object.getOwnPropertyDescriptor()方法\"></a>Object.getOwnPropertyDescriptor()方法</h4><p>这个方法接收两个参数：属性所在的对象和要读取其描述符的属性名称。返回值是一个对象，如果是访问器属性，这个对象的属性有configurable、enumerable、get 和set；如果是数据属性，这个对象的属性有configurable、enumerable、writable 和value。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(book, &#123;</span><br><span class=\"line\">  _year: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">2004</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  edition: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  year: &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._year;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">2004</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>._year = newValue;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.edition += newValue - <span class=\"number\">2004</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(book, <span class=\"string\">&quot;_year&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;value: 2004, writable: false, enumerable: false, configurable: false&#125;</span></span><br><span class=\"line\">alert(descriptor.value); <span class=\"comment\">//2004</span></span><br><span class=\"line\">alert(descriptor.configurable); <span class=\"comment\">//false</span></span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> descriptor.get); <span class=\"comment\">//&quot;undefined&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(book, <span class=\"string\">&quot;year&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;enumerable: false, configurable: false, get: ƒ, set: ƒ&#125;</span></span><br><span class=\"line\">alert(descriptor.value); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">alert(descriptor.enumerable); <span class=\"comment\">//false</span></span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> descriptor.get); <span class=\"comment\">//&quot;function&quot;</span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckmd8l6an0001zepv4pyn0cem","tag_id":"ckmd8l6ar0004zepv8l2x44o7","_id":"ckmd8l6av0009zepv95w55acg"},{"post_id":"ckmd8l6as0005zepv88l54lp2","tag_id":"ckmd8l6au0008zepv7qg29xqf","_id":"ckmd8l6ay000dzepvaaiy7zk8"},{"post_id":"ckmd8l6ax000czepv91j06ga2","tag_id":"ckmd8l6ay000fzepvgnx13fp2","_id":"ckmd8l6b1000kzepvgd2h725x"},{"post_id":"ckmd8l6az000hzepv3rsj8gfu","tag_id":"ckmd8l6b1000jzepvegyagmsc","_id":"ckmd8l6b1000lzepvetifap07"},{"post_id":"ckmd8l6bf000mzepv4a3f9pkq","tag_id":"ckmd8l6bg000nzepv26cj8wtx","_id":"ckmd8l6bh000ozepv8xft1365"},{"post_id":"ckmewel51000027pv7rte8m2t","tag_id":"ckmewel52000127pvafe311my","_id":"ckmewel56000227pv10wt35i4"},{"post_id":"ckmeyncgf000090pv5aa0552d","tag_id":"ckmd8l6ar0004zepv8l2x44o7","_id":"ckmeyncgi000190pv6blyf2q8"},{"post_id":"ckmikb9bw0000tgpvbiu0dwaa","tag_id":"ckmd8l6ar0004zepv8l2x44o7","_id":"ckmikb9cc0001tgpvei600tcr"},{"post_id":"ckmu98m3900006fpvbl6e3t4g","tag_id":"ckmu98m3l00016fpve0t2cg4t","_id":"ckmu98m3q00026fpv9nm73b6s"},{"post_id":"ckmue3fkk0000fxpv3w5h7dol","tag_id":"ckmu98m3l00016fpve0t2cg4t","_id":"ckmue3fkw0001fxpvaeny0yg2"},{"post_id":"ckmujqkf30000q7pvccwxfisq","tag_id":"ckmu98m3l00016fpve0t2cg4t","_id":"ckmujqkfr0001q7pv6cndfkx8"},{"post_id":"ckmvs95yz0000wipv2df65u24","tag_id":"ckmu98m3l00016fpve0t2cg4t","_id":"ckmvs95zo0001wipv4xztfsp2"},{"post_id":"ckn0bet220000e8pv6vxdb6ue","tag_id":"ckmu98m3l00016fpve0t2cg4t","_id":"ckn0bet250001e8pv4e3r689o"},{"post_id":"ckn0djpgk0000iqpvages6qw5","tag_id":"ckmu98m3l00016fpve0t2cg4t","_id":"ckn0djpgn0001iqpvare1531m"},{"post_id":"ckn7ivd9i0000shpv7fbw9fr7","tag_id":"ckmd8l6ar0004zepv8l2x44o7","_id":"ckn7ivd9l0001shpvdx6t8qyp"}],"Tag":[{"name":"JavaScript","_id":"ckmd8l6ar0004zepv8l2x44o7"},{"name":"Git","_id":"ckmd8l6au0008zepv7qg29xqf"},{"name":"FTP","_id":"ckmd8l6ay000fzepvgnx13fp2"},{"name":"算法","_id":"ckmd8l6b1000jzepvegyagmsc"},{"name":"HTTP","_id":"ckmd8l6bg000nzepv26cj8wtx"},{"name":"命令操作","_id":"ckmewel52000127pvafe311my"},{"name":"leetcode","_id":"ckmu98m3l00016fpve0t2cg4t"}]}}